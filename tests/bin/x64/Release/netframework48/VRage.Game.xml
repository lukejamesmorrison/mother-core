<?xml version="1.0"?>
<doc>
    <assembly>
        <name>VRage.Game</name>
    </assembly>
    <members>
        <member name="M:VRage.Game.AI.MyPathfindingOctree.IsEmpty(VRageMath.BoundingBoxI)">
            <summary>
            Checks if the specified bounding box contains only empty nodes. Bounding box is in local grid space.
            </summary>
            <param name="checkBounds">local grid space bounding box</param>
            <returns>true if all nodes inside bounding box are empty</returns>
        </member>
        <member name="P:VRage.Game.AI.MyPathfindingOctreeNode.WorldOBB">
            <summary>
            Gets World oriented bounding box of the node. Used only when grid is static
            </summary>
        </member>
        <member name="T:VRage.Game.AI.RVO.Agent">
            <summary>Defines an agent in the simulation.</summary>
        </member>
        <member name="M:VRage.Game.AI.RVO.Agent.ComputeNeighbors">
            <summary>Computes the neighbors of this agent.</summary>
        </member>
        <member name="M:VRage.Game.AI.RVO.Agent.ComputeNewVelocity(System.Single)">
            <summary>Computes the new velocity of this agent.</summary>
        </member>
        <member name="M:VRage.Game.AI.RVO.Agent.InsertAgentNeighbor(VRage.Game.AI.RVO.Agent,System.Single@)">
             <summary>Inserts an agent neighbor into the set of neighbors of this
             agent.</summary>
            
             <param name="agent">A pointer to the agent to be inserted.</param>
             <param name="rangeSq">The squared range around this agent.</param>
        </member>
        <member name="T:VRage.Game.AI.RVO.Simulator">
            <summary>Defines the simulation.</summary>
        </member>
        <member name="M:VRage.Game.AI.RVO.Simulator.#ctor">
            <summary>Constructs and initializes a simulation.</summary>
        </member>
        <member name="M:VRage.Game.AI.RVO.Simulator.AddAgent(VRageMath.Vector3D,VRage.Game.ModAPI.IMyCubeGrid)">
            <summary>
            Adds a new agent with default properties to the simulation.
            </summary>
            <param name="position">starting position of this agent</param>
            <param name="grid">grid for this agent</param>
            <returns>The number of the agent, or -1 when the agent defaults have not been set.</returns>
        </member>
        <member name="M:VRage.Game.AI.RVO.Simulator.Clear">
            <summary>Clears the simulation.</summary>
        </member>
        <member name="M:VRage.Game.AI.RVO.Simulator.DoStep">
             <summary>Performs a simulation step and updates the two-dimensional
             position and two-dimensional velocity of each agent.</summary>
            
             <returns>The global time after the simulation step.</returns>
        </member>
        <member name="M:VRage.Game.AI.RVO.Simulator.SetAgentDefaults(System.Single,System.Int32,System.Single,System.Single,System.Single,VRageMath.Vector3)">
             <summary>Sets the default properties for any new agent that is added.
             </summary>
            
             <param name="neighborDist">The default maximum distance (center point
             to center point) to other agents a new agent takes into account in
             the navigation. The larger this number, the longer he running time of
             the simulation. If the number is too low, the simulation will not be
             safe. Must be non-negative.</param>
             <param name="maxNeighbors">The default maximum number of other agents
             a new agent takes into account in the navigation. The larger this
             number, the longer the running time of the simulation. If the number
             is too low, the simulation will not be safe.</param>
             <param name="timeHorizon">The default minimal amount of time for
             which a new agent's velocities that are computed by the simulation
             are safe with respect to other agents. The larger this number, the
             sooner an agent will respond to the presence of other agents, but the
             less freedom the agent has in choosing its velocities. Must be
             positive.</param>         
             <param name="radius">The default radius of a new agent. Must be
             non-negative.</param>
             <param name="maxSpeed">The default maximum speed of a new agent. Must
             be non-negative.</param>
             <param name="velocity">The default initial two-dimensional linear
             velocity of a new agent.</param>
        </member>
        <member name="T:VRage.Game.Common.MyExtDebugClient">
            <summary>
            Auto-debug client.
            </summary>
        </member>
        <member name="T:VRage.Game.Components.IMyComponentAggregate">
            <summary>
            When creating a new aggregate component type, derive from this interface so that you can use extension methods
            AddComponent and RemoveComponent
            </summary>
        </member>
        <member name="M:VRage.Game.Components.MyComponentAggregateExtensions.AttachComponent(VRage.Game.Components.IMyComponentAggregate,VRage.Game.Components.MyComponentBase)">
            <summary>
            Adds to list but doesn't change ownership
            </summary>
        </member>
        <member name="M:VRage.Game.Components.MyComponentAggregateExtensions.DetachComponent(VRage.Game.Components.IMyComponentAggregate,VRage.Game.Components.MyComponentBase)">
            <summary>
            Removes from list, but doesn't change ownership
            </summary>
        </member>
        <member name="T:VRage.Game.Components.IMyComponentOwner`1">
            <summary>
            Always implement explicitly, because of Obfuscation
            </summary>
        </member>
        <member name="M:VRage.Game.Components.IMyComponentOwner`1.GetComponent(`0@)">
            <summary>
            Always implement explicitly, because of Obfuscation
            </summary>
        </member>
        <member name="M:VRage.Game.Components.Interfaces.IMyResourceSinkComponent.SetRequiredInputFuncByType(VRage.Game.MyDefinitionId,System.Func{System.Single})">
            <summary>
            Change the required input function (callback) for given type of resource. It does not call it immediately to update required input value.
            </summary>
        </member>
        <member name="P:VRage.Game.Components.MyComponentBase.ContainerBase">
            <summary>
            This cannot be named Container to not conflict with the definition of Container in MyEntityComponentBase.
            </summary>
        </member>
        <member name="M:VRage.Game.Components.MyComponentBase.SetContainer(VRage.Game.Components.Interfaces.IMyComponentContainer)">
            <summary>
            Sets the container of this component.
            Note that the component is not added to the container here! Therefore, use MyComponentContainer.Add(...) method and it
            will in turn call this method. Actually, you should seldom have the need to call this method yourself.
            </summary>
            <param name="container">The new container of the component</param>
        </member>
        <member name="M:VRage.Game.Components.MyComponentBase.OnAddedToContainer">
            <summary>
            Gets called after the container of this component changes
            </summary>
        </member>
        <member name="M:VRage.Game.Components.MyComponentBase.OnBeforeRemovedFromContainer">
            <summary>
            Gets called before the removal of this component from a container
            </summary>
        </member>
        <member name="M:VRage.Game.Components.MyComponentBase.OnAddedToScene">
            <summary>
            CH: TOOD: Be careful! This does not get called if the component is added to a container that is in the scene already!
            </summary>
        </member>
        <member name="M:VRage.Game.Components.MyComponentBase.OnRemovedFromScene">
            <summary>
            CH: TOOD: Be careful! This does not get called if the component is removed from a container that is still in the scene!
            </summary>
        </member>
        <member name="M:VRage.Game.Components.MyComponentBase.IsSerialized">
            <summary>
            Tells the component container serializer whether this component should be saved
            </summary>
            <returns></returns>
        </member>
        <member name="M:VRage.Game.Components.MyComponentContainer.Contains(System.Type)">
            <summary>
            Returns if any component is assignable from type
            </summary>
            <param name="type"></param>
            <returns></returns>
        </member>
        <member name="T:VRage.Game.Components.MyEntityDependencyTypeAttribute">
            <summary>
            Entity Dependency type is required for entity component. 
            If entity type is not equal, subclass or assignable, entity component will not be created and it's considered as error.
            </summary>
        </member>
        <member name="P:VRage.Game.Components.MyEntityComponentBase.ComponentTypeDebugString">
            <summary>
            Name of the base component type for debug purposes (e.g.: "Position")
            </summary>
        </member>
        <member name="M:VRage.Game.Components.MyHierarchyComponentBase.GetTopMostParent(System.Type)">
            <summary>
            Return top most parent of this entity
            </summary>
            <returns></returns>
        </member>
        <member name="F:VRage.Game.Components.MyHierarchyComponentBase.ChildId">
            Identifier for the parent hierarchy.
            
            This is should be reliably unique within a hierarchy level but only usable by the parent.
        </member>
        <member name="P:VRage.Game.Components.MyHierarchyComponentBase.Children">
            <summary>
            Gets the children collection.
            </summary>
        </member>
        <member name="P:VRage.Game.Components.MyHierarchyComponentBase.ChildrenNeedingWorldMatrix">
            <summary>
            Gets the children collection for spatial updates.
            </summary>
        </member>
        <member name="M:VRage.Game.Components.MyHierarchyComponentBase.AddChild(VRage.ModAPI.IMyEntity,System.Boolean,System.Boolean)">
            <summary>
            Adds the child.
            </summary>
            <param name="child">The child.</param>
            <param name="preserveWorldPos">if set to <c>true</c> [preserve absolute position].</param>
            <param name="insertIntoSceneIfNeeded"></param>
        </member>
        <member name="M:VRage.Game.Components.MyHierarchyComponentBase.RemoveChild(VRage.ModAPI.IMyEntity,System.Boolean)">
            <summary>
            Removes the child.
            </summary>
            <param name="child">The child.</param>
            <param name="preserveWorldPos">if set to <c>true</c> [preserve absolute position].</param>
        </member>
        <member name="M:VRage.Game.Components.MyModStorageComponentBase.GetValue(System.Guid)">
            <summary>
            Gets a value from the Storage dictionary with the specified key.
            </summary>        
            <param name="guid"></param>
            <returns></returns>
            <remarks>This can throw exceptions</remarks>
        </member>
        <member name="M:VRage.Game.Components.MyModStorageComponentBase.TryGetValue(System.Guid,System.String@)">
            <summary>
            Tries to a value from the Storage dictionary with the specified key.
            </summary>        
            <param name="guid"></param>
            <param name="value"></param>
            <returns><b>true</b> on success; <b>false</b> on failure</returns>
        </member>
        <member name="M:VRage.Game.Components.MyModStorageComponentBase.SetValue(System.Guid,System.String)">
            <summary>
            Stores a value with the specified key into the Storage dictionary.
            </summary>        
            <param name="guid"></param>
            <param name="value"></param>
        </member>
        <member name="M:VRage.Game.Components.MyModStorageComponentBase.RemoveValue(System.Guid)">
            <summary>
            Removes a value with the specified key from the Storage dictionary.
            </summary>
            <param name="guid"></param>
        </member>
        <member name="T:VRage.Game.Components.RigidBodyFlag">
            <summary>
            Physical shape settings
            </summary>
        </member>
        <member name="F:VRage.Game.Components.RigidBodyFlag.RBF_DEFAULT">
            <summary>
            Default flag
            </summary>
        </member>
        <member name="F:VRage.Game.Components.RigidBodyFlag.RBF_KINEMATIC">
            <summary>
            Rigid body is kinematic (has to be updated (matrix) per frame, velocity etc is then computed..)
            Changing:
            MotionType = HkMotionType.Keyframed;
            QualityType = HkCollidableQualityType.Keyframed;
            </summary>
        </member>
        <member name="F:VRage.Game.Components.RigidBodyFlag.RBF_STATIC">
            <summary>
            Rigid body is static, and colliding with it, won't move it (in Havok and SE worlds)
            Changing:
            MotionType = HkMotionType.Fixed;
            QualityType = HkCollidableQualityType.Fixed;
            </summary>
        </member>
        <member name="F:VRage.Game.Components.RigidBodyFlag.RBF_DISABLE_COLLISION_RESPONSE">
            <summary>
            Rigid body has no collision response. Entities marked with this flag would not update position after Havok physics update.
            However you still can get position from Havok with code `Physics.GetWorldMatrix`
            Changing:
            MotionType = HkMotionType.Fixed;
            QualityType = HkCollidableQualityType.Fixed;
            </summary>
        </member>
        <member name="F:VRage.Game.Components.RigidBodyFlag.RBF_DOUBLED_KINEMATIC">
            <summary>
            Used for moving objects with high quality of simulation
            Changing:
            MotionType = HkMotionType.Dynamic;
            QualityType = HkCollidableQualityType.Moving;
            </summary>
        </member>
        <member name="F:VRage.Game.Components.RigidBodyFlag.RBF_BULLET">
            <summary>
            Used for fast moving objects
            Changing:
            MotionType = HkMotionType.Dynamic;
            QualityType = HkCollidableQualityType.Bullet;
            </summary>
        </member>
        <member name="F:VRage.Game.Components.RigidBodyFlag.RBF_DEBRIS">
            <summary>
            Used for low quality physics
            Changing:
            MotionType = HkMotionType.Dynamic;
            QualityType = HkCollidableQualityType.Debris;
            SolverDeactivation = HkSolverDeactivation.Max;
            </summary>
        </member>
        <member name="F:VRage.Game.Components.RigidBodyFlag.RBF_KEYFRAMED_REPORTING">
            <summary>
            Changing:
            MotionType = HkMotionType.Keyframed;
            QualityType = HkCollidableQualityType.KeyframedReporting;
            </summary>
        </member>
        <member name="F:VRage.Game.Components.RigidBodyFlag.RBF_UNLOCKED_SPEEDS">
            <summary>
            Making maximum Velocity of entity to x10 of Large/Small ShipMaxLinearVelocity. Used for simulation of very fast moving objects
            </summary>
        </member>
        <member name="F:VRage.Game.Components.RigidBodyFlag.RBF_NO_POSITION_UPDATES">
            <summary>
            Don't update entity position from havok after simulation
            </summary>
        </member>
        <member name="T:VRage.Game.Components.MyPhysicsForceType">
            <summary>
            Force type applied to physic object.
            </summary>
        </member>
        <member name="F:VRage.Game.Components.MyPhysicsForceType.APPLY_WORLD_IMPULSE_AND_WORLD_ANGULAR_IMPULSE">
            <summary>
            
            </summary>
        </member>
        <member name="F:VRage.Game.Components.MyPhysicsForceType.ADD_BODY_FORCE_AND_BODY_TORQUE">
            <summary>
            
            </summary>
        </member>
        <member name="F:VRage.Game.Components.MyPhysicsComponentBase.ContactPointDelay">
            <summary>
            Must be set before creating rigid body
            </summary>
        </member>
        <member name="P:VRage.Game.Components.MyPhysicsComponentBase.MaterialType">
            <summary>
            Gets or sets the type of the material.
            </summary>
            <value>
            The type of the material.
            </value>
        </member>
        <member name="P:VRage.Game.Components.MyPhysicsComponentBase.IsStatic">
            <summary>
            Gets or sets a value indicating whether this is static.
            </summary>
            <value>
              <c>true</c> if static; otherwise, <c>false</c>.
            </value>
        </member>
        <member name="P:VRage.Game.Components.MyPhysicsComponentBase.IsKinematic">
            <summary>
            Gets or sets a value indicating whether this is kinematic.
            </summary>
            <value>
              <c>true</c> if kinematic; otherwise, <c>false</c>.
            </value>
        </member>
        <member name="P:VRage.Game.Components.MyPhysicsComponentBase.Enabled">
            <summary>
            Gets or sets a value indicating whether this is enabled.
            </summary>
            <value>
              <c>true</c> if enabled; otherwise, <c>false</c>.
            </value>
        </member>
        <member name="P:VRage.Game.Components.MyPhysicsComponentBase.PlayCollisionCueEnabled">
            <summary>
            Gets or sets a value indicating whether [play collision cue enabled].
            </summary>
            <value>
            	<c>true</c> if [play collision cue enabled]; otherwise, <c>false</c>.
            </value>
        </member>
        <member name="P:VRage.Game.Components.MyPhysicsComponentBase.Mass">
            <summary>
            Gets or sets the mass.
            </summary>
            <value>
            The mass.
            </value>
        </member>
        <member name="P:VRage.Game.Components.MyPhysicsComponentBase.LinearVelocity">
            <summary>
            Gets or sets the linear velocity.
            </summary>
            <value>
            The linear velocity.
            </value>
        </member>
        <member name="P:VRage.Game.Components.MyPhysicsComponentBase.LinearDamping">
            <summary>
            Gets or sets the linear damping.
            </summary>
            <value>
            The linear damping.
            </value>
        </member>
        <member name="P:VRage.Game.Components.MyPhysicsComponentBase.AngularDamping">
            <summary>
            Gets or sets the angular damping.
            </summary>
            <value>
            The angular damping.
            </value>
        </member>
        <member name="P:VRage.Game.Components.MyPhysicsComponentBase.Speed">
            <summary>
            Gets or sets the speed.
            </summary>
            <value>
            The speed.
            </value>
        </member>
        <member name="P:VRage.Game.Components.MyPhysicsComponentBase.RigidBody">
            <summary>
            Obtain/set (default) rigid body of this physics object.
            </summary>
        </member>
        <member name="P:VRage.Game.Components.MyPhysicsComponentBase.RigidBody2">
            <summary>
            Obtain/set secondary rigid body of this physics object (not used by default, it is used sometimes on grids for kinematic layer).
            </summary>
        </member>
        <member name="F:VRage.Game.Components.MyPhysicsComponentBase.IsPhantom">
            <summary>
            Use something from Havok to detect this
            </summary>
        </member>
        <member name="E:VRage.Game.Components.MyPhysicsComponentBase.OnBodyActiveStateChanged">
            <summary>
            OnBodyActiveStateChanged event - arg1 - Sender, arg2 - is active
            </summary>        
        </member>
        <member name="M:VRage.Game.Components.MyPhysicsComponentBase.AddForce(VRage.Game.Components.MyPhysicsForceType,System.Nullable{VRageMath.Vector3},System.Nullable{VRageMath.Vector3D},System.Nullable{VRageMath.Vector3},System.Nullable{System.Single},System.Boolean,System.Boolean)">
            <summary>
            Applies external force to the physics object.
            </summary>
            <param name="type">The type.</param>
            <param name="force">The force.</param>
            <param name="position">The position.</param>
            <param name="torque">The torque.</param>
            <param name="maxSpeed">Clamp max speed</param>
            <param name="applyImmediately">Apply immediately or enqueue to apply right before simulation</param>
            <param name="activeOnly">Only apply if the object is already active</param>
        </member>
        <member name="M:VRage.Game.Components.MyPhysicsComponentBase.ApplyImpulse(VRageMath.Vector3,VRageMath.Vector3D)">
            <summary>
            Applies the impulse.
            </summary>
            <param name="dir">The dir.</param>
            <param name="pos">The pos.</param>
        </member>
        <member name="M:VRage.Game.Components.MyPhysicsComponentBase.ClearSpeed">
            <summary>
            Clears the speeds.
            </summary>
        </member>
        <member name="M:VRage.Game.Components.MyPhysicsComponentBase.Clear">
            <summary>
            Clear all dynamic values of physics object.
            </summary>
        </member>
        <member name="M:VRage.Game.Components.MyPhysicsComponentBase.DebugDraw">
            <summary>
            Debug draw of this physics object.
            </summary>
        </member>
        <member name="M:VRage.Game.Components.MyPhysicsComponentBase.Activate">
            <summary>
            Activates this rigid body in physics.
            </summary>
        </member>
        <member name="M:VRage.Game.Components.MyPhysicsComponentBase.Deactivate">
            <summary>
            Deactivates this rigid body in physics.
            </summary>
        </member>
        <member name="M:VRage.Game.Components.MyPhysicsComponentBase.SetSpeeds(VRageMath.Vector3,VRageMath.Vector3)">
            <summary>
            Set the current linear and angular velocities of this physics body.
            </summary>
        </member>
        <member name="M:VRage.Game.Components.MyPhysicsComponentBase.WorldToCluster(VRageMath.Vector3D)">
            <summary>
            Converts global space position to local cluster space.
            </summary>
        </member>
        <member name="M:VRage.Game.Components.MyPhysicsComponentBase.ClusterToWorld(VRageMath.Vector3)">
            <summary>
            Converts local cluster position to global space.
            </summary>
        </member>
        <member name="M:VRage.Game.Components.MyPhysicsComponentBase.OnWorldPositionChanged(System.Object)">
            <summary>
            Called when [world position changed].
            </summary>
            <param name="source">The source object that caused this event.</param>
        </member>
        <member name="F:VRage.Game.Components.MyPositionComponentBase.m_localMatrix">
            Internal local matrix relative to parent of entity.
        </member>
        <member name="P:VRage.Game.Components.MyPositionComponentBase.WorldMatrixRef">
            <summary>
            World matrix of this physic object. Use it whenever you want to do world-matrix transformations with this physic objects.
            </summary>
        </member>
        <member name="P:VRage.Game.Components.MyPositionComponentBase.LocalMatrixRef">
            <summary>
            Gets or sets the local matrix.
            </summary>
            <value>
            The local matrix.
            </value>
        </member>
        <member name="P:VRage.Game.Components.MyPositionComponentBase.WorldAABB">
            <summary>
            Gets the world aabb.
            </summary>
        </member>
        <member name="P:VRage.Game.Components.MyPositionComponentBase.WorldVolume">
            <summary>
            Gets the world volume.
            </summary>
        </member>
        <member name="P:VRage.Game.Components.MyPositionComponentBase.LocalAABB">
            <summary>
            Sets the local aabb.
            </summary>
            <value>
            The local aabb.
            </value>
        </member>
        <member name="P:VRage.Game.Components.MyPositionComponentBase.LocalVolume">
            <summary>
            Sets the local volume.
            </summary>
            <value>
            The local volume.
            </value>
        </member>
        <member name="P:VRage.Game.Components.MyPositionComponentBase.LocalVolumeOffset">
            <summary>
            Gets or sets the local volume offset.
            </summary>
            <value>
            The local volume offset.
            </value>
        </member>
        <member name="M:VRage.Game.Components.MyPositionComponentBase.SetWorldMatrix(VRageMath.MatrixD@,System.Object,System.Boolean,System.Boolean,System.Boolean,System.Boolean,System.Boolean,System.Boolean)">
            <summary>
            Sets the world matrix.
            </summary>
            <param name="worldMatrix">The world matrix.</param>
            <param name="source">The source object that caused this change or null when not important.</param>
            <param name="forceUpdate"></param>
            <param name="updateChildren"></param>
            <param name="updateLocal"></param>
            <param name="skipTeleportCheck"></param>
            <param name="forceUpdateAllChildren"></param>
            <param name="ignoreAssert"></param>
        </member>
        <member name="M:VRage.Game.Components.MyPositionComponentBase.RecalculateWorldMatrixHRIfNeeded(System.Boolean)">
            <summary>
            Recursively recalculate world matrices for this entity and it's parents.
            </summary>
            <param name="updateChildren"></param>
            <returns>True if the world matrix has changed.</returns>
        </member>
        <member name="M:VRage.Game.Components.MyPositionComponentBase.SetLocalMatrix(VRageMath.Matrix@,System.Object,System.Boolean)">
            <summary>
            
            </summary>
            <param name="localMatrix"></param>
            <param name="source"></param>
            <param name="updateWorld"></param>
            <returns> true when World matrix needed recalculations as it got changed in here</returns>
        </member>
        <member name="M:VRage.Game.Components.MyPositionComponentBase.GetPosition">
            <summary>
            Gets the entity position.
            </summary>
            <returns></returns>
        </member>
        <member name="M:VRage.Game.Components.MyPositionComponentBase.SetPosition(VRageMath.Vector3D,System.Object,System.Boolean,System.Boolean)">
            <summary>
            Sets the position.
            </summary>
            <param name="pos">The position</param>
            <param name="source"></param>
            <param name="forceUpdate"></param>
            <param name="updateChildren"></param>
        </member>
        <member name="M:VRage.Game.Components.MyPositionComponentBase.GetOrientation">
            <summary>
            Gets the entity orientation.
            </summary>
            <returns></returns>
        </member>
        <member name="M:VRage.Game.Components.MyPositionComponentBase.UpdateWorldMatrix(System.Object,System.Boolean,System.Boolean)">
            <summary>
            Updates the world matrix (change caused by this entity)
            </summary>
        </member>
        <member name="M:VRage.Game.Components.MyPositionComponentBase.UpdateWorldMatrix(VRageMath.MatrixD@,System.Object,System.Boolean,System.Boolean)">
            <summary>
            Updates the world matrix (change caused by parent)
            </summary>
        </member>
        <member name="M:VRage.Game.Components.MyPositionComponentBase.OnWorldPositionChanged(System.Object,System.Boolean,System.Boolean)">
            <summary>
            Called when [world position changed].
            </summary>
            <param name="source">The source object that caused this event.</param>
            <param name="updateChildren"></param>
            <param name="forceUpdateAllChildren"></param>
        </member>
        <member name="M:VRage.Game.Components.MyPositionComponentBase.OnAddedToContainer">
            <inheritdoc />
        </member>
        <member name="M:VRage.Game.Components.MyPositionComponentBase.OnBeforeRemovedFromContainer">
            <inheritdoc />
        </member>
        <member name="P:VRage.Game.Components.MyRenderComponentBase.ModelStorage">
            <summary>
            Used by game to store model here. In game this is always of type MyModel.
            Implementation should only store and return passed object.
            </summary>
        </member>
        <member name="M:VRage.Game.Components.MyResourceSourceComponentBase.CurrentOutputByType(VRage.Game.MyDefinitionId)">
            <summary>
            Currently used power output of the producer in MW or litres/h.
            </summary>
        </member>
        <member name="M:VRage.Game.Components.MyResourceSourceComponentBase.MaxOutputByType(VRage.Game.MyDefinitionId)">
            <summary>
            Maximum power output of the producer in MW or litres/h.
            </summary>
        </member>
        <member name="M:VRage.Game.Components.MyResourceSourceComponentBase.DefinedOutputByType(VRage.Game.MyDefinitionId)">
            <summary>
            Max resource output defined in definition in MW or litres/h.
            </summary>
        </member>
        <member name="M:VRage.Game.Components.MyResourceSourceComponentBase.ProductionEnabledByType(VRage.Game.MyDefinitionId)">
            <summary>
            Resource production is enabled
            </summary>
        </member>
        <member name="M:VRage.Game.Components.MyUseObjectsComponentBase.RaycastDetectors(VRageMath.Vector3D,VRageMath.Vector3D,System.Single@)">
            <summary>
            Determine whether the given ray intersects any detector. If so, returns
            the parametric value of the point of first intersection.
            PARAMATER IS NOT DISTANCE!
            </summary>
        </member>
        <member name="F:VRage.Game.Components.MyUpdateOrder.BeforeSimulation">
            <summary>
            Should method UpdateBeforeSimulation be called
            </summary>
        </member>
        <member name="F:VRage.Game.Components.MyUpdateOrder.Simulation">
            <summary>
            Should method Simulate be called
            </summary>
        </member>
        <member name="F:VRage.Game.Components.MyUpdateOrder.AfterSimulation">
            <summary>
            Should method UpdateAfterSimulation be called
            </summary>
        </member>
        <member name="F:VRage.Game.Components.MyUpdateOrder.NoUpdate">
            <summary>
            None of update methods should be called
            </summary>
        </member>
        <member name="F:VRage.Game.Components.MySessionComponentDescriptor.Priority">
            <summary>
            Lower Priority is loaded before higher Priority
            </summary>
        </member>
        <member name="P:VRage.Game.Components.MySessionComponentDescriptor.IsServerOnly">
            <summary>
            Is server only is used for client request of the world. if the component is server only, it's not sent to the client on world request.
            </summary>
        </member>
        <member name="P:VRage.Game.Components.MySessionComponentBase.IsServerOnly">
            <summary>
            Is server only is used for client request of the world. if the component is server only, it's not sent to the client on world request.
            </summary>
        </member>
        <member name="P:VRage.Game.Components.MySessionComponentBase.IsRequiredByGame">
            <summary>
            Indicates whether a session component should be used in current configuration.
            Example: MyDestructionData component returns true only when game uses Havok Destruction
            </summary>
        </member>
        <member name="T:VRage.Game.Components.MyAnimationControllerComponent">
            <summary>
            Entity component containing animation controller.
            </summary>
        </member>
        <member name="F:VRage.Game.Components.MyAnimationControllerComponent.m_variablesWrite">
            <summary>Final variable storage used to update the controller.</summary>
        </member>
        <member name="F:VRage.Game.Components.MyAnimationControllerComponent.m_animVariables">
            <summary>Delta storage for variable changes since the last update started.</summary>
        </member>
        <member name="P:VRage.Game.Components.MyAnimationControllerComponent.ComponentTypeDebugString">
            <summary>
            Name of the component type for debug purposes (e.g.: "Position")
            </summary>
        </member>
        <member name="M:VRage.Game.Components.MyAnimationControllerComponent.OnAddedToContainer">
            <summary>
            Component was added in the entity component container.
            </summary>
        </member>
        <member name="M:VRage.Game.Components.MyAnimationControllerComponent.OnBeforeRemovedFromContainer">
            <summary>
            Component will be removed from entity component container.
            </summary>
        </member>
        <member name="P:VRage.Game.Components.MyAnimationControllerComponent.Controller">
            <summary>
            Get the animation controller instance.
            </summary>
        </member>
        <member name="P:VRage.Game.Components.MyAnimationControllerComponent.Variables">
            <summary>
            Get the variable storage of animation controller instance. Shortcut.
            </summary>
        </member>
        <member name="P:VRage.Game.Components.MyAnimationControllerComponent.CharacterBones">
            <summary>
            Get reference to array of character pack and its contents.
            </summary>
        </member>
        <member name="P:VRage.Game.Components.MyAnimationControllerComponent.InverseKinematics">
            <summary>
            Get the instance of inverse kinematics.
            </summary>
        </member>
        <member name="M:VRage.Game.Components.MyAnimationControllerComponent.TriggerAction(VRage.Utils.MyStringId,System.String[])">
            <summary>
            Trigger an action in the layers specified. If no layers are specified, it is triggered for all instead.
            If there is a transition having given (non-null) name, it is followed immediatelly.
            Conditions of transition are ignored.
            This is a shortcut to Controller.TriggerAction.
            </summary>
        </member>
        <member name="P:VRage.Game.Components.MyGameLogicComponent.ModContext">
            <summary>
            Returns the mod context this gamelogic belongs to. This can be passed to methods to read content from the mod's directory.
            </summary>
        </member>
        <member name="P:VRage.Game.Components.MyPositionComponent.LocalAABB">
            <summary>
            Sets the local aabb.
            </summary>
            <value>
            The local aabb.
            </value>
        </member>
        <member name="M:VRage.Game.Components.MyPositionComponent.UpdateChildren(System.Object,System.Boolean)">
            <summary>
            Updates the children of this entity.
            </summary>
            <param name="source"></param>
            <param name="forceUpdateAllChildren"></param>
        </member>
        <member name="M:VRage.Game.Components.MyPositionComponent.OnWorldPositionChanged(System.Object,System.Boolean,System.Boolean)">
            <summary>
            Called when [world position changed].
            </summary>
            <param name="source">The source object that caused this event.</param>
            <param name="updateChildren"></param>
            <param name="forceUpdateAllChildren"></param>
        </member>
        <member name="M:VRage.Game.SessionComponents.MySessionComponentAnimationSystem.RegisterEntityComponent(VRage.Game.Components.MyAnimationControllerComponent)">
            <summary>
            Register entity component.
            </summary>
        </member>
        <member name="M:VRage.Game.SessionComponents.MySessionComponentAnimationSystem.UnregisterEntityComponent(VRage.Game.Components.MyAnimationControllerComponent)">
            <summary>
            Unregister entity component.
            </summary>
        </member>
        <member name="M:VRage.Game.SessionComponents.MySessionComponentAnimationSystem.ReloadMwmTracks">
            <summary>
            Reload all mwm tracks while in-game. Mwms from cache are not used. 
            </summary>
        </member>
        <member name="T:VRage.Game.SessionComponents.MySessionComponentExtDebug">
            <summary>
            Communication between game and editor.
            </summary>
        </member>
        <member name="M:VRage.Game.SessionComponents.MySessionComponentExtDebug.StartServer">
            <summary>
            Start using this component as server (game side).
            </summary>
        </member>
        <member name="M:VRage.Game.SessionComponents.MySessionComponentExtDebug.StopServer">
            <summary>
            Stop the server on the game side. Called automatically.
            </summary>
        </member>
        <member name="M:VRage.Game.SessionComponents.MySessionComponentExtDebug.ServerListenerProc">
            <summary>
            Parallel thread - listener.
            </summary>
        </member>
        <member name="T:VRage.Game.Core.VRageCore">
            <summary>
            Class initializing the (minimal) engine, setting the render properties based on the data.
            </summary>
        </member>
        <member name="M:VRage.Game.Core.VRageCore.Init(System.String)">
            <summary>
            Initialize minimal engine.
            </summary>
            <param name="contentPath">Path to the game content.</param>
        </member>
        <member name="M:VRage.Game.Core.VRageCore.Dispose">
            <summary>
            Dispose the resources, unload engine.
            </summary>
        </member>
        <member name="M:VRage.Game.Debugging.MyExternalDebugStructures.ReadMessageFromPtr``1(VRage.Game.Debugging.MyExternalDebugStructures.CommonMsgHeader@,System.Byte[],``0@)">
            <summary>
            Convert from raw data to message.
            Message must be struct with sequential layout having first field "Header" of type "CommonMsg".
            </summary>
        </member>
        <member name="P:VRage.Game.Definitions.MyDlcDefinition.DisplayName">
            <summary>
            Name of the DLC, preferably a localized string
            </summary>
        </member>
        <member name="P:VRage.Game.Definitions.MyDlcDefinition.Description">
            <summary>
            Description of the DLC, preferably a localized string
            </summary>
        </member>
        <member name="P:VRage.Game.Definitions.MyDlcDefinition.Icon">
            <summary>
            Icon of the DLC, to be displayed in G-screen, blueprints, etc ...
            </summary>
        </member>
        <member name="P:VRage.Game.Definitions.MyDlcDefinition.Badge">
            <summary>
            Badge of the DLC, to be displayed in main menu
            </summary>
        </member>
        <member name="P:VRage.Game.Definitions.MyFontDefinition.IsValid">
            <summary>
            Checks the validity of inderlying data.
            </summary>
        </member>
        <member name="P:VRage.Game.Definitions.MyFontDefinition.CompatibilityPath">
            <summary>
            Old resource path used by old mods.
            </summary>
        </member>
        <member name="P:VRage.Game.Definitions.MyFontDefinition.ColorMask">
            <summary>
            Texture color multiplier.
            </summary>
        </member>
        <member name="P:VRage.Game.Definitions.MyFontDefinition.Default">
            <summary>
            True will make this definition load as DEBUG font and default fallback.
            </summary>
        </member>
        <member name="P:VRage.Game.Definitions.MyFontDefinition.Resources">
            <summary>
            
            </summary>
        </member>
        <member name="M:VRage.Game.Definitions.MyFontDefinition.UseLanguage(System.String)">
            <summary>
            Call to switch the Resources to different language variant.
            </summary>
            <param name="language">Language string identifier base on MyLanguagesEnum.</param>
        </member>
        <member name="P:VRage.Game.Definitions.SessionComponents.MyBankingSystemDefinition.CurrencyFullName">
            <summary>
            Currency full name.
            </summary>
        </member>
        <member name="P:VRage.Game.Definitions.SessionComponents.MyBankingSystemDefinition.CurrencyShortName">
            <summary>
            Currency short name.
            </summary>
        </member>
        <member name="P:VRage.Game.Definitions.SessionComponents.MyBankingSystemDefinition.StartingBalance">
            <summary>
            Starting balance when account is created.
            </summary>
        </member>
        <member name="P:VRage.Game.Definitions.SessionComponents.MyBankingSystemDefinition.AccountLogLen">
            <summary>
            Max account log entriee.
            </summary>
        </member>
        <member name="P:VRage.Game.Definitions.SessionComponents.MyBankingSystemDefinition.PhysicalItemId">
            <summary>
            Definition id of physical item representation of the currency
            </summary>
        </member>
        <member name="F:VRage.Game.Definitions.SessionComponents.MyClipboardDefinition.PastingSettings">
            <summary>
            Defines settings for pasting.
            </summary>
        </member>
        <member name="F:VRage.Game.Definitions.SessionComponents.MyCubeBuilderDefinition.BuildingSettings">
            <summary>
            Defines settings for building mode.
            </summary>
        </member>
        <member name="F:VRage.Game.MyDefinitionBase.DisplayNameEnum">
            <summary>
            Enum used for localization of display name. Null for player created definitions.
            </summary>
        </member>
        <member name="F:VRage.Game.MyDefinitionBase.DescriptionEnum">
            <summary>
            Enum used for localization of description. Null for player created definitions.
            </summary>
        </member>
        <member name="F:VRage.Game.MyDefinitionBase.DisplayNameString">
            <summary>
            String name used for user created definitions which do not have localization support.
            </summary>
        </member>
        <member name="F:VRage.Game.MyDefinitionBase.DescriptionString">
            <summary>
            String used for user created description which do not have localization support.
            </summary>
        </member>
        <member name="F:VRage.Game.MyDefinitionBase.DescriptionArgs">
            <summary>
            String used for shortcuts used in description
            </summary>
        </member>
        <member name="F:VRage.Game.MyDefinitionBase.Icons">
            <summary>
            Icons for the definition, they are used from top to bottom.
            </summary>
        </member>
        <member name="F:VRage.Game.MyDefinitionBase.Enabled">
            <summary>
            Definition can be disabled by mod, then it will be removed from definition manager
            </summary>
        </member>
        <member name="F:VRage.Game.MyDefinitionBase.Public">
            <summary>
            Indicates if definition should be offered in Cube builder
            </summary>
        </member>
        <member name="P:VRage.Game.MyDefinitionBase.DisplayNameText">
            <summary>
            Use this property when showing name in GUI instead of DisplayName. This takes into
            account more complex name construction.
            </summary>
        </member>
        <member name="P:VRage.Game.MyDefinitionBase.DescriptionText">
            <summary>
            Use this property when showing description in GUI, as it takes into account more
            complex description construction.
            </summary>
        </member>
        <member name="M:VRage.Game.MyDefinitionBase.Postprocess">
            <summary>
            Override this in case you want to do some postprocessing of the definition before the game starts.
            Prefer to use MyDefinitionPostprocessor instead.      
            <para>Postprocess is useful if you want to process the definition before the game begins,</para>
            <para>but you only want to do it when all the definitions are loaded and merged.</para>
            </summary>        
        </member>
        <member name="M:VRage.Game.MyDefinitionBase.CheckDefinitionDLCs(System.String[])">
            <summary>
            Checks if the definition has all required DLCs as it should have
            </summary>
            <param name="dlcNames">required DLCs</param>
        </member>
        <member name="T:VRage.Game.MyDefinitionId">
            <summary>
            Prefer getting definition ID using object builder used to create the item.
            If you have automatic rifle, in its Init method create new MyDefinitionId
            using TypeId and SubtypeName of object builder.
            Do not write specific values in code, as data comes from XML and if those
            change, code needs to change as well.
            </summary>
        </member>
        <member name="M:VRage.Game.MyDefinitionId.FromContent(VRage.ObjectBuilders.MyObjectBuilder_Base)">
            <summary>
            Creates a new definition ID from a given content.
            </summary>
            <param name="content"></param>
            <returns></returns>
        </member>
        <member name="M:VRage.Game.MyDefinitionId.Parse(System.String)">
            <summary>
            Attempts to create a definition ID from a definition string, which has the form (using ores as an example) "MyObjectBuilder_Ore/Iron".
            The first part must represent an existing type. If it does not, an exception will be thrown. The second (the subtype) is not enforced.
            See TryParse for a parsing method that does not throw an exception.
            </summary>
            <param name="id"></param>
            <returns></returns>
        </member>
        <member name="M:VRage.Game.MyDefinitionId.TryParse(System.String,VRage.Game.MyDefinitionId@)">
            <summary>
            Attempts to create a definition ID from a definition string, which has the form (using ores as an example) "MyObjectBuilder_Ore/Iron".
            The first part must represent an existing type, while the second (the subtype) is not enforced.
            </summary>
            <param name="id"></param>
            <param name="definitionId"></param>
            <returns></returns>
        </member>
        <member name="M:VRage.Game.MyDefinitionId.GetHashCodeLong">
            <summary>
            Safer hash code. It is unique in more situations than GetHashCode would be,
            but it may still require full check.
            </summary>
            <returns>64-bit hash code.</returns>
        </member>
        <member name="T:VRage.Game.MyDefinitionManagerSimple">
            <summary>
            Simple definition manager class that allows loading of definitions from files
            and support type overrides (e.g. for loading subset of EnvironmentDefinition)
            </summary>
        </member>
        <member name="M:VRage.Game.MyDefinitionManagerSimple.AddDefinitionOverride(System.Type,System.String)">
            <summary>
            
            </summary>
            <param name="overridingType"></param>
            <param name="typeOverride">The xst:type attribute overridden</param>
        </member>
        <member name="M:VRage.Game.MyDefinitionSet.AddDefinition(VRage.Game.MyDefinitionBase)">
            Add a new definition to the set.
            
            Crashes if existing.
        </member>
        <member name="M:VRage.Game.MyDefinitionSet.AddOrReplaceDefinition(VRage.Game.MyDefinitionBase)">
            Add or replace an existing definition.
        </member>
        <member name="M:VRage.Game.MyDefinitionSet.RemoveDefinition(VRage.Game.MyDefinitionId@)">
            Remove a definition if on the set.
        </member>
        <member name="M:VRage.Game.MyDefinitionSet.GetDefinitionsOfType``1">
            Get all definitions of a given type.
        </member>
        <member name="M:VRage.Game.MyDefinitionSet.GetDefinitionsOfTypeAndSubtypes``1">
            Get all definitions of a given type.
        </member>
        <member name="M:VRage.Game.MyDefinitionSet.OverrideBy(VRage.Game.MyDefinitionSet,System.Boolean)">
            Override the contents of this definition set with another.
        </member>
        <member name="T:VRage.Game.ModAPI.IMyCharacter">
            <summary>
            Describes character (mods interface)
            </summary>
        </member>
        <member name="E:VRage.Game.ModAPI.IMyCharacter.CharacterDied">
            <summary>
            Event triggered when character dies
            </summary>
        </member>
        <member name="P:VRage.Game.ModAPI.IMyCharacter.AimedPoint">
            <summary>
            Gets or, for non-player controlled characters, sets the aimed point direction.
            </summary>
            <remarks>For characters, which are not controlled by player, this will set the aimed point, otherwise the aimed point is determined from camera matrix</remarks>
        </member>
        <member name="P:VRage.Game.ModAPI.IMyCharacter.CharacterGeneralDamageModifier">
            <summary>
            Allows you to get or set the damage modifier of a character.
            </summary>
        </member>
        <member name="P:VRage.Game.ModAPI.IMyCharacter.Definition">
            <summary>
            The character definition. Cast to MyCharacterDefinition.
            </summary>
            <remarks>Until refactoring is complete, casting this to MyCharacterDefinition is needed.</remarks>
        </member>
        <member name="P:VRage.Game.ModAPI.IMyCharacter.EnvironmentOxygenLevel">
            <summary>
            Gets the amount of oxygen in the surrounding environment
            </summary>
        </member>
        <member name="P:VRage.Game.ModAPI.IMyCharacter.OxygenLevel">
            <summary>
            Gets the amount of oxygen at the character location from air pressure system (grids with airtightness)
            </summary>
        </member>
        <member name="P:VRage.Game.ModAPI.IMyCharacter.BaseMass">
            <summary>
            Gets the base mass of the character
            </summary>
        </member>
        <member name="P:VRage.Game.ModAPI.IMyCharacter.CurrentMass">
            <summary>
            Gets the entire mass of the character, including inventory
            </summary>
        </member>
        <member name="P:VRage.Game.ModAPI.IMyCharacter.SuitEnergyLevel">
            <summary>
            Returns the amount of energy the suit has, values will range between 0 and 1, where 0 is no charge and 1 is full charge.
            </summary>
        </member>
        <member name="M:VRage.Game.ModAPI.IMyCharacter.GetSuitGasFillLevel(VRage.Game.MyDefinitionId)">
            <summary>
            Returns the amount of gas left in the suit, values will range between 0 and 1, where 0 is no gas and 1 is full gas.
            </summary>
            <param name="gasDefinitionId">Definition Id of the gas. Common example: new MyDefinitionId(typeof(MyObjectBuilder_GasProperties), "Oxygen")</param>
            <returns></returns>
        </member>
        <member name="P:VRage.Game.ModAPI.IMyCharacter.IsDead">
            <summary>
            Returns true if this character is dead
            </summary>
        </member>
        <member name="P:VRage.Game.ModAPI.IMyCharacter.IsPlayer">
            <summary>
            Returns true if this character is a player character, otherwise false.
            </summary>
        </member>
        <member name="P:VRage.Game.ModAPI.IMyCharacter.IsBot">
            <summary>
            Returns true if this character is an AI character, otherwise false.
            </summary>
        </member>
        <member name="E:VRage.Game.ModAPI.IMyCharacter.MovementStateChanged">
            <summary>
            Called when the movement state changes
            </summary>
        </member>
        <member name="P:VRage.Game.ModAPI.IMyCharacter.CurrentMovementState">
            <summary>
            Gets the character's current movement state.
            </summary>
        </member>
        <member name="P:VRage.Game.ModAPI.IMyCharacter.PreviousMovementState">
            <summary>
            Gets the character's previous movement state.
            </summary>
        </member>
        <member name="M:VRage.Game.ModAPI.IMyCharacter.Kill(System.Object)">
            <summary>
            Kills the character
            </summary>
            <param name="killData"></param>
        </member>
        <member name="M:VRage.Game.ModAPI.IMyCharacter.TriggerCharacterAnimationEvent(System.String,System.Boolean)">
            <summary>
            Trigger animation event in the new animation system.
            If there is a transition leading from current animation state having same name as this event, 
            animation state machine will change state accordingly.
            If not, nothing happens.
            </summary>
            <param name="eventName">Event name.</param>
            <param name="sync">Synchronize over network</param>
        </member>
        <member name="P:VRage.Game.ModAPI.IMyCharacter.EquippedTool">
            <summary>
            Gets currently equipped tool (IMyHandheldGunObject)
            </summary>
        </member>
        <member name="M:VRage.Game.ModAPI.IMyCharacter.GetOutsideTemperature">
            <summary>
            Returns outside temperature around character. If character is in presurrized/oxygen environment,
            then the temperature is always friendly. 
            </summary>
            <returns>0 for extreme freeze, 0.5 for cozy, 1.0 for extreme hot</returns>
        </member>
        <member name="P:VRage.Game.ModAPI.IMyCharacter.UsingEntity">
            <summary>
            Gets currently used entity by character (cockpit, cryo etc.)
            </summary>
        </member>
        <member name="M:VRage.Game.ModAPI.IMyCharacter.SetCharacterSpeedDebuff(System.Single)">
            <summary>
            Sets character speed debuf
            </summary>
            <param name="debuffValue"></param>
        </member>
        <member name="P:VRage.Game.ModAPI.IMyCharacter.CanSprint">
            <summary>
            Gets/Sets if character can sprint
            </summary>
        </member>
        <member name="T:VRage.Game.ModAPI.IMyComponentStack">
            <summary>
            Describes component stack of the block
            </summary>
        </member>
        <member name="P:VRage.Game.ModAPI.IMyComponentStack.YieldLastComponent">
            <summary>
            Whether the yield last component is enabled or not.
            </summary>
        </member>
        <member name="P:VRage.Game.ModAPI.IMyComponentStack.IsFullIntegrity">
            <summary>
            Whether the component stack is at full integrity
            </summary>
        </member>
        <member name="P:VRage.Game.ModAPI.IMyComponentStack.IsFullyDismounted">
            <summary>
            Whether the component stack is fully dismounted
            </summary>
        </member>
        <member name="P:VRage.Game.ModAPI.IMyComponentStack.IsDestroyed">
            <summary>
            Whether the component stack is destroyed
            </summary>
        </member>
        <member name="P:VRage.Game.ModAPI.IMyComponentStack.Integrity">
            <summary>
            Gets the integrity of the component stack
            </summary>
        </member>
        <member name="P:VRage.Game.ModAPI.IMyComponentStack.IntegrityRatio">
            <summary>
            Gets the integrity ratio of the component stack
            </summary>
        </member>
        <member name="P:VRage.Game.ModAPI.IMyComponentStack.MaxIntegrity">
            <summary>
            Gets the max integrity of the component stack
            </summary>
        </member>
        <member name="P:VRage.Game.ModAPI.IMyComponentStack.BuildRatio">
            <summary>
            Gets the build ration of the component stack
            </summary>
        </member>
        <member name="P:VRage.Game.ModAPI.IMyComponentStack.BuildIntegrity">
            <summary>
            Gets the build integrity of the component stack
            </summary>
        </member>
        <member name="P:VRage.Game.ModAPI.IMyComponentStack.IsFunctional">
            <summary>
            Whether this component stack is in functional state
            </summary>
        </member>
        <member name="P:VRage.Game.ModAPI.IMyComponentStack.IsBuilt">
            <summary>
            Whether this component stack is built
            </summary>
        </member>
        <member name="P:VRage.Game.ModAPI.IMyComponentStack.GroupCount">
            <summary>
            Gets count of the components in the group (stack). Use with GetComponentStackInfo to get components in the stack.
            </summary>
        </member>
        <member name="E:VRage.Game.ModAPI.IMyComponentStack.IntegrityChanged">
            <summary>
            Triggers when integrity is changed
            </summary>
        </member>
        <member name="E:VRage.Game.ModAPI.IMyComponentStack.IsFunctionalChanged">
            <summary>
            Triggers when functional state has changed
            </summary>
        </member>
        <member name="M:VRage.Game.ModAPI.IMyComponentStack.GetComponentStackInfo(System.Int32)">
            <summary>
            
            </summary>
            <param name="index"></param>
            <returns></returns>
        </member>
        <member name="M:VRage.Game.ModAPI.IMyComponentStack.GetMissingInfo(System.Int32@,System.Int32@)">
            <summary>
            Gets index and amount of missing component
            </summary>
            <param name="index">index of the component</param>
            <param name="componentCount"></param>
        </member>
        <member name="M:VRage.Game.ModAPI.IMyComponentStack.GetAllMissingComponents(System.Collections.Generic.Dictionary{System.String,System.Int32})">
            <summary>
            Gets missing components
            </summary>
            <param name="missingComponents">dictionary of missing components (sub type name, count), can't be null</param>        
        </member>
        <member name="T:VRage.Game.ModAPI.IMyConfig">
            <summary>
            This interface provides access to game settings
            </summary>
        </member>
        <member name="P:VRage.Game.ModAPI.IMyConfig.AmbientOcclusionEnabled">
            <summary>
            Gets if ambient occlusion is enabled
            </summary>
        </member>
        <member name="P:VRage.Game.ModAPI.IMyConfig.AnisotropicFiltering">
            <summary>
            Gets anisotropic filtering
            </summary>
        </member>
        <member name="P:VRage.Game.ModAPI.IMyConfig.AntialiasingMode">
            <summary>
            Gets anti aliasing mode
            </summary>
        </member>
        <member name="P:VRage.Game.ModAPI.IMyConfig.CaptureMouse">
            <summary>
            Gets whether mouse should be captured by game screenshot
            </summary>
        </member>
        <member name="P:VRage.Game.ModAPI.IMyConfig.ControlsHints">
            <summary>
            Gets whether games should show controls hints
            </summary>
        </member>
        <member name="P:VRage.Game.ModAPI.IMyConfig.CubeBuilderBuildingMode">
            <summary>
            SingleBlock - 0
            Line - 1
            Plane - 2
            </summary>
        </member>
        <member name="P:VRage.Game.ModAPI.IMyConfig.CubeBuilderUseSymmetry">
            <summary>
            Gets whether cube builder should use symmetry
            </summary>
        </member>
        <member name="P:VRage.Game.ModAPI.IMyConfig.EnableDamageEffects">
            <summary>
            Gets whether damage effects are enabled 
            </summary>
        </member>
        <member name="P:VRage.Game.ModAPI.IMyConfig.EnableDynamicMusic">
            <summary>
            Gets dynamic music is enabled 
            </summary>
        </member>
        <member name="P:VRage.Game.ModAPI.IMyConfig.EnableMuteWhenNotInFocus">
            <summary>
            Gets whether should mute sound when game window is not in focus
            </summary>
        </member>
        <member name="P:VRage.Game.ModAPI.IMyConfig.EnablePerformanceWarnings">
            <summary>
            Gets whether should show performance warning
            </summary>
        </member>
        <member name="P:VRage.Game.ModAPI.IMyConfig.EnableReverb">
            <summary>
            Gets whether reverb sound feature is enabled
            </summary>
        </member>
        <member name="P:VRage.Game.ModAPI.IMyConfig.EnableVoiceChat">
            <summary>
            Gets whether voice chat is enabled
            </summary>
        </member>
        <member name="P:VRage.Game.ModAPI.IMyConfig.FieldOfView">
            <summary>
            Gets game field of view setting
            </summary>
        </member>
        <member name="P:VRage.Game.ModAPI.IMyConfig.FirstTimeRun">
            <summary>
            Gets if game is run at first time
            </summary>
        </member>
        <member name="P:VRage.Game.ModAPI.IMyConfig.FlaresIntensity">
            <summary>
            Gets flares intensity graphics feature
            </summary>
        </member>
        <member name="P:VRage.Game.ModAPI.IMyConfig.GameVolume">
            <summary>
            Gets game master volume
            </summary>
        </member>
        <member name="P:VRage.Game.ModAPI.IMyConfig.GraphicsRenderer">
            <summary>
            Gets graphics renderer setting
            </summary>
        </member>
        <member name="P:VRage.Game.ModAPI.IMyConfig.GrassDensityFactor">
            <summary>
            Gets grass density factor
            </summary>
        </member>
        <member name="P:VRage.Game.ModAPI.IMyConfig.GrassDrawDistance">
            <summary>
            Gets grass draw distance
            </summary>
        </member>
        <member name="P:VRage.Game.ModAPI.IMyConfig.HUDBkOpacity">
            <summary>
            Gets HUD Background Opacity
            </summary>
        </member>
        <member name="P:VRage.Game.ModAPI.IMyConfig.HudWarnings">
            <summary>
            Gets whether game should show warnings
            </summary>
        </member>
        <member name="P:VRage.Game.ModAPI.IMyConfig.Language">
            <summary>
            Gets game current language
            </summary>
        </member>
        <member name="P:VRage.Game.ModAPI.IMyConfig.MemoryLimits">
            <summary>
            Always true
            </summary>
        </member>
        <member name="P:VRage.Game.ModAPI.IMyConfig.MinimalHud">
            <summary>
            Gets if hud currently hidden
            </summary>
        </member>
        <member name="P:VRage.Game.ModAPI.IMyConfig.HudState">
            <summary>
            Gets hud state:
            0 - hidden
            1 - visible with descriptions
            2 - visible without descriptions
            </summary>
        </member>
        <member name="P:VRage.Game.ModAPI.IMyConfig.ModelQuality">
            <summary>
            Gets model render quality
            </summary>
        </member>
        <member name="P:VRage.Game.ModAPI.IMyConfig.MusicVolume">
            <summary>
            Gets music volume
            </summary>
        </member>
        <member name="P:VRage.Game.ModAPI.IMyConfig.MutedPlayers">
            <summary>
            Gets set of muted players
            </summary>
        </member>
        <member name="P:VRage.Game.ModAPI.IMyConfig.RefreshRate">
            <summary>
            Gets game refresh rate multiplied by 1000
            </summary>
        </member>
        <member name="P:VRage.Game.ModAPI.IMyConfig.RotationHints">
            <summary>
            Gets if gabe should show rotation hints
            </summary>
        </member>
        <member name="P:VRage.Game.ModAPI.IMyConfig.ScreenHeight">
            <summary>
            Gets screen height 
            </summary>
        </member>
        <member name="P:VRage.Game.ModAPI.IMyConfig.ScreenshotSizeMultiplier">
            <summary>
            Gets screenshot size multiplier
            </summary>
        </member>
        <member name="P:VRage.Game.ModAPI.IMyConfig.ScreenWidth">
            <summary>
            Gets grass draw distance
            </summary>
        </member>
        <member name="P:VRage.Game.ModAPI.IMyConfig.ShaderQuality">
            <summary>
            Gets shader quality setting
            </summary>
        </member>
        <member name="P:VRage.Game.ModAPI.IMyConfig.ShadowQuality">
            <summary>
            Gets shadow quality setting
            </summary>
        </member>
        <member name="P:VRage.Game.ModAPI.IMyConfig.ShipSoundsAreBasedOnSpeed">
            <summary>
            Gets if ship sound are base on ship speed
            </summary>
        </member>
        <member name="P:VRage.Game.ModAPI.IMyConfig.ShowCrosshair">
            <summary>
            Gets whether game shows crosshair
            </summary>
        </member>
        <member name="P:VRage.Game.ModAPI.IMyConfig.ShowCrosshair2">
            <summary>
            Gets game crosshair settings
            VisibleWithHud = 0,
            AlwaysVisible = 1,
            AlwaysHidden = 2
            </summary>
        </member>
        <member name="P:VRage.Game.ModAPI.IMyConfig.EnableTrading">
            <summary>
            Gets grass draw distance
            </summary>
        </member>
        <member name="P:VRage.Game.ModAPI.IMyConfig.Skin">
            <summary>
            Not used. 
            </summary>
        </member>
        <member name="P:VRage.Game.ModAPI.IMyConfig.TextureQuality">
            <summary>
            Gets game texture quality
            </summary>
        </member>
        <member name="P:VRage.Game.ModAPI.IMyConfig.VoxelTextureQuality">
            <summary>
            Gets game voxel texture quality
            </summary>
        </member>
        <member name="P:VRage.Game.ModAPI.IMyConfig.UIBkOpacity">
            <summary>
            Gets game UI background opacity
            </summary>
        </member>
        <member name="P:VRage.Game.ModAPI.IMyConfig.UIOpacity">
            <summary>
            Gets game UI opacity
            </summary>
        </member>
        <member name="P:VRage.Game.ModAPI.IMyConfig.VegetationDrawDistance">
            <summary>
            Gets tree draw distance
            </summary>
        </member>
        <member name="P:VRage.Game.ModAPI.IMyConfig.VerticalSync">
            <summary>
            Gets game vertical sync
            </summary>
        </member>
        <member name="P:VRage.Game.ModAPI.IMyConfig.VideoAdapter">
            <summary>
            Gets current used video adapter index. ESC->Display->VideoAdapter
            </summary>
        </member>
        <member name="P:VRage.Game.ModAPI.IMyConfig.VoiceChatVolume">
            <summary>
            Gets game voice chat volume
            </summary>
        </member>
        <member name="P:VRage.Game.ModAPI.IMyConfig.VoxelQuality">
            <summary>
            Gets voxel rendering quality
            </summary>
        </member>
        <member name="P:VRage.Game.ModAPI.IMyConfig.WindowMode">
            <summary>
            Gets game window mode
            </summary>
        </member>
        <member name="P:VRage.Game.ModAPI.IMyConfig.LightsQuality">
            <summary>
            Gets game lights quality
            </summary>
        </member>
        <member name="T:VRage.Game.ModAPI.IMyConfigDedicated">
            <summary>
            Describes dedicated server configuration (mods interface)
            </summary>
        </member>
        <member name="P:VRage.Game.ModAPI.IMyConfigDedicated.Administrators">
            <summary>
            Gets or sets administrators
            It may contain ids in 2 different formats:
            First - steamId.ToString()
            Second - starts with `STEAM_0:`
            </summary>
        </member>
        <member name="P:VRage.Game.ModAPI.IMyConfigDedicated.AsteroidAmount">
            <summary>
            Not used
            </summary>
        </member>
        <member name="P:VRage.Game.ModAPI.IMyConfigDedicated.Banned">
            <summary>
            Gets or sets Banned players. SteamId and Xbox live ids
            </summary>
        </member>
        <member name="P:VRage.Game.ModAPI.IMyConfigDedicated.Reserved">
            <summary>
            Gets or sets reserved players (player can join server even if it is full). SteamId and Xbox live ids
            </summary>
        </member>
        <member name="M:VRage.Game.ModAPI.IMyConfigDedicated.GetFilePath">
            <summary>
            Gets where settings file is located
            </summary>
            <returns>File path</returns>
        </member>
        <member name="P:VRage.Game.ModAPI.IMyConfigDedicated.GroupID">
            <summary>
            Steam group id, that blocking access to player not from this group. 
            </summary>
            <remarks>You need save and restart server to apply changes</remarks>
        </member>
        <member name="P:VRage.Game.ModAPI.IMyConfigDedicated.IgnoreLastSession">
            <summary>
            Setting that is used server start. When it is true, it should not load previous server launch world  
            </summary>
            <remarks>You need save and restart server to apply changes</remarks>
        </member>
        <member name="P:VRage.Game.ModAPI.IMyConfigDedicated.IP">
            <summary>
            Gets or sets server IP
            </summary>
            <remarks>You need save and restart server to apply changes</remarks>
        </member>
        <member name="M:VRage.Game.ModAPI.IMyConfigDedicated.Load(System.String)">
            <summary>
            Load settings from file
            </summary>
        </member>
        <member name="P:VRage.Game.ModAPI.IMyConfigDedicated.LoadWorld">
            <summary>
            Gets current world load path or sets next server start load path
            </summary>
        </member>
        <member name="P:VRage.Game.ModAPI.IMyConfigDedicated.VerboseNetworkLogging">
            <summary>
            Not used
            </summary>
        </member>
        <member name="P:VRage.Game.ModAPI.IMyConfigDedicated.PauseGameWhenEmpty">
            <summary>
            Pause game when zero players on servers
            </summary>
        </member>
        <member name="P:VRage.Game.ModAPI.IMyConfigDedicated.MessageOfTheDay">
            <summary>
            Shows Gui Popup for players 
            </summary>
        </member>
        <member name="P:VRage.Game.ModAPI.IMyConfigDedicated.MessageOfTheDayUrl">
            <summary>
            Shows Gui Popup for players but in web browser
            </summary>
        </member>
        <member name="P:VRage.Game.ModAPI.IMyConfigDedicated.AutoRestartEnabled">
            <summary>
            Gets or sets whether auto restart is enabled
            </summary>
        </member>
        <member name="P:VRage.Game.ModAPI.IMyConfigDedicated.AutoRestatTimeInMin">
            <summary>
            Gets or sets auto restart time in minutes
            </summary>
        </member>
        <member name="P:VRage.Game.ModAPI.IMyConfigDedicated.AutoUpdateEnabled">
            <summary>
            Gets or sets if game auto update enabled
            </summary>
        </member>
        <member name="P:VRage.Game.ModAPI.IMyConfigDedicated.AutoUpdateCheckIntervalInMin">
            <summary>
            Gets or sets how often game checks if new version is available
            </summary>
        </member>
        <member name="P:VRage.Game.ModAPI.IMyConfigDedicated.AutoUpdateRestartDelayInMin">
            <summary>
            Gets or sets time before restart after new update found
            </summary>
        </member>
        <member name="P:VRage.Game.ModAPI.IMyConfigDedicated.RestartSave">
            <summary>
            Gets or sets if game should save on server stop 
            </summary>
        </member>
        <member name="P:VRage.Game.ModAPI.IMyConfigDedicated.AutoUpdateSteamBranch">
            <summary>
            Gets or sets name of steam version branch 
            </summary>
        </member>
        <member name="P:VRage.Game.ModAPI.IMyConfigDedicated.AutoUpdateBranchPassword">
            <summary>
            Gets or sets password of steam version branch 
            </summary>
        </member>
        <member name="M:VRage.Game.ModAPI.IMyConfigDedicated.Save(System.String)">
            <summary>
            Saves game.
            </summary>
            <param name="path">When not null will save to provided folder</param>
        </member>
        <member name="P:VRage.Game.ModAPI.IMyConfigDedicated.ServerName">
            <summary>
            Gets or sets server name
            </summary>
        </member>
        <member name="P:VRage.Game.ModAPI.IMyConfigDedicated.ServerPort">
            <summary>
            Gets or sets server connection port 27016 - default
            </summary>
        </member>
        <member name="P:VRage.Game.ModAPI.IMyConfigDedicated.SessionSettings">
            <summary>
            Gets or sets (but that doesn't change anything) session settings
            </summary>
        </member>
        <member name="P:VRage.Game.ModAPI.IMyConfigDedicated.SteamPort">
            <summary>
            Gets or sets steam port
            </summary>
        </member>
        <member name="P:VRage.Game.ModAPI.IMyConfigDedicated.WorldName">
            <summary>
            Gets or sets world name.
            Doesn't change world name in client find server gui when setted. 
            </summary>
        </member>
        <member name="P:VRage.Game.ModAPI.IMyConfigDedicated.PremadeCheckpointPath">
            <summary>
            When <see cref="P:VRage.Game.ModAPI.IMyConfigDedicated.IgnoreLastSession"/> is true and <see cref="P:VRage.Game.ModAPI.IMyConfigDedicated.LoadWorld"/> is null or empty, or failed - game would be start new world from <see cref="P:VRage.Game.ModAPI.IMyConfigDedicated.PremadeCheckpointPath"/> 
            </summary>
        </member>
        <member name="P:VRage.Game.ModAPI.IMyConfigDedicated.ServerDescription">
            <summary>
            Gets or sets server description
            </summary>
        </member>
        <member name="P:VRage.Game.ModAPI.IMyConfigDedicated.ServerPasswordHash">
            <summary>
            Gets or sets server password hash 
            </summary>
            <remarks>You need save and restart server to apply changes</remarks>
        </member>
        <member name="P:VRage.Game.ModAPI.IMyConfigDedicated.ServerPasswordSalt">
            <summary>
            Gets or sets server password hash
            </summary>
            <remarks>You need save and restart server to apply changes</remarks>
        </member>
        <member name="M:VRage.Game.ModAPI.IMyConfigDedicated.SetPassword(System.String)">
            <summary>
            Used to set new password for server
            </summary>
            <remarks>You need save and restart server to apply changes</remarks>
        </member>
        <member name="P:VRage.Game.ModAPI.IMyConfigDedicated.RemoteApiEnabled">
            <summary>
            Gets or sets if remote api enabled
            </summary>
            <remarks>You need save and restart server to apply changes</remarks>
        </member>
        <member name="P:VRage.Game.ModAPI.IMyConfigDedicated.RemoteSecurityKey">
            <summary>
            Gets or sets remote api password
            </summary>
            <remarks>You need save and restart server to apply changes</remarks>
        </member>
        <member name="M:VRage.Game.ModAPI.IMyConfigDedicated.GenerateRemoteSecurityKey">
            <summary>
            Gets remote api password
            </summary>
            <remarks>You need save and restart server to apply changes</remarks>
        </member>
        <member name="P:VRage.Game.ModAPI.IMyConfigDedicated.RemoteApiPort">
            <summary>
            Gets or sets remote api port
            </summary>
            <remarks>You need save and restart server to apply changes</remarks>
        </member>
        <member name="P:VRage.Game.ModAPI.IMyConfigDedicated.RemoteApiIP">
            <summary>
            Gets or sets remote API IP
            </summary>
            <remarks>You need save and restart server to apply changes</remarks>
        </member>
        <member name="P:VRage.Game.ModAPI.IMyConfigDedicated.Plugins">
            <summary>
            Gets or sets server plugins. List contains file paths to dlls 
            </summary>
            <remarks>You need save and restart server to apply changes</remarks>
        </member>
        <member name="P:VRage.Game.ModAPI.IMyConfigDedicated.WatcherInterval">
            <summary>
            Not used
            </summary>
        </member>
        <member name="P:VRage.Game.ModAPI.IMyConfigDedicated.WatcherSimulationSpeedMinimum">
            <summary>
            Not used
            </summary>
        </member>
        <member name="P:VRage.Game.ModAPI.IMyConfigDedicated.ManualActionDelay">
            <summary>
            Not used
            </summary>
        </member>
        <member name="P:VRage.Game.ModAPI.IMyConfigDedicated.ManualActionChatMessage">
            <summary>
            Not used
            </summary>
        </member>
        <member name="P:VRage.Game.ModAPI.IMyConfigDedicated.AutodetectDependencies">
            <summary>
            Gets or sets if game should automatically add dependency mods in mods list 
            </summary>
            <remarks>You need save and restart server to apply changes</remarks>
        </member>
        <member name="P:VRage.Game.ModAPI.IMyConfigDedicated.SaveChatToLog">
            <summary>
            Gets or sets if game should automatically add dependency mods in mods list 
            </summary>
        </member>
        <member name="P:VRage.Game.ModAPI.IMyConfigDedicated.NetworkType">
            <summary>
            Not used
            </summary>
        </member>
        <member name="P:VRage.Game.ModAPI.IMyConfigDedicated.NetworkParameters">
            <summary>
            Not used
            </summary>
        </member>
        <member name="P:VRage.Game.ModAPI.IMyConfigDedicated.ConsoleCompatibility">
            <summary>
            Not used
            </summary>
        </member>
        <member name="P:VRage.Game.ModAPI.IMyConfigDedicated.ChatAntiSpamEnabled">
            <summary>
            Gets or sets whether chat anti spam is enabled
            </summary>
        </member>
        <member name="P:VRage.Game.ModAPI.IMyConfigDedicated.SameMessageTimeout">
            <summary>
            Gets or sets the timeout for the same message, it cannot be sent again sooner than this (seconds)
            </summary>
        </member>
        <member name="P:VRage.Game.ModAPI.IMyConfigDedicated.SpamMessagesTime">
            <summary>
            Gets or sets the time threshold for spam. If elapsed time between messages is less they are considered spam (seconds)
            </summary>
        </member>
        <member name="P:VRage.Game.ModAPI.IMyConfigDedicated.SpamMessagesTimeout">
            <summary>
            If player is considered a spammer based on SpamMessagesTime they cannot send any messages for the duration of this timeout (seconds)
            </summary>
        </member>
        <member name="P:VRage.Game.ModAPI.IMyConfigDedicated.DedicatedId">
            <summary>
            Id of a dedicated server
            </summary>
        </member>
        <member name="T:VRage.Game.ModAPI.IMyContract">
            <summary>
            Describes contracts that player can take in contract block (mods interface)
            </summary>
        </member>
        <member name="P:VRage.Game.ModAPI.IMyContract.StartBlockId">
            <summary>
            Gets id of block, that created contract 
            </summary>
        </member>
        <member name="P:VRage.Game.ModAPI.IMyContract.MoneyReward">
            <summary>
            Gets reward for completion of this contract
            </summary>
        </member>
        <member name="P:VRage.Game.ModAPI.IMyContract.Collateral">
            <summary>
            Gets money that player would loose if he won't complete contract
            </summary>
        </member>
        <member name="P:VRage.Game.ModAPI.IMyContract.Duration">
            <summary>
            Gets duration of contract in minutes
            </summary>
        </member>
        <member name="P:VRage.Game.ModAPI.IMyContract.OnContractAcquired">
            <summary>
            Gets or sets function that is triggered when contract is acquired by player. IdentityId is passed as an argument 
            </summary>
        </member>
        <member name="P:VRage.Game.ModAPI.IMyContract.OnContractSucceeded">
            <summary>
            Gets or sets function that is triggered when contract is successfully completed 
            </summary>
        </member>
        <member name="P:VRage.Game.ModAPI.IMyContract.OnContractFailed">
            <summary>
            Gets or sets function that is triggered when contract is failed
            </summary>
        </member>
        <member name="T:VRage.Game.ModAPI.IMyContractAcquisition">
            <summary>
            Describes acquisition contract that player can take in contract block (mods interface)
            </summary>
        </member>
        <member name="P:VRage.Game.ModAPI.IMyContractAcquisition.EndBlockId">
            <summary>
            Gets id of block, that should receive goods
            </summary>
        </member>
        <member name="P:VRage.Game.ModAPI.IMyContractAcquisition.ItemTypeId">
            <summary>
            Gets id of item that should be delivered
            </summary>
        </member>
        <member name="P:VRage.Game.ModAPI.IMyContractAcquisition.ItemAmount">
            <summary>
            Gets amount of items that should be delivered
            </summary>
        </member>
        <member name="T:VRage.Game.ModAPI.IMyContractBounty">
            <summary>
            Describes bounty contract that player can take in contract block (mods interface)
            Player should kill other player
            </summary>
        </member>
        <member name="P:VRage.Game.ModAPI.IMyContractBounty.TargetIdentityId">
            <summary>
            Gets IdentityId of target, that should be killed
            </summary>
        </member>
        <member name="T:VRage.Game.ModAPI.IMyContractCustom">
            <summary>
            Describes custom contract (mods interface)
            </summary>
        </member>
        <member name="P:VRage.Game.ModAPI.IMyContractCustom.DefinitionId">
            <summary>
            Definition id of contract.
            </summary>
        </member>
        <member name="P:VRage.Game.ModAPI.IMyContractCustom.EndBlockId">
            <summary>
            <see cref="P:VRage.ModAPI.IMyEntity.EntityId"/> of block that should finish contract
            </summary>
        </member>
        <member name="P:VRage.Game.ModAPI.IMyContractCustom.Name">
            <summary>
            Name of contract
            </summary>
        </member>
        <member name="P:VRage.Game.ModAPI.IMyContractCustom.Description">
            <summary>
            Description of contract
            </summary>
        </member>
        <member name="P:VRage.Game.ModAPI.IMyContractCustom.ReputationReward">
            <summary>
            Amount of reputation gained on contract success
            </summary>
        </member>
        <member name="P:VRage.Game.ModAPI.IMyContractCustom.FailReputationPrice">
            <summary>
            Amount of reputation you lose on contract failure 
            </summary>
        </member>
        <member name="T:VRage.Game.ModAPI.IMyContractEscort">
            <summary>
            Describes bounty contract that player can take in contract block (mods interface)
            Player should protect grid
            </summary>
        </member>
        <member name="T:VRage.Game.ModAPI.IMyContractRepair">
            <summary>
            Describes repair contract that player can take in contract block (mods interface)
            Player have to completely repair grid for getting reward
            </summary>
        </member>
        <member name="P:VRage.Game.ModAPI.IMyContractRepair.GridId">
            <summary>
            Gets grid id, that should be repaired
            </summary>
        </member>
        <member name="T:VRage.Game.ModAPI.IMyContractSearch">
            <summary>
            Describes search contract that player can take in contract block (mods interface)
            Player have to completely repair grid for getting reward
            </summary>
        </member>
        <member name="P:VRage.Game.ModAPI.IMyContractSearch.TargetGridId">
            <summary>
            Gets grid that should be found
            </summary>
        </member>
        <member name="P:VRage.Game.ModAPI.IMyContractSearch.SearchRadius">
            <summary>
            Gets radius in which would be target grid 
            </summary>
        </member>
        <member name="T:VRage.Game.ModAPI.MyAddContractResultWrapper">
            <summary>
            Describes information about accepting contract result (mods struct)
            </summary>
        </member>
        <member name="T:VRage.Game.ModAPI.MyActivationCustomResults">
            <summary>
            Describes contract activation states (mods enum)
            </summary>
        </member>
        <member name="T:VRage.Game.ModAPI.MyCustomContractStateEnum">
            <summary>
            Describes contract state (mods enum)
            </summary>
        </member>
        <member name="T:VRage.Game.ModAPI.MyContractConditionDelegate">
            <summary>
            Delegate used for contract condition finished.
            </summary>
            <param name="conditionId">Condition id.</param>
            <param name="contractId">Contract id associated with the condition.</param>
        </member>
        <member name="T:VRage.Game.ModAPI.MyContractActivateDelegate">
            <summary>
            Delegate used for contract activation.
            </summary>
            <param name="contractId">Activated contract id.</param>
            <param name="identityId">Identity id associated with activated contract.</param>
        </member>
        <member name="T:VRage.Game.ModAPI.MyContractFailedDelegate">
            <summary>
            Delegate used for event of contract failure.
            </summary>
            <param name="contractId">Id of contract that failed.</param>
            <param name="identityId">Identity id associated with the contract.</param>
            <param name="isAbandon">True if contract was abandond. Otherwise false.</param>
        </member>
        <member name="T:VRage.Game.ModAPI.MyContractFinishedDelegate">
            <summary>
            Delegate used for event triggered when contract is finished.
            </summary>
            <param name="contractId">Contract id.</param>
            <param name="identityId">Identity id associated with the contract.</param>
            <param name="rewardeeCount">Amount of rewardees.</param>
        </member>
        <member name="T:VRage.Game.ModAPI.MyContractChangeDelegate">
            <summary>
            Delegate used for various events related with contract state change.
            </summary>
            <param name="contractId">Id of the contract.</param>
        </member>
        <member name="T:VRage.Game.ModAPI.MyContractUpdateDelegate">
            <summary>
            Delegate used for custom update event.
            </summary>
            <param name="contractId">Contract id.</param>
            <param name="newState">New state of the contract.</param>
            <param name="currentTime">Current time.</param>
        </member>
        <member name="T:VRage.Game.ModAPI.IMyContractSystem">
            <summary>
            Describes contract system (mods interface)
            </summary>
        </member>
        <member name="P:VRage.Game.ModAPI.IMyContractSystem.CustomFinishCondition">
            <summary>
            The operation of finishing Condition itself
            Returns whether it succeeded or not
            </summary>                       
        </member>
        <member name="P:VRage.Game.ModAPI.IMyContractSystem.CustomCanActivateContract">
            <summary>
            Gets or sets function that is triggered when player trying to take contract
            First argument - ContractId, Second - IdentityId
            </summary>
        </member>
        <member name="P:VRage.Game.ModAPI.IMyContractSystem.CustomNeedsUpdate">
            <summary>
            Gets or sets function that is triggered each 100 frames per each contract.
            </summary>
        </member>
        <member name="E:VRage.Game.ModAPI.IMyContractSystem.CustomConditionFinished">
            <summary>
            Called after Condition has been successfully finished.
            </summary>
        </member>
        <member name="E:VRage.Game.ModAPI.IMyContractSystem.CustomActivateContract">
            <summary>
            Called when contract is activated.
            </summary>
        </member>
        <member name="E:VRage.Game.ModAPI.IMyContractSystem.CustomFailFor">
            <summary>
            Called when contract has failed. Has additional information associated with the contract.
            </summary>
        </member>
        <member name="E:VRage.Game.ModAPI.IMyContractSystem.CustomFinishFor">
            <summary>
            Called when contract was finished. Has additional information associated with the contract.
            </summary>
        </member>
        <member name="E:VRage.Game.ModAPI.IMyContractSystem.CustomFinish">
            <summary>
            Called when contract was finished.
            </summary>
        </member>
        <member name="E:VRage.Game.ModAPI.IMyContractSystem.CustomFail">
            <summary>
            Called when contract failed.
            </summary>
        </member>
        <member name="E:VRage.Game.ModAPI.IMyContractSystem.CustomCleanUp">
            <summary>
            Called when contract ended due to any reason. Use to clean up/remove anything.
            </summary>
        </member>
        <member name="E:VRage.Game.ModAPI.IMyContractSystem.CustomTimeRanOut">
            <summary>
            Called immediately just before contract failed.
            </summary>
        </member>
        <member name="E:VRage.Game.ModAPI.IMyContractSystem.CustomUpdate">
            <summary>
            Called every frame if marked for it by CustomNeedsUpdate.
            </summary>
        </member>
        <member name="M:VRage.Game.ModAPI.IMyContractSystem.AddContract(VRage.Game.ModAPI.IMyContract)">
            <summary>
            Adds the contract
            </summary>
            <param name="contract">contract id</param>
            <returns>information about new contract</returns>
        </member>
        <member name="M:VRage.Game.ModAPI.IMyContractSystem.RemoveContract(System.Int64)">
            <summary>
            Removes the contract
            </summary>
            <param name="contractId">contract id</param>
            <returns>True if contract was removed</returns>
        </member>
        <member name="M:VRage.Game.ModAPI.IMyContractSystem.IsContractActive(System.Int64)">
            <summary>
            Checks if specified contract is in active state
            </summary>
            <param name="contractId">contract id</param>
            <returns>True if contract is active</returns>
        </member>
        <member name="M:VRage.Game.ModAPI.IMyContractSystem.GetContractState(System.Int64)">
            <summary>
            Gets Contract State
            </summary>
            <param name="contractId">contract id</param>
            <returns>state of the contract</returns>
        </member>
        <member name="M:VRage.Game.ModAPI.IMyContractSystem.TryFinishCustomContract(System.Int64)">
            <summary>
            Tries to set the contract to finish state
            </summary>
            <param name="contractId">contract id</param>
            <returns>True if contract was finished</returns>
        </member>
        <member name="M:VRage.Game.ModAPI.IMyContractSystem.TryFailCustomContract(System.Int64)">
            <summary>
            Tries to set the contract to fail state
            </summary>
            <param name="contractId">contract id</param>
            <returns>True if contract was failed</returns>
        </member>
        <member name="M:VRage.Game.ModAPI.IMyContractSystem.TryAbandonCustomContract(System.Int64,System.Int64)">
            <summary>
            Tries to abandon the contract
            </summary>
            <param name="contractId">contract id</param>
            <param name="playerId">player id who has the contract</param>
            <returns>True if contract was abandoned</returns>
        </member>
        <member name="M:VRage.Game.ModAPI.IMyContractSystem.GetContractDefinitionId(System.Int64)">
            <summary>
            Gets Contracts Definition Id
            </summary>
            <param name="contractId">contract id</param>
            <returns>Definition Id of the contract</returns>
        </member>
        <member name="T:VRage.Game.ModAPI.IMyControllerInfo">
            <summary>
            Describes interface that provides information about current control state for controllable entities such as turret, cockpit, character ...
            </summary>
            <see cref="T:VRage.Game.ModAPI.Interfaces.IMyControllableEntity"/>
            <see cref="T:VRage.Game.ModAPI.IMyEntityController"/>
        </member>
        <member name="P:VRage.Game.ModAPI.IMyControllerInfo.Controller">
            <summary>
            Gets the controller for the entity
            </summary>
        </member>
        <member name="P:VRage.Game.ModAPI.IMyControllerInfo.ControllingIdentityId">
            <summary>
            Gets the controlling entity id (eg. IMyPlayer.IdentityId)
            </summary>
        </member>
        <member name="E:VRage.Game.ModAPI.IMyControllerInfo.ControlAcquired">
            <summary>
            Called when the entity gains a controller
            </summary>
        </member>
        <member name="E:VRage.Game.ModAPI.IMyControllerInfo.ControlReleased">
            <summary>
            Called when the entity loses a controller
            </summary>
        </member>
        <member name="M:VRage.Game.ModAPI.IMyControllerInfo.IsLocallyControlled">
            <summary>
            Returns true if the local player is controlling the entity
            </summary>
            <returns></returns>
        </member>
        <member name="M:VRage.Game.ModAPI.IMyControllerInfo.IsLocallyHumanControlled">
            <summary>
            Returns true if the local human player is controlling the entity
            </summary>
            <returns></returns>
        </member>
        <member name="M:VRage.Game.ModAPI.IMyControllerInfo.IsRemotelyControlled">
            <summary>
            Returns true if the entity is remotely controlled
            </summary>
            <returns></returns>
        </member>
        <member name="T:VRage.Game.ModAPI.IMyCubeBlock">
            <summary>
            Describes base block interface (mod interface)
            Also known as `fatblock`
            </summary>
            <see cref="T:VRage.Game.ModAPI.IMySlimBlock"/>
        </member>
        <member name="E:VRage.Game.ModAPI.IMyCubeBlock.IsWorkingChanged">
            <summary>
            Called when "WorkingState" is changed. 
            </summary>
        </member>
        <member name="M:VRage.Game.ModAPI.IMyCubeBlock.CalcLocalMatrix(VRageMath.Matrix@,System.String@)">
            <summary>
            Calculates local matrix, and currentModel
            </summary>
            <param name="localMatrix">Returns local matrix</param>
            <param name="currModel">Returns currently used model</param>
        </member>
        <member name="M:VRage.Game.ModAPI.IMyCubeBlock.CalculateCurrentModel(VRageMath.Matrix@)">
            <summary>
            Calculates model currently used by block depending on its build progress and other factors
            </summary>
            <param name="orientation">Model orientation</param>
            <returns>Model path</returns>
        </member>
        <member name="P:VRage.Game.ModAPI.IMyCubeBlock.CubeGrid">
            <summary>
            Grid in which the block is placed
            </summary>
        </member>
        <member name="M:VRage.Game.ModAPI.IMyCubeBlock.GetObjectBuilderCubeBlock(System.Boolean)">
            <summary>
            Returns block object builder which can be serialized or added to grid
            </summary>
            <param name="copy">Set if creating a copy of block</param>
            <returns>Block object builder</returns>
        </member>
        <member name="M:VRage.Game.ModAPI.IMyCubeBlock.Init">
            <summary>
            Reloads block model and interactive objects (doors, terminals, etc...)
            </summary>
        </member>
        <member name="M:VRage.Game.ModAPI.IMyCubeBlock.Init(VRage.Game.MyObjectBuilder_CubeBlock,VRage.Game.ModAPI.IMyCubeGrid)">
            <summary>
            Initializes block state from object builder
            </summary>
            <param name="builder">Object builder of block (should correspond with block type)</param>
            <param name="cubeGrid">Owning grid</param>
        </member>
        <member name="M:VRage.Game.ModAPI.IMyCubeBlock.OnBuildSuccess(System.Int64)">
            <summary>
            Method called when a block has been built (after adding to the grid).
            This is called right after placing the block and it doesn't matter whether
            it is fully built (creative mode) or is only construction site.
            Note that it is not called for blocks which do not create FatBlock at that moment.
            </summary>
        </member>
        <member name="M:VRage.Game.ModAPI.IMyCubeBlock.OnBuildSuccess(System.Int64,System.Boolean)">
            <summary>
            Method called when a block has been built (after adding to the grid).
            This is called right after placing the block and it doesn't matter whether
            it is fully built (creative mode) or is only construction site.
            Note that it is not called for blocks which do not create FatBlock at that moment.
            </summary>
            <param name="builtBy">IdentityId of a builder</param>
            <param name="instantBuild">Defines if block was instantly built. Used in blocks such piston, rotor, hinge, motor suspension to define if top part should be instantly built</param>
        </member>
        <member name="M:VRage.Game.ModAPI.IMyCubeBlock.OnDestroy">
            <summary>
            Called when block is destroyed before being removed from grid
            </summary>
        </member>
        <member name="M:VRage.Game.ModAPI.IMyCubeBlock.OnModelChange">
            <summary>
            Called when the model referred by the block is changed
            </summary>
        </member>
        <member name="M:VRage.Game.ModAPI.IMyCubeBlock.OnRegisteredToGridSystems">
            <summary>
            Called at the end of registration from grid systems (after block has been registered).
            </summary>
        </member>
        <member name="M:VRage.Game.ModAPI.IMyCubeBlock.OnRemovedByCubeBuilder">
            <summary>
            Method called when user removes a cube block from grid. Useful when block
            has to remove some other attached block (like motors).
            </summary>
        </member>
        <member name="M:VRage.Game.ModAPI.IMyCubeBlock.OnUnregisteredFromGridSystems">
            <summary>
            Called at the end of unregistration from grid systems (after block has been unregistered).
            </summary>
        </member>
        <member name="M:VRage.Game.ModAPI.IMyCubeBlock.RaycastDetectors(VRageMath.Vector3D,VRageMath.Vector3D)">
            <summary>
            Gets the name of interactive object intersected by defined line
            </summary>
            <param name="worldFrom">Line from point in world coordinates</param>
            <param name="worldTo">Line to point in world coordinates</param>
            <returns>Name of intersected detector (interactive object)</returns>
        </member>
        <member name="M:VRage.Game.ModAPI.IMyCubeBlock.ReloadDetectors(System.Boolean)">
            <summary>
            Reloads detectors (interactive objects) in model
            </summary>
            <param name="refreshNetworks">ie conveyor network</param>
        </member>
        <member name="P:VRage.Game.ModAPI.IMyCubeBlock.ResourceSink">
            <summary>
            Resource sink (draws power)
            </summary>
            <remarks>Cast to MyResourceSinkComponent as needed.</remarks>
        </member>
        <member name="M:VRage.Game.ModAPI.IMyCubeBlock.SetDamageEffect(System.Boolean)">
            <summary>
            Start or stop damage effect on cube block
            </summary>
        </member>
        <member name="M:VRage.Game.ModAPI.IMyCubeBlock.SetEffect(System.String,System.Boolean)">
            <summary>
            Activate block effect listed in definition
            </summary>
            <param name="effectName">Name of effect</param>
            <param name="stopPrevious">Defines if previous effect should be stopped</param>
            <returns><b>true</b> if effect was started; <b>false</b> otherwise</returns>
        </member>
        <member name="M:VRage.Game.ModAPI.IMyCubeBlock.SetEffect(System.String,System.Single,System.Boolean,System.Boolean,System.Boolean)">
            <summary>
            Activate block effect with parameters listed in definition
            See: Sandbox.Definitions.CubeBlockEffectBase
            </summary>
            <param name="effectName">Name of effect</param>
            <param name="parameter">When this value more than CubeBlockEffectBase.ParameterMin and less than CubeBlockEffectBase.ParameterMax, effect can be added</param>
            <param name="stopPrevious">Defines if previous effect should be stopped</param>
            <param name="ignoreParameter">When true effect always added</param>
            <param name="removeSameNameEffects">When true effect with same name are removed</param>
            <returns><b>true</b> if effect was started; <b>false</b> otherwise</returns>
        </member>
        <member name="M:VRage.Game.ModAPI.IMyCubeBlock.RemoveEffect(System.String,System.Int32)">
            <summary>
            Removes active effect set with SetEffect
            </summary>
            <param name="effectName">Name of effect</param>
            <param name="exception">Index of effect that should be ignored. Starting from 0, use -1 to remove all effects with specified name</param>
            <returns>The number of effects removed</returns>
        </member>
        <member name="P:VRage.Game.ModAPI.IMyCubeBlock.UpgradeValues">
            <summary>
            Get all values changed by upgrade modules
            Should only be used as read-only
            </summary>
        </member>
        <member name="M:VRage.Game.ModAPI.IMyCubeBlock.AddUpgradeValue(System.String,System.Single)">
            <summary>
            Preferred way of registering a block for upgrades
            Adding directly to the dictionary can have unintended consequences
            when multiple mods are involved.
            </summary>
            <param name="upgrade">Name of upgrade. Example: Productivity/PowerEfficiency/Effectiveness</param>
            <param name="defaultValue">Default value for this upgrade</param>
        </member>
        <member name="P:VRage.Game.ModAPI.IMyCubeBlock.SlimBlock">
            <summary>
            Gets the SlimBlock associated with this block
            </summary>
        </member>
        <member name="E:VRage.Game.ModAPI.IMyCubeBlock.OnUpgradeValuesChanged">
            <summary>
            Event called when upgrade values are changed
            Either upgrades were built or destroyed, or they become damaged or unpowered
            </summary>
        </member>
        <member name="P:VRage.Game.ModAPI.IMyCubeBlock.CheckConnectionAllowed">
             <summary>
             Whether the grid should call the ConnectionAllowed method for this block 
            (ConnectionAllowed checks mount points and other per-block requirements)
             </summary>
        </member>
        <member name="E:VRage.Game.ModAPI.IMyCubeBlock.CubeGridChanged">
            <summary>
            Triggers when blocks cube grid is changed
            </summary>
        </member>
        <member name="T:VRage.Game.ModAPI.IMyCubeBuilder">
            <summary>
            Describes hand, than holding block (mods interface) 
            </summary>
        </member>
        <member name="M:VRage.Game.ModAPI.IMyCubeBuilder.Activate(System.Nullable{VRage.Game.MyDefinitionId})">
            <summary>
            Activates the building mode
            </summary>
        </member>
        <member name="P:VRage.Game.ModAPI.IMyCubeBuilder.BlockCreationIsActivated">
            <summary>
             Returns state of building mode
            </summary>
        </member>
        <member name="M:VRage.Game.ModAPI.IMyCubeBuilder.Deactivate">
            <summary>
            Deactivates all modes
            </summary>
        </member>
        <member name="M:VRage.Game.ModAPI.IMyCubeBuilder.DeactivateBlockCreation">
            <summary>
            Deactivates building mode
            </summary>
        </member>
        <member name="P:VRage.Game.ModAPI.IMyCubeBuilder.FreezeGizmo">
            <summary>
            Freezes the built object preview in current position
            </summary>
        </member>
        <member name="P:VRage.Game.ModAPI.IMyCubeBuilder.ShowRemoveGizmo">
            <summary>
            Shows the delete area preview
            </summary>
        </member>
        <member name="M:VRage.Game.ModAPI.IMyCubeBuilder.StartNewGridPlacement(VRage.Game.MyCubeSize,System.Boolean)">
            <summary>
            Calls <see cref="M:VRage.Game.ModAPI.IMyCubeBuilder.Activate(System.Nullable{VRage.Game.MyDefinitionId})"/> with LargeBlockArmorBlock definition and forces local player stop using weapon or tool 
            </summary>
            <param name="cubeSize">Ignored</param>
            <param name="isStatic">Ignored</param>
        </member>
        <member name="P:VRage.Game.ModAPI.IMyCubeBuilder.UseSymmetry">
            <summary>
            Enables symmetry block placing
            </summary>
        </member>
        <member name="P:VRage.Game.ModAPI.IMyCubeBuilder.UseTransparency">
            <summary>
            Gets or sets whether projected block should be 25% transparent
            </summary>
        </member>
        <member name="M:VRage.Game.ModAPI.IMyCubeBuilder.FindClosestGrid">
            <summary>
            Finds grid to build on
            </summary>
            <returns>Found grid</returns>
        </member>
        <member name="P:VRage.Game.ModAPI.IMyCubeBuilder.IsActivated">
            <summary>
            Gets whether there block creation is activated
            </summary>
        </member>
        <member name="T:VRage.Game.ModAPI.IMyCubeGrid">
            <summary>
            Declares grid interface. (mods interface)
            Grid - an entity that consist of <see cref="T:VRage.Game.ModAPI.IMySlimBlock"/>.
            Blocks like rotor, piston, hinge, motor suspension, on their creation creates top part, that belongs to another grid.
            Player created ships, can consist of many grids.
            </summary>
        </member>
        <member name="M:VRage.Game.ModAPI.IMyCubeGrid.ApplyDestructionDeformation(VRage.Game.ModAPI.IMySlimBlock)">
            <summary>
            Applies random deformation to given block
            </summary>
            <param name="block">block to be deformed</param>
        </member>
        <member name="P:VRage.Game.ModAPI.IMyCubeGrid.BigOwners">
            <summary>
            List of players with majority of blocks on grid
            </summary>
        </member>
        <member name="P:VRage.Game.ModAPI.IMyCubeGrid.SmallOwners">
            <summary>
            List of players with any blocks on grid
            </summary>
        </member>
        <member name="P:VRage.Game.ModAPI.IMyCubeGrid.IsRespawnGrid">
            <summary>
            Gets or sets if this grid is a respawn grid (can be cleaned up automatically when player leaves)
            </summary>
        </member>
        <member name="P:VRage.Game.ModAPI.IMyCubeGrid.IsNpcSpawnedGrid">
            <summary>
            Gets if this grid is NPC spawned grid by the system (cargo ship, encounter, etc)
            </summary>
        </member>
        <member name="P:VRage.Game.ModAPI.IMyCubeGrid.IsStatic">
            <summary>
            Gets or sets if the grid is static (station)
            </summary>
            <remarks>Be careful not to set it on stations which are embedded in voxels!</remarks>
        </member>
        <member name="M:VRage.Game.ModAPI.IMyCubeGrid.ChangeGridOwnership(System.Int64,VRage.Game.MyOwnershipShareModeEnum)">
            <summary>
            Changes owner of all blocks on grid
            Call only on server!
            </summary>
            <param name="playerId">new owner id (IdentityId)</param>
            <param name="shareMode">new share mode</param>
        </member>
        <member name="M:VRage.Game.ModAPI.IMyCubeGrid.ClearSymmetries">
            <summary>
            Clears symmetry planes
            </summary>
        </member>
        <member name="M:VRage.Game.ModAPI.IMyCubeGrid.ColorBlocks(VRageMath.Vector3I,VRageMath.Vector3I,VRageMath.Vector3)">
            <summary>
            Sets given color mask to range of blocks
            </summary>
            <param name="min">Starting coordinates of colored area</param>
            <param name="max">End coordinates of colored area</param>
            <param name="newHSV">new color mask (Saturation and Value are offsets)</param>
        </member>
        <member name="M:VRage.Game.ModAPI.IMyCubeGrid.SkinBlocks(VRageMath.Vector3I,VRageMath.Vector3I,System.Nullable{VRageMath.Vector3},System.String)">
            <summary>
            Sets given skin to range of blocks
            </summary>
            <param name="min">Starting coordinates of skinned area</param>
            <param name="max">End coordinates of skinned area</param>
            <param name="newHSV">new color mask (Saturation and Value are offsets)</param>
            <param name="newSkin">subtype of the new skin</param>
        </member>
        <member name="M:VRage.Game.ModAPI.IMyCubeGrid.OnConvertToDynamic">
            <summary>
            Converts station to ship
            </summary>
        </member>
        <member name="M:VRage.Game.ModAPI.IMyCubeGrid.FixTargetCube(VRageMath.Vector3I@,VRageMath.Vector3)">
            <summary>
            Clamps fractional grid position to nearest cell (prefers neighboring occupied cell before empty) 
            </summary>
            <param name="cube">Return value</param>
            <param name="fractionalGridPosition">Fractional position in grid space</param>
        </member>
        <member name="M:VRage.Game.ModAPI.IMyCubeGrid.GetClosestCorner(VRageMath.Vector3I,VRageMath.Vector3)">
            <summary>
            Gets position of closest cell corner
            </summary>
            <param name="gridPos">Cell coordinates</param>
            <param name="position">Position to find nearest corner to. Grid space</param>
            <returns>Fractional position of corner in grid space</returns>
        </member>
        <member name="M:VRage.Game.ModAPI.IMyCubeGrid.GetCubeBlock(VRageMath.Vector3I)">
            <summary>
            Get cube block at given position
            </summary>
            <param name="pos">Block position</param>
            <returns>Block or null if none is present at given position</returns>
        </member>
        <member name="P:VRage.Game.ModAPI.IMyCubeGrid.CustomName">
            <summary>
            Display name of the grid (as seen in Info terminal tab)
            </summary>
        </member>
        <member name="M:VRage.Game.ModAPI.IMyCubeGrid.GetLineIntersectionExactAll(VRageMath.LineD@,System.Double@,VRage.Game.ModAPI.IMySlimBlock@)">
            <summary>
            Returns point of intersection with line
            </summary>
            <param name="line">Intersecting line</param>
            <param name="distance">Distance of intersection</param>
            <param name="intersectedBlock">Returns intersected block, or null if there was no intersection</param>
            <returns>Point of intersection</returns>
        </member>
        <member name="M:VRage.Game.ModAPI.IMyCubeGrid.GetLineIntersectionExactGrid(VRageMath.LineD@,VRageMath.Vector3I@,System.Double@)">
            <summary>
            Same as GetLineIntersectionExactAll just without intersected block
            </summary>
            <param name="line">Line, that should intersect any block</param>
            <param name="position">Position of block, intersected with line would be returned into that variable</param>
            <param name="distanceSquared">Squared distance of intersection would be returned into that variable</param>
        </member>
        <member name="M:VRage.Game.ModAPI.IMyCubeGrid.IsTouchingAnyNeighbor(VRageMath.Vector3I,VRageMath.Vector3I)">
            <summary>
            Finds out if given area has any neighboring block
            Checking only cube sides. Example: for vectors Min (0,0,0) and Max (10,10,10), Space (1,1,1)-(9,9,9) won't be checked
            </summary>
            <param name="min">Minimal position (in block coordinates)</param>
            <param name="max">Maximum position (in block coordinates)</param>
            <returns>True if given area has at least one block</returns>
        </member>
        <member name="M:VRage.Game.ModAPI.IMyCubeGrid.CanMergeCubes(VRage.Game.ModAPI.IMyCubeGrid,VRageMath.Vector3I)">
            <summary>
            Determines if merge between grids is possible with given offset
            </summary>
            <param name="gridToMerge"></param>
            <param name="gridOffset">offset to merged grid (in grid space)</param>
            <returns>True whether grids could be merged</returns>
            <remarks>Can be extremely slow on large grids, that can't be merged</remarks>
        </member>
        <member name="M:VRage.Game.ModAPI.IMyCubeGrid.CalculateMergeTransform(VRage.Game.ModAPI.IMyCubeGrid,VRageMath.Vector3I)">
            <summary>
            Transformation matrix that has to be applied to grid blocks to correctly merge it
            used because ie. ships can be turned 90 degrees along X axis when being merged
            </summary>
            <param name="gridToMerge"></param>
            <param name="gridOffset"></param>
            <returns></returns>
        </member>
        <member name="M:VRage.Game.ModAPI.IMyCubeGrid.MergeGrid_MergeBlock(VRage.Game.ModAPI.IMyCubeGrid,VRageMath.Vector3I)">
            <summary>
            Merge used by merge blocks
            </summary>
            <param name="gridToMerge"></param>
            <param name="gridOffset">Block position </param>
            <returns></returns>
        </member>
        <member name="M:VRage.Game.ModAPI.IMyCubeGrid.RayCastBlocks(VRageMath.Vector3D,VRageMath.Vector3D)">
            <summary>
            Obtains first block position intersected with line.
            </summary>
            <param name="worldStart">Start position in world coordinates</param>
            <param name="worldEnd">End position in world coordinates</param>
            <returns>Position of found block or null</returns>
        </member>
        <member name="M:VRage.Game.ModAPI.IMyCubeGrid.RayCastCells(VRageMath.Vector3D,VRageMath.Vector3D,System.Collections.Generic.List{VRageMath.Vector3I},System.Nullable{VRageMath.Vector3I},System.Boolean)">
            <summary>
            Obtains positions of grid cells <b>regardless</b> of whether these cells are taken up by blocks or not.
            </summary>
            <param name="worldStart">Start position in world coordinates</param>
            <param name="worldEnd">End position in world coordinates</param>
            <param name="outHitPositions">List of found block positions</param>
            <param name="gridSizeInflate">If not null, would allow find blocks out </param>
            <param name="havokWorld">Obsolete, not used.</param>
        </member>
        <member name="M:VRage.Game.ModAPI.IMyCubeGrid.RazeBlock(VRageMath.Vector3I)">
            <summary>
            Remove block at given position
            </summary>
            <param name="position">Position of block (in block coordinates)</param>
        </member>
        <member name="M:VRage.Game.ModAPI.IMyCubeGrid.RazeBlocks(VRageMath.Vector3I@,VRageMath.Vector3UByte@)">
            <summary>
            Remove blocks in given area
            </summary>
            <param name="pos">Starting position</param>
            <param name="size">Area extents</param>
        </member>
        <member name="M:VRage.Game.ModAPI.IMyCubeGrid.RazeBlocks(System.Collections.Generic.List{VRageMath.Vector3I})">
            <summary>
            Remove blocks at given positions
            </summary>
        </member>
        <member name="M:VRage.Game.ModAPI.IMyCubeGrid.RemoveBlock(VRage.Game.ModAPI.IMySlimBlock,System.Boolean)">
            <summary>
            Removes given block
            </summary>
            <param name="block">Block, that you want to remove</param>
            <param name="updatePhysics">Update grid physics</param>
        </member>
        <member name="M:VRage.Game.ModAPI.IMyCubeGrid.RemoveDestroyedBlock(VRage.Game.ModAPI.IMySlimBlock)">
            <summary>
            Removes block and deformates neighboring blocks
            </summary>
            <param name="block">Block, that you want to remove</param>
        </member>
        <member name="M:VRage.Game.ModAPI.IMyCubeGrid.UpdateBlockNeighbours(VRage.Game.ModAPI.IMySlimBlock)">
            <summary>
            Refreshes block neighbors (checks connections)
            </summary>
            <param name="block">Block, whose neighbours need to be updated</param>
        </member>
        <member name="M:VRage.Game.ModAPI.IMyCubeGrid.GetBlocks(System.Collections.Generic.List{VRage.Game.ModAPI.IMySlimBlock},System.Func{VRage.Game.ModAPI.IMySlimBlock,System.Boolean})">
            <summary>
            Returns blocks in grid
            </summary>
            <param name="blocks">List of returned blocks. Can be null, if function always returns false</param>
            <param name="collect">Filter - function called on each block telling if it should be added to result. When it is null, all blocks are added</param>
        </member>
        <member name="M:VRage.Game.ModAPI.IMyCubeGrid.GetBlocksInsideSphere(VRageMath.BoundingSphereD@)">
            <summary>
            Returns blocks intersects with given sphere (world space)
            </summary>
            <returns>List of blocks, that intersects with given sphere</returns>
        </member>
        <member name="E:VRage.Game.ModAPI.IMyCubeGrid.OnBlockAdded">
            <summary>
            Called when a block is added to the grid
            </summary>
        </member>
        <member name="E:VRage.Game.ModAPI.IMyCubeGrid.OnBlockRemoved">
            <summary>
            Called when a block is removed from the grid
            </summary>
        </member>
        <member name="E:VRage.Game.ModAPI.IMyCubeGrid.OnBlockOwnershipChanged">
            <summary>
            Called when a block on the grid changes owner
            </summary>
        </member>
        <member name="E:VRage.Game.ModAPI.IMyCubeGrid.OnGridChanged">
            <summary>
            Called when a grid is taken control of by a player
            </summary>
        </member>
        <member name="E:VRage.Game.ModAPI.IMyCubeGrid.OnGridSplit">
            <summary>
            Triggered when grid is split
            </summary>
        </member>
        <member name="E:VRage.Game.ModAPI.IMyCubeGrid.OnIsStaticChanged">
            <summary>
            Triggered when grid changes to or from static (station)
            </summary>
        </member>
        <member name="E:VRage.Game.ModAPI.IMyCubeGrid.OnBlockIntegrityChanged">
            <summary>
            Triggered when block integrity changes (construction)
            </summary>
        </member>
        <member name="E:VRage.Game.ModAPI.IMyCubeGrid.OnGridBlockDamaged">
            <summary>
            Called when one of blocks on grid is taking damage
            </summary>
        </member>
        <member name="E:VRage.Game.ModAPI.IMyCubeGrid.OnTargetLocked">
            <summary>
            Called when grid was target locked
            </summary>
        </member>
        <member name="M:VRage.Game.ModAPI.IMyCubeGrid.UpdateOwnership(System.Int64,System.Boolean)">
            <summary>
            Called when functional block lost or gained owner.
            Triggers, grid ownership recalculation 
            </summary>
            <param name="ownerId">New or previous block owner</param>
            <param name="isFunctional">New functional state of block.</param>
        </member>
        <member name="M:VRage.Game.ModAPI.IMyCubeGrid.AddBlock(VRage.Game.MyObjectBuilder_CubeBlock,System.Boolean)">
            <summary>
            Add a cubeblock to the grid
            </summary>
            <param name="objectBuilder">Object builder of cube to add</param>
            <param name="testMerge">test for grid merging</param>
            <returns>Created block</returns>
        </member>
        <member name="M:VRage.Game.ModAPI.IMyCubeGrid.WillRemoveBlockSplitGrid(VRage.Game.ModAPI.IMySlimBlock)">
            <summary>
            Checks if removing a block will cause the grid to split
            </summary>
            <param name="testBlock"></param>
            <returns>True if removing block, would split grid</returns>
        </member>
        <member name="M:VRage.Game.ModAPI.IMyCubeGrid.CanAddCube(VRageMath.Vector3I)">
            <summary>
            Tests if a cubeblock can be added at the specific location
            </summary>
            <param name="pos">Position where you want add cube</param>
            <returns><b>true</b> if block can be added</returns>
        </member>
        <member name="M:VRage.Game.ModAPI.IMyCubeGrid.CanAddCubes(VRageMath.Vector3I,VRageMath.Vector3I)">
            <summary>
            Test if the range of positions are not occupied by any blocks
            </summary>
            <param name="min">Start position</param>
            <param name="max">End position</param>
            <returns><b>true</b> if blocks can be added in that range</returns>
        </member>
        <member name="M:VRage.Game.ModAPI.IMyCubeGrid.SplitByPlane(VRageMath.PlaneD)">
            <summary>
            Split grid along a plane
            </summary>
            <param name="plane"></param>
            <returns>Splitted grid</returns>
        </member>
        <member name="M:VRage.Game.ModAPI.IMyCubeGrid.Split(System.Collections.Generic.List{VRage.Game.ModAPI.IMySlimBlock},System.Boolean)">
            <summary>
            Split grid
            </summary>
            <param name="blocks">List of blocks to split into new grid</param>
            <param name="sync">Pass <b>true</b> if on server to sync this to clients.</param>
            <returns>New grid</returns>
            <remarks>To sync to clients, this must be called on the server with sync = true.</remarks>
        </member>
        <member name="P:VRage.Game.ModAPI.IMyCubeGrid.XSymmetryPlane">
            <summary>
            Gets or sets X-Axis build symmetry plane
            </summary>
        </member>
        <member name="P:VRage.Game.ModAPI.IMyCubeGrid.YSymmetryPlane">
            <summary>
            Gets or sets Y-Axis build symmetry plane
            </summary>
        </member>
        <member name="P:VRage.Game.ModAPI.IMyCubeGrid.ZSymmetryPlane">
            <summary>
            Gets or sets Z-Axis build symmetry plane
            </summary>
        </member>
        <member name="P:VRage.Game.ModAPI.IMyCubeGrid.XSymmetryOdd">
            <summary>
            Gets or sets if the symmetry plane is offset from the block center
            </summary>
            <remarks>True if symmetry plane is at block border; false if center of block</remarks>
        </member>
        <member name="P:VRage.Game.ModAPI.IMyCubeGrid.YSymmetryOdd">
            <summary>
            Gets or sets if the symmetry plane is offset from the block center
            </summary>
            <remarks>True if symmetry plane is at block border; false if center of block</remarks>
        </member>
        <member name="P:VRage.Game.ModAPI.IMyCubeGrid.ZSymmetryOdd">
            <summary>
            Gets or sets if the symmetry plane is offset from the block center
            </summary>
            <remarks>True if symmetry plane is at block border; false if center of block</remarks>
        </member>
        <member name="M:VRage.Game.ModAPI.IMyCubeGrid.IsInSameLogicalGroupAs(VRage.Game.ModAPI.IMyCubeGrid)">
            <summary>
            Determines whether this grid is in the same logical group as the other, meaning they're connected
            either mechanically or via blocks like connectors. Be aware that using merge blocks combines grids into one, so this function
            will not filter out grids connected that way.
            </summary>
            <param name="other">Other grid</param>
            <returns>If grids connected logically</returns>
        </member>
        <member name="M:VRage.Game.ModAPI.IMyCubeGrid.IsSameConstructAs(VRage.Game.ModAPI.IMyCubeGrid)">
            <summary>
            <para>
            Determines whether this grid is mechanically connected to the other. This is any grid connected
            with rotors or pistons or other mechanical devices, but not things like connectors. This will in most
            cases constitute your complete construct.
            </para>
            <para>
            Be aware that using merge blocks combines grids into one, so this function will not filter out grids
            connected that way. Also be aware that detaching the heads of pistons and rotors will cause this
            connection to change.
            </para>
            </summary>
            <param name="other">Other grid</param>
            <returns>If grids connected mechanically</returns>
        </member>
        <member name="M:VRage.Game.ModAPI.IMyCubeGrid.IsRoomAtPositionAirtight(VRageMath.Vector3I)">
            <summary>
            Is room at specified position airtight
            </summary>
            <param name="vector3I">position</param>
            <returns>true if airtight</returns>
        </member>
        <member name="P:VRage.Game.ModAPI.IMyCubeGrid.GridPresenceTier">
            <summary>
            Gets grid presence tier
            </summary>
        </member>
        <member name="P:VRage.Game.ModAPI.IMyCubeGrid.PlayerPresenceTier">
            <summary>
            Gets player presence tier
            </summary>
        </member>
        <member name="E:VRage.Game.ModAPI.IMyCubeGrid.GridPresenceTierChanged">
            <summary>
            Triggered when grid presence tier is changed
            </summary>
        </member>
        <member name="E:VRage.Game.ModAPI.IMyCubeGrid.PlayerPresenceTierChanged">
            <summary>
            Triggered when player presence tier is changed
            </summary>
        </member>
        <member name="E:VRage.Game.ModAPI.IMyCubeGrid.OnGridMerge">
            <summary>
            Called, when 2 grids are merged with merge block. First grid - grid that will stay, second - will be merged into first, and deleted.
            Called for both grids
            </summary>
        </member>
        <member name="M:VRage.Game.ModAPI.IMyCubeGrid.GetGridGroup(VRage.Game.ModAPI.GridLinkTypeEnum)">
            <summary>
            Gets grid group of grids connected by provided link type
            </summary>
            <param name="linkTypeEnum">Type of grid connection</param>
            <returns>Grid group data</returns>
            <seealso cref="T:VRage.Game.ModAPI.IMyGridGroupData"/>
        </member>
        <member name="M:VRage.Game.ModAPI.IMyCubeGrid.GetFatBlocks``1">
            <summary>
            Get all blocks in grid, inherit from this specific type
            </summary>
            <typeparam name="T">Blocks must be inherit from this type T</typeparam>
            <returns>Enumerable of blocks</returns>
        </member>
        <member name="P:VRage.Game.ModAPI.IMyCubeGrid.WeaponSystem">
            <summary>
            Gets grid-group weapon system
            </summary>
        </member>
        <member name="P:VRage.Game.ModAPI.IMyCubeGrid.ControlSystem">
            <summary>
            Gets grid-group control system
            </summary>
        </member>
        <member name="P:VRage.Game.ModAPI.IMyCubeGrid.GasSystem">
            <summary>
            Gets grid-group gas system
            </summary>
        </member>
        <member name="P:VRage.Game.ModAPI.IMyCubeGrid.JumpSystem">
            <summary>
            Gets grid-group jump system
            </summary>
        </member>
        <member name="P:VRage.Game.ModAPI.IMyCubeGrid.ResourceDistributor">
            <summary>
            Gets grid-group resource distributor
            </summary>
        </member>
        <member name="P:VRage.Game.ModAPI.IMyCubeGrid.ConveyorSystem">
            <summary>
            Gets grid-group conveyor system
            </summary>
        </member>
        <member name="M:VRage.Game.ModAPI.IMyCubeGrid.InvokeDepressurizeEffect(VRageMath.Vector3I,VRageMath.Vector3I)">
            <summary>
            Invokes de-pressurize effect on clients
            </summary>
            <param name="from">from cube vector</param>
            <param name="to">to cube vector</param>
        </member>
        <member name="E:VRage.Game.ModAPI.IMyCubeGrid.OnMaxThrustChanged">
            <summary>
            Triggered when max thrust in one of directions was changed.
            Maybe called from parralel thread
            </summary>
        </member>
        <member name="M:VRage.Game.ModAPI.IMyCubeGrid.GetMaxThrustInDirection(VRageMath.Base6Directions.Direction)">
            <summary>
            Gets max thrust (Newtons) in direction.
            </summary>
            <param name="direction">Direction of thrust, based on grid direction </param>
            <returns></returns>
        </member>
        <member name="P:VRage.Game.ModAPI.IMyCubeGrid.RvoAgentId">
            <summary>
            Gets RVO Agent ID used for collision avoidance algorithm
            </summary>
        </member>
        <member name="E:VRage.Game.ModAPI.IMyCubeGrid.SpeedChanged">
            <summary>
            Triggered when speed of the grid is changed
            </summary>
        </member>
        <member name="E:VRage.Game.ModAPI.IMyCubeGrid.OnNaturalGravityChanged">
            <summary>
            Triggered when natural gravity changes around the grid
            </summary>
        </member>
        <member name="P:VRage.Game.ModAPI.IMyCubeGrid.NaturalGravity">
            <summary>
            Gets natural gravity around the grid
            </summary>
        </member>
        <member name="P:VRage.Game.ModAPI.IMyCubeGrid.IsBlockTrasferInProgress">
            <summary>
            Gets whether the move block transfer from one grid to another is in progress. This happens during the split operation.
            </summary>
        </member>
        <member name="T:VRage.Game.ModAPI.MyIntegrityChangeEnum">
            <summary>
            Types of block integrity change that can occur
            </summary>
        </member>
        <member name="T:VRage.Game.ModAPI.BeforeDamageApplied">
            <summary>
            This delegate is used to handle damage before it's applied to an object.  This returns a modified damage that is used in DoDamage.  Return damage if no change.
            </summary>
            <param name="target">The object that is damaged</param>
            <param name="info"></param>
            <returns>Modified damage.  Return damage parameter if damage is not modified.</returns>
        </member>
        <member name="T:VRage.Game.ModAPI.MyDamageSystemPriority">
            <summary>
             Standard priority values
            </summary>
        </member>
        <member name="T:VRage.Game.ModAPI.IMyDamageSystem">
            <summary>
            Mod API interface allowing you handle damage events 
            </summary>
        </member>
        <member name="M:VRage.Game.ModAPI.IMyDamageSystem.RegisterDestroyHandler(System.Int32,System.Action{System.Object,VRage.Game.ModAPI.MyDamageInformation})">
            <summary>
            Registers a handler for when an object in game is destroyed.
            </summary>
            <param name="priority">Priority level.  Lower means higher priority.</param>
            <param name="handler">Actual handler delegate</param>
        </member>
        <member name="M:VRage.Game.ModAPI.IMyDamageSystem.RegisterBeforeDamageHandler(System.Int32,VRage.Game.ModAPI.BeforeDamageApplied)">
            <summary>
            Registers a handler that is called before an object in game is damaged.  The damage can be modified in this handler.
            </summary>
            <param name="priority">Priority level.  Lower means higher priority.</param>
            <param name="handler">Actual handler delegate</param>
        </member>
        <member name="M:VRage.Game.ModAPI.IMyDamageSystem.RegisterAfterDamageHandler(System.Int32,System.Action{System.Object,VRage.Game.ModAPI.MyDamageInformation})">
            <summary>
            Registers a handler that is called after an object in game is damaged.
            </summary>
            <param name="priority">Priority level.  Lower means higher priority.</param>
            <param name="handler">Actual handler delegate</param>
        </member>
        <member name="M:VRage.Game.ModAPI.IMyDamageSystem.RaiseBeforeDamageApplied(System.Object,VRage.Game.ModAPI.MyDamageInformation@)">
            <summary>
            Allowing mods, to raise `BeforeDamageApplied` event
            </summary>
            <param name="target">Object that would receive damage</param>
            <param name="damageInformation">Damage info</param>
        </member>
        <member name="M:VRage.Game.ModAPI.IMyDamageSystem.RaiseAfterDamageApplied(System.Object,VRage.Game.ModAPI.MyDamageInformation)">
            <summary>
            Allowing mods, to raise `AfterDamageApplied` event
            </summary>
            <param name="target">Object that received damage</param>
            <param name="damageInformation">Damage info</param>
        </member>
        <member name="T:VRage.Game.ModAPI.IMyDLC">
            <summary>
            Contains information about a particular DLC package.
            </summary>
        </member>
        <member name="P:VRage.Game.ModAPI.IMyDLC.AppId">
            <summary>
            Gets the Steam AppID of the DLC.
            </summary>
        </member>
        <member name="P:VRage.Game.ModAPI.IMyDLC.Name">
            <summary>
            Gets the internal name of the DLC. This is the name used in CubeBlocks.sbc, for example.
            </summary>
        </member>
        <member name="P:VRage.Game.ModAPI.IMyDLC.DisplayName">
            <summary>
            Gets localized name of the DLC.
            </summary>
        </member>
        <member name="P:VRage.Game.ModAPI.IMyDLC.Description">
            <summary>
            Gets localized description of the DLC.
            </summary>
        </member>
        <member name="P:VRage.Game.ModAPI.IMyDLC.Icon">
            <summary>
            Gets icon of the DLC. Displayed in G-screen, blueprints, etc ...
            </summary>
        </member>
        <member name="P:VRage.Game.ModAPI.IMyDLC.Badge">
            <summary>
            Gets badge of the DLC. Displayed in main menu.
            </summary>
        </member>
        <member name="T:VRage.Game.ModAPI.IMyDLCs">
            <summary>
            Describes API, that allows you get information about DLCs (mods interface)
            </summary>
        </member>
        <member name="M:VRage.Game.ModAPI.IMyDLCs.TryGetDLC(System.UInt32,VRage.Game.ModAPI.IMyDLC@)">
            <summary>
            Gets information on the requested DLC.
            </summary>
            <param name="appId">The <see cref="P:VRage.Game.ModAPI.IMyDLC.AppId"/> of the DLC</param>
            <param name="dlc">The requested DLC information.</param>
            <returns><see langword="true"/> if DLC exists and <paramref name="dlc"/> has valid contents.</returns>
        </member>
        <member name="M:VRage.Game.ModAPI.IMyDLCs.TryGetDLC(System.String,VRage.Game.ModAPI.IMyDLC@)">
            <summary>
            Gets information on the requested DLC.
            </summary>
            <param name="name">The <see cref="P:VRage.Game.ModAPI.IMyDLC.Name"/> of the DLC</param>
            <param name="dlc">The requested DLC information.</param>
            <returns><see langword="true"/> if DLC exists and <paramref name="dlc"/> has valid contents.</returns>
        </member>
        <member name="M:VRage.Game.ModAPI.IMyDLCs.GetDLC(System.String)">
            <summary>
            Gets information on the requested DLC.
            </summary>
            <param name="name">The <see cref="P:VRage.Game.ModAPI.IMyDLC.Name"/> of the DLC</param>
            <returns>Requested DLC information.</returns>
            <exception cref="T:System.Collections.Generic.KeyNotFoundException">Name supplied doesn't match a known DLC.</exception>
        </member>
        <member name="M:VRage.Game.ModAPI.IMyDLCs.GetDLC(System.UInt32)">
            <summary>
            Gets information on the requested DLC.
            </summary>
            <param name="appId">The <see cref="P:VRage.Game.ModAPI.IMyDLC.AppId"/> of the DLC</param>
            <returns>Requested DLC information.</returns>
            <exception cref="T:System.Collections.Generic.KeyNotFoundException">AppId supplied doesn't match a known DLC.</exception>
        </member>
        <member name="M:VRage.Game.ModAPI.IMyDLCs.IsDLCSupported(System.String)">
            <summary>
            Check if DLC is supported on this platform.
            </summary>
            <param name="name">The <see cref="P:VRage.Game.ModAPI.IMyDLC.Name"/> of the DLC</param>
            <returns></returns>
        </member>
        <member name="M:VRage.Game.ModAPI.IMyDLCs.GetRequiredDLCTooltip(System.String)">
            <summary>
            Returns the tooltip text that is shown to the user if they don't own the DLC.
            </summary>
            <param name="name">The <see cref="P:VRage.Game.ModAPI.IMyDLC.Name"/> of the DLC</param>
            <returns>Localized and formatted version of <see cref="F:MyCommonTexts.RequiresDlc"/></returns>
        </member>
        <member name="M:VRage.Game.ModAPI.IMyDLCs.GetRequiredDLCTooltip(System.UInt32)">
            <summary>
            Returns the tooltip text that is shown to the user if they don't own the DLC.
            </summary>
            <param name="appId">The <see cref="P:VRage.Game.ModAPI.IMyDLC.AppId"/> of the DLC</param>
            <returns>Localized and formatted version of <see cref="F:MyCommonTexts.RequiresDlc"/></returns>
        </member>
        <member name="M:VRage.Game.ModAPI.IMyDLCs.GetDLCs">
            <summary>
            Get a list of all DLCs the game has. This will not change for the lifetime of the session and is safe to cache.
            </summary>
        </member>
        <member name="M:VRage.Game.ModAPI.IMyDLCs.GetAvailableClientDLCIds">
            <summary>
            Returns a list of the DLCs installed on the local client.
            </summary>
            <returns>List of <see cref="P:VRage.Game.ModAPI.IMyDLC.AppId"/>.</returns>
        </member>
        <member name="M:VRage.Game.ModAPI.IMyDLCs.HasDLC(System.String,System.UInt64)">
            <summary>
            Return whether a player owns a DLC.
            </summary>
            <param name="name">The <see cref="P:VRage.Game.ModAPI.IMyDLC.Name"/> of the DLC</param>
            <param name="steamId">The SteamID of the player to check.</param>
            <returns><see langword="true"/> if the player owns that DLC.</returns>
        </member>
        <member name="M:VRage.Game.ModAPI.IMyDLCs.HasDLC(System.UInt32,System.UInt64)">
            <summary>
            Return whether a player owns a DLC.
            </summary>
            <param name="appId">The <see cref="P:VRage.Game.ModAPI.IMyDLC.AppId"/> of the DLC</param>
            <param name="steamId">The SteamID of the player to check.</param>
            <returns><see langword="true"/> if the player owns that DLC.</returns>
        </member>
        <member name="M:VRage.Game.ModAPI.IMyDLCs.HasDefinitionDLC(VRage.Game.MyDefinitionId,System.UInt64)">
            <summary>
            Returns whether a player owns all DLCs required by this definition id.
            </summary>
            <param name="definitionId">The definition id to check.</param>
            <param name="steamId">The SteamID of the user to check against.</param>
            <returns><see langword="true"/> if the player owns all the DLC in the definition.</returns>
        </member>
        <member name="M:VRage.Game.ModAPI.IMyDLCs.HasDefinitionDLC(VRage.Game.MyDefinitionBase,System.UInt64)">
            <summary>
            Returns whether a player owns all DLCs required by this definition.
            </summary>
            <param name="definition">The definition to check.</param>
            <param name="steamId">The SteamID of the user to check against.</param>
            <returns><see langword="true"/> if the player owns all the DLC in the definition.</returns>
        </member>
        <member name="M:VRage.Game.ModAPI.IMyDLCs.ContainsRequiredDLC(VRage.Game.MyDefinitionBase,System.Collections.Generic.List{System.UInt64})">
            <summary>
            Returns whether the collection contains the DLCs in this definition.
            </summary>
            <param name="definition">The definition to check.</param>
            <param name="dlcs">The collection to compare against.</param>
            <returns><see langword="true"/> if the definition has no DLCs specified, or all the DLCs specified in <paramref name="definition"/> are present in <paramref name="dlcs"/>.</returns>
        </member>
        <member name="M:VRage.Game.ModAPI.IMyDLCs.GetFirstMissingDefinitionDLC(VRage.Game.MyDefinitionBase,System.UInt64)">
            <summary>
            Get the first DLC a player is missing that a definition requires. Null if they have all.
            </summary>
            <param name="definition">The definition to check.</param>
            <param name="steamId">The SteamID of the user to check against.</param>
            <returns>The first DLC not available by the specified <paramref name="steamId"/>. <see langword="null"/> if definition has no DLC, or the user has all of them.</returns>
        </member>
        <member name="E:VRage.Game.ModAPI.IMyDLCs.DLCInstalled">
            <summary>
            Called when a new DLC is installed by a client. On the client, this only reports DLC installed on the local client.
            </summary>
            <remarks>
            The first action argument is the client SteamId. The second argument is the DLC AppId.
            This event will be called on the server each time a player connects.
            <para/>
            Note:
            <para>Space Engineers 2013 is AppId 573900</para>
            <para>Deluxe Edition Artwork is AppId 573161</para>
            Neither of the above DLC are present in the list returned by <see cref="M:VRage.Game.ModAPI.IMyDLCs.GetDLCs"/>. In addition, <see cref="M:VRage.Game.ModAPI.IMyDLCs.GetDLC(System.UInt32)"/> will throw <see cref="T:System.Collections.Generic.KeyNotFoundException"/> when passed either of those AppIds.
            </remarks>
        </member>
        <member name="T:VRage.Game.ModAPI.IMyEntityController">
            <summary>
            Describes entity controller (mods interface)
            Allows to take controls 
            </summary>
        </member>
        <member name="P:VRage.Game.ModAPI.IMyEntityController.ControlledEntity">
            <summary>
            Get currently controlled entity
            </summary>
        </member>
        <member name="M:VRage.Game.ModAPI.IMyEntityController.TakeControl(VRage.Game.ModAPI.Interfaces.IMyControllableEntity)">
            <summary>
            Taking control on entity.
            </summary>
            <param name="entity">Entity to control</param>
        </member>
        <member name="E:VRage.Game.ModAPI.IMyEntityController.ControlledEntityChanged">
            <summary>
            Event triggered when currently controlled grid is changed
            </summary>
        </member>
        <member name="T:VRage.Game.ModAPI.IMyFaction">
            <summary>
            Describes faction (mods interface)
            </summary>
        </member>
        <member name="P:VRage.Game.ModAPI.IMyFaction.FactionId">
            <summary>
            Gets faction id
            </summary>
        </member>
        <member name="P:VRage.Game.ModAPI.IMyFaction.Tag">
            <summary>
            Gets faction tag
            </summary>
        </member>
        <member name="P:VRage.Game.ModAPI.IMyFaction.Name">
            <summary>
            Gets faction name
            </summary>
        </member>
        <member name="P:VRage.Game.ModAPI.IMyFaction.Description">
            <summary>
            Gets faction description
            </summary>
        </member>
        <member name="P:VRage.Game.ModAPI.IMyFaction.PrivateInfo">
            <summary>
            Gets faction private info
            </summary>
        </member>
        <member name="P:VRage.Game.ModAPI.IMyFaction.Score">
            <summary>
            Gets or sets score of faction. Used in Uranium Heist scenario
            </summary>
        </member>
        <member name="P:VRage.Game.ModAPI.IMyFaction.ObjectivePercentageCompleted">
            <summary>
            Gets or sets percentage of completed objective. Used in Uranium Heist scenario
            </summary>
        </member>
        <member name="P:VRage.Game.ModAPI.IMyFaction.FactionIcon">
            <summary>
            Gets faction icon
            </summary>
        </member>
        <member name="P:VRage.Game.ModAPI.IMyFaction.AutoAcceptMember">
            <summary>
            Gets if faction automatically accept new members
            </summary>
        </member>
        <member name="P:VRage.Game.ModAPI.IMyFaction.AutoAcceptPeace">
            <summary>
            Gets if faction automatically accept peace from other factions
            </summary>
        </member>
        <member name="P:VRage.Game.ModAPI.IMyFaction.AcceptHumans">
            <summary>
            Gets if faction accepts players
            </summary>
        </member>
        <member name="P:VRage.Game.ModAPI.IMyFaction.FounderId">
            <summary>
            IdentityId of founder of faction
            </summary>
        </member>
        <member name="P:VRage.Game.ModAPI.IMyFaction.CustomColor">
            <summary>
            Gets faction icon background color
            </summary>
        </member>
        <member name="P:VRage.Game.ModAPI.IMyFaction.IconColor">
            <summary>
            Gets faction icon color
            </summary>
        </member>
        <member name="M:VRage.Game.ModAPI.IMyFaction.IsFounder(System.Int64)">
            <summary>
            Returns if player with provided playerId is founder of faction 
            </summary>
            <param name="playerId">Player IdentityId</param>
            <returns>True if player is founder of faction</returns>
        </member>
        <member name="M:VRage.Game.ModAPI.IMyFaction.IsLeader(System.Int64)">
            <summary>
            Returns if player with provided playerId is faction leader
            </summary>
            <param name="playerId">Player IdentityId</param>
            <returns>True if player is faction leader</returns>
        </member>
        <member name="M:VRage.Game.ModAPI.IMyFaction.IsMember(System.Int64)">
            <summary>
            Returns if player with provided playerId is faction member
            </summary>
            <param name="playerId">Player IdentityId</param>
            <returns>True if player is faction leader</returns>
        </member>
        <member name="M:VRage.Game.ModAPI.IMyFaction.IsNeutral(System.Int64)">
            <summary>
            Returns if player with provided playerId is neutral to faction
            </summary>
            <param name="playerId">Player IdentityId</param>
            <returns>True if player is neutral to faction</returns>
        </member>
        <member name="M:VRage.Game.ModAPI.IMyFaction.IsEnemy(System.Int64)">
            <summary>
            Returns if player with provided playerId is enemy to faction
            </summary>
            <param name="playerId">Player IdentityId</param>
            <returns>True if player is enemy to faction</returns>
        </member>
        <member name="M:VRage.Game.ModAPI.IMyFaction.IsFriendly(System.Int64)">
            <summary>
            Returns if player with provided playerId is friendly to faction
            </summary>
            <param name="playerId">Player IdentityId</param>
            <returns>True if player is friendly to faction</returns>
        </member>
        <member name="M:VRage.Game.ModAPI.IMyFaction.IsEveryoneNpc">
            <summary>
            Returns if faction has no humans
            </summary>
            <returns>True if faction has no humans</returns>
        </member>
        <member name="M:VRage.Game.ModAPI.IMyFaction.HasLastMember">
            <summary>
            Returns if faction has last member
            </summary>
            <returns>True if faction has last member</returns>
        </member>
        <member name="P:VRage.Game.ModAPI.IMyFaction.Members">
            <summary>
            Gets all members (founder, leaders also) of faction. 
            </summary>
        </member>
        <member name="P:VRage.Game.ModAPI.IMyFaction.JoinRequests">
            <summary>
            Gets all faction join requests. 
            </summary>
        </member>
        <member name="M:VRage.Game.ModAPI.IMyFaction.TryGetBalanceInfo(System.Int64@)">
            <summary>
            Gets balance of an account associated with faction.
            </summary>
            <param name="balance">Returns current balance of the account. (If called on client, can return delayed value, as changes to balace have to be synchronized first)</param>
            <returns>True if account was found. Otherwise false.</returns>
        </member>
        <member name="M:VRage.Game.ModAPI.IMyFaction.GetBalanceShortString">
            <summary>
            Gets balance of an account associated with faction. Format is 'BALANCE CURRENCYSHORTNAME'.
            </summary>
            <returns>Current balance of the account in form of formatted string. If Banking System does not exist method returns null.</returns>
        </member>
        <member name="M:VRage.Game.ModAPI.IMyFaction.RequestChangeBalance(System.Int64)">
            <summary>
            Changes the balance of the account of this faction by given amount. Sends a message to server with the request.
            </summary>
            <param name="amount">Amount by which to change te balance.</param>
        </member>
        <member name="P:VRage.Game.ModAPI.IMyFaction.FactionType">
            <summary>
            Gets faction type: Pirate, Miner ...
            </summary>
        </member>
        <member name="M:VRage.Game.ModAPI.IMyFactionCollection.FactionTagExists(System.String,VRage.Game.ModAPI.IMyFaction)">
            <summary>
            Gets if faction with provided tag exists
            </summary>
            <param name="tag">Tag to check</param>
            <param name="doNotCheck">Faction to ignore</param>
            <returns>True if faction with that tag exists, and it is not ignored</returns>
        </member>
        <member name="M:VRage.Game.ModAPI.IMyFactionCollection.FactionNameExists(System.String,VRage.Game.ModAPI.IMyFaction)">
            <summary>
            Gets if faction with provided tag exists
            </summary>
            <param name="name">Name to check</param>
            <param name="doNotCheck">Faction to ignore</param>
            <returns>True if faction with that tag exists, and it is not ignored</returns>
        </member>
        <member name="M:VRage.Game.ModAPI.IMyFactionCollection.TryGetFactionById(System.Int64)">
            <summary>
            Tries get faction by faction id
            </summary>
            <param name="factionId">Id of faction</param>
            <returns>Faction or null</returns>
        </member>
        <member name="M:VRage.Game.ModAPI.IMyFactionCollection.TryGetPlayerFaction(System.Int64)">
            <summary>
            Tries get faction that has member with provided id
            </summary>
            <param name="playerId">IdentityId of player</param>
            <returns>Faction or null</returns>
        </member>
        <member name="M:VRage.Game.ModAPI.IMyFactionCollection.TryGetFactionByTag(System.String)">
            <summary>
            Tries get faction with provided tag
            </summary>
            <param name="tag">Tag of faction</param>
            <returns>Faction or null</returns>
        </member>
        <member name="M:VRage.Game.ModAPI.IMyFactionCollection.TryGetFactionByName(System.String)">
            <summary>
            Tries get faction with provided name
            </summary>
            <param name="name">Name of faction</param>
            <returns>Faction or null</returns>
        </member>
        <member name="M:VRage.Game.ModAPI.IMyFactionCollection.GetRelationBetweenFactions(System.Int64,System.Int64)">
            <summary>
            Gets relation between 2 factions
            </summary>
            <param name="factionId1">Faction id</param>
            <param name="factionId2">Faction id</param>
            <returns>Relation enum</returns>
        </member>
        <member name="M:VRage.Game.ModAPI.IMyFactionCollection.GetReputationBetweenFactions(System.Int64,System.Int64)">
            <summary>
            Gets reputation between 2 factions
            </summary>
            <param name="factionId1">Faction id</param>
            <param name="factionId2">Faction id</param>
            <returns>Reputation</returns>
        </member>
        <member name="M:VRage.Game.ModAPI.IMyFactionCollection.SetReputation(System.Int64,System.Int64,System.Int32)">
            <summary>
            Sets reputation between 2 factions
            Note: Faction 1 always has same reputation to Faction 2, as Faction 2 to Faction 1
            </summary>
            <param name="fromFactionId">Faction 1</param>
            <param name="toFactionId">Faction 2</param>
            <param name="reputation">Desired reputation</param>
        </member>
        <member name="M:VRage.Game.ModAPI.IMyFactionCollection.GetReputationBetweenPlayerAndFaction(System.Int64,System.Int64)">
            <summary>
            Gets reputation between identity and faction
            </summary>
            <param name="identityId">Player IdentityId</param>
            <param name="factionId">Faction id</param>
            <returns>Reputation</returns>
        </member>
        <member name="M:VRage.Game.ModAPI.IMyFactionCollection.SetReputationBetweenPlayerAndFaction(System.Int64,System.Int64,System.Int32)">
            <summary>
            Sets reputation between player and faction. 
            </summary>
            <param name="identityId">IdentityId</param>
            <param name="factionId">Faction Id</param>
            <param name="reputation">Desired reputation</param>
        </member>
        <member name="M:VRage.Game.ModAPI.IMyFactionCollection.AreFactionsEnemies(System.Int64,System.Int64)">
            <summary>
            Gets if factions are enemies to each other
            </summary>
            <param name="factionId1">Faction id 1</param>
            <param name="factionId2">Faction id 2</param>
            <returns></returns>
        </member>
        <member name="M:VRage.Game.ModAPI.IMyFactionCollection.IsPeaceRequestStateSent(System.Int64,System.Int64)">
            <summary>
            Gets if there is peace request sent
            </summary>
            <param name="myFactionId"></param>
            <param name="foreignFactionId"></param>
            <returns></returns>
        </member>
        <member name="M:VRage.Game.ModAPI.IMyFactionCollection.RemoveFaction(System.Int64)">
            <summary>
            Remove faction by id
            </summary>
            <param name="factionId">Faction id</param>
        </member>
        <member name="M:VRage.Game.ModAPI.IMyFactionCollection.SendPeaceRequest(System.Int64,System.Int64)">
            <summary>
            Send peace request from one faction to another
            </summary>
            <param name="fromFactionId">From faction</param>
            <param name="toFactionId">To faction</param>
        </member>
        <member name="M:VRage.Game.ModAPI.IMyFactionCollection.CancelPeaceRequest(System.Int64,System.Int64)">
            <summary>
            Cancel peace request from one faction to another
            </summary>
            <param name="fromFactionId">From faction</param>
            <param name="toFactionId">To faction</param>
        </member>
        <member name="M:VRage.Game.ModAPI.IMyFactionCollection.AcceptPeace(System.Int64,System.Int64)">
            <summary>
            Accepts peace
            </summary>
            <param name="fromFactionId">Faction that sent peace request</param>
            <param name="toFactionId">Faction that received peace request</param>
        </member>
        <member name="M:VRage.Game.ModAPI.IMyFactionCollection.DeclareWar(System.Int64,System.Int64)">
            <summary>
            Declare war
            </summary>
            <param name="fromFactionId">Faction that declares war</param>
            <param name="toFactionId">Faction that receive war declaration</param>
        </member>
        <member name="M:VRage.Game.ModAPI.IMyFactionCollection.SendJoinRequest(System.Int64,System.Int64)">
            <summary>
            Send faction join request
            </summary>
            <param name="factionId">Faction to join</param>
            <param name="playerId">Player Identity Id</param>
        </member>
        <member name="M:VRage.Game.ModAPI.IMyFactionCollection.CancelJoinRequest(System.Int64,System.Int64)">
            <summary>
            Cancels player faction join request
            </summary>
            <param name="factionId">Faction to join</param>
            <param name="playerId">Player that sent join request</param>
        </member>
        <member name="M:VRage.Game.ModAPI.IMyFactionCollection.AcceptJoin(System.Int64,System.Int64)">
            <summary>
            Accepts faction join request
            </summary>
            <param name="factionId">Faction that accepts join</param>
            <param name="playerId">Player id</param>
        </member>
        <member name="M:VRage.Game.ModAPI.IMyFactionCollection.KickMember(System.Int64,System.Int64)">
            <summary>
            Kicks member from faction
            </summary>
            <param name="factionId">Faction that has player</param>
            <param name="playerId">Player IdentityId to kick</param>
        </member>
        <member name="M:VRage.Game.ModAPI.IMyFactionCollection.PromoteMember(System.Int64,System.Int64)">
            <summary>
            Promotes faction member
            </summary>
            <param name="factionId">Faction that has player</param>
            <param name="playerId">Player IdentityId to promote</param>
        </member>
        <member name="M:VRage.Game.ModAPI.IMyFactionCollection.DemoteMember(System.Int64,System.Int64)">
            <summary>
            Demote faction member
            </summary>
            <param name="factionId">Faction that has player</param>
            <param name="playerId">Player IdentityId to demote</param>
        </member>
        <member name="M:VRage.Game.ModAPI.IMyFactionCollection.MemberLeaves(System.Int64,System.Int64)">
            <summary>
            Forces member to leave
            </summary>
            <param name="factionId">Faction that has player</param>
            <param name="playerId">Player IdentityId to force leave</param>
        </member>
        <member name="E:VRage.Game.ModAPI.IMyFactionCollection.FactionAutoAcceptChanged">
            <summary>
            Called when faction <see cref="P:VRage.Game.ModAPI.IMyFaction.AutoAcceptMember"/> and <see cref="P:VRage.Game.ModAPI.IMyFaction.AutoAcceptPeace"/> changed
            </summary>
        </member>
        <member name="M:VRage.Game.ModAPI.IMyFactionCollection.ChangeAutoAccept(System.Int64,System.Int64,System.Boolean,System.Boolean)">
            <summary>
            Changes AutoAccept for faction
            </summary>
            <param name="factionId">Faction Id</param>
            <param name="playerId">Player IdentityId</param>
            <param name="autoAcceptMember">New value of faction <see cref="P:VRage.Game.ModAPI.IMyFaction.AutoAcceptMember"/></param>
            <param name="autoAcceptPeace">New value of faction <see cref="P:VRage.Game.ModAPI.IMyFaction.AutoAcceptPeace"/></param>
        </member>
        <member name="E:VRage.Game.ModAPI.IMyFactionCollection.FactionEdited">
            <summary>
            Called when faction somehow changes.
            </summary>
        </member>
        <member name="M:VRage.Game.ModAPI.IMyFactionCollection.EditFaction(System.Int64,System.String,System.String,System.String,System.String)">
            <summary>
            Edits faction
            </summary>
            <param name="factionId">FactionId that should be changed</param>
            <param name="tag">New faction tag</param>
            <param name="name">New faction name</param>
            <param name="desc">New faction description</param>
            <param name="privateInfo">New faction private info</param>
        </member>
        <member name="M:VRage.Game.ModAPI.IMyFactionCollection.EditFaction(System.Int64,System.String,System.String,System.String,System.String,System.String,VRageMath.Vector3,VRageMath.Vector3)">
            <summary>
            Edits faction
            </summary>
            <param name="factionId">FactionId that should be changed</param>
            <param name="tag">New faction tag</param>
            <param name="name">New faction name</param>
            <param name="desc">New faction description</param>
            <param name="privateInfo">New faction private info</param>
            <param name="icon">Faction icon image</param>
            <param name="factionColor">Faction color (background of icon)</param>
            <param name="factionIconColor">Faction icon color</param>
        </member>
        <member name="M:VRage.Game.ModAPI.IMyFactionCollection.CreateFaction(System.Int64,System.String,System.String,System.String,System.String)">
            <summary>
            Creates new faction with faction type <see ref="MyFactionTypes.None"/>.
            Obsolete. Use <see cref="M:VRage.Game.ModAPI.IMyFactionCollection.CreateFactionNew(System.Int64,System.String,System.String,System.String,System.String,System.String)"/>
            </summary>
            <param name="founderId">IdentityId of faction founder</param>
            <param name="tag">Faction tag</param>
            <param name="name">Faction name</param>
            <param name="desc">Faction description</param>
            <param name="privateInfo">Faction private info</param>
            <remarks>You should use <see cref="M:VRage.Game.ModAPI.IMyFactionCollection.CreateFaction(System.Int64,System.String,System.String,System.String,System.String,VRage.Game.MyFactionTypes)"/> if you want to create a faction with different type (<see ref="MyFactionTypes.PlayerMade"/>). </remarks>
        </member>
        <member name="M:VRage.Game.ModAPI.IMyFactionCollection.CreateFaction(System.Int64,System.String,System.String,System.String,System.String,VRage.Game.MyFactionTypes)">
            <summary>
            Creates new faction
            Obsolete. Use <see cref="M:VRage.Game.ModAPI.IMyFactionCollection.CreateFactionNew(System.Int64,System.String,System.String,System.String,System.String,System.String)"/>
            </summary>
            <param name="founderId">IdentityId of faction founder</param>
            <param name="tag">Faction tag</param>
            <param name="name">Faction name</param>
            <param name="desc">Faction description</param>
            <param name="privateInfo">Faction private info</param>
            <param name="type">Faction type</param>
        </member>
        <member name="M:VRage.Game.ModAPI.IMyFactionCollection.CreateFactionNew(System.Int64,System.String,System.String,System.String,System.String,System.String)">
            <summary>
            Creates new faction
            </summary>
            <param name="founderId">IdentityId of faction founder</param>
            <param name="tag">Faction tag</param>
            <param name="name">Faction name</param>
            <param name="desc">Faction description</param>
            <param name="privateInfo">Faction private info</param>
            <param name="type">Faction type (FactionTypes_Economy.sbc Id/Subtype), not null. You can use MyFactionTypes.?.ToString()</param>
        </member>
        <member name="M:VRage.Game.ModAPI.IMyFactionCollection.CreateNPCFaction(System.String,System.String,System.String,System.String)">
            <summary>
            Creates new faction with faction type <see cref="F:VRage.Game.MyFactionTypes.None"/>
            </summary>
            <param name="tag">Faction tag</param>
            <param name="name">Faction name</param>
            <param name="desc">Faction description</param>
            <param name="privateInfo">Faction private info</param>
        </member>
        <member name="E:VRage.Game.ModAPI.IMyFactionCollection.FactionCreated">
            <summary>
            Called when new faction created. FactionId is used as argument
            </summary>
        </member>
        <member name="M:VRage.Game.ModAPI.IMyFactionCollection.GetObjectBuilder">
            <summary>
            Gets object builder
            </summary>
            <returns>Object builder</returns>
        </member>
        <member name="P:VRage.Game.ModAPI.IMyFactionCollection.Factions">
            <summary>
            Gets new dictionary with all factions. As keys used factionId
            </summary>
        </member>
        <member name="M:VRage.Game.ModAPI.IMyFactionCollection.AddNewNPCToFaction(System.Int64)">
            <summary>
            Adds new NPC to faction. Name example: "SPRT NPC3340"
            </summary>
            <param name="factionId">Faction Id</param>
        </member>
        <member name="M:VRage.Game.ModAPI.IMyFactionCollection.AddNewNPCToFaction(System.Int64,System.String)">
            <summary>
            Adds new NPC to faction
            </summary>
            <param name="factionId">Faction Id</param>
            <param name="npcName">Name of NPC</param>
        </member>
        <member name="E:VRage.Game.ModAPI.IMyFactionCollection.FactionStateChanged">
            <summary>
            Called when on of factions changed Arguments:
            action,
            fromFactionId, faction Id
            toFactionId, faction Id, or 0
            playerId - IdentityId on whom action was applied, or 0
            senderId - IdentityId who triggered state change, or 0
            </summary>
        </member>
        <member name="E:VRage.Game.ModAPI.IMyFactionCollection.ReputationChanged">
            <summary>
            Called when a reputation change is applied between an identity and a faction
            </summary>
        </member>
        <member name="T:VRage.Game.ModAPI.IMyFloatingObject">
            <summary>
            Describes floating object (mods interface)
            </summary>
        </member>
        <member name="T:VRage.Game.ModAPI.IMyGamePaths">
            <summary>
            ModAPI interface that, giving you information about most important game paths 
            </summary>
        </member>
        <member name="P:VRage.Game.ModAPI.IMyGamePaths.ContentPath">
            <summary>
            Return path, where original SE content folder is located. Example: D:\SteamLibrary\steamapps\common\SpaceEngineers\Content
            </summary>
        </member>
        <member name="P:VRage.Game.ModAPI.IMyGamePaths.ModsPath">
            <summary>
            Return path, where SE mod folder is located. Example: C:\Users\{USERNAME}\AppData\Roaming\SpaceEngineers\Mods
            </summary>
        </member>
        <member name="P:VRage.Game.ModAPI.IMyGamePaths.UserDataPath">
            <summary>
            Return path, where SE user folder is located. Example: C:\Users\{USERNAME}\AppData\Roaming\SpaceEngineers
            </summary>
        </member>
        <member name="P:VRage.Game.ModAPI.IMyGamePaths.SavesPath">
            <summary>
            Return path, where SE user saves path is located. Example: C:\Users\{USERNAME}\AppData\Roaming\SpaceEngineers\Saves
            </summary>
        </member>
        <member name="P:VRage.Game.ModAPI.IMyGamePaths.ModScopeName">
            <summary>
            Gets the calling mod's assembly ScopeName. This name is used in storage paths (eg. 1234567.sbm_TypeName).
            </summary>
        </member>
        <member name="T:VRage.Game.ModAPI.IMyGps">
            <summary>
            Describes GPS (mods interface) 
            </summary>
        </member>
        <member name="P:VRage.Game.ModAPI.IMyGps.Hash">
            <summary>
            The GPS entry id hash which is generated using the GPS name and coordinates.
            </summary>
        </member>
        <member name="M:VRage.Game.ModAPI.IMyGps.UpdateHash">
            <summary>
            Updates the hash id if you've changed the name or the coordinates.
            NOTE: Do not use this if you plan on using this object to update existing GPS entries.
            </summary>
        </member>
        <member name="P:VRage.Game.ModAPI.IMyGps.Name">
            <summary>
            Gets or sets GPS name
            </summary>
            <remarks>Set method doesn't synchronize data over network. Use <see cref="M:VRage.Game.ModAPI.IMyGpsCollection.ModifyGps(System.Int64,VRage.Game.ModAPI.IMyGps)"/>, to update data</remarks>
        </member>
        <member name="P:VRage.Game.ModAPI.IMyGps.Description">
            <summary>
            Gets or sets GPS description
            </summary>
            <remarks>Set method doesn't synchronize data over network. Use <see cref="M:VRage.Game.ModAPI.IMyGpsCollection.ModifyGps(System.Int64,VRage.Game.ModAPI.IMyGps)"/>, to update data</remarks>
        </member>
        <member name="P:VRage.Game.ModAPI.IMyGps.Coords">
            <summary>
            Gets or sets GPS coordinates
            </summary>
            <remarks>Set method doesn't synchronize data over network. Use <see cref="M:VRage.Game.ModAPI.IMyGpsCollection.ModifyGps(System.Int64,VRage.Game.ModAPI.IMyGps)"/>, to update data</remarks>
        </member>
        <member name="P:VRage.Game.ModAPI.IMyGps.GPSColor">
            <summary>
            Gets or sets GPS color
            </summary>
            <remarks>Set method doesn't synchronize data over network. Use <see cref="M:VRage.Game.ModAPI.IMyGpsCollection.ModifyGps(System.Int64,VRage.Game.ModAPI.IMyGps)"/>, to update data</remarks>
        </member>
        <member name="P:VRage.Game.ModAPI.IMyGps.ShowOnHud">
            <summary>
            Gets or sets whether GPS should be visible on HUD
            </summary>
            <remarks>Set method doesn't synchronize data over network. Use <see cref="M:VRage.Game.ModAPI.IMyGpsCollection.ModifyGps(System.Int64,VRage.Game.ModAPI.IMyGps)"/>, to update data</remarks>
        </member>
        <member name="P:VRage.Game.ModAPI.IMyGps.DiscardAt">
            <summary>
            If it's null then the GPS is confirmed (does not expire automatically).
            Otherwise, time at which we should drop it from the list, relative to ElapsedPlayTime
            </summary>
            <remarks>Set method doesn't synchronize data over network. Use <see cref="M:VRage.Game.ModAPI.IMyGpsCollection.ModifyGps(System.Int64,VRage.Game.ModAPI.IMyGps)"/>, to update data</remarks>
        </member>
        <member name="M:VRage.Game.ModAPI.IMyGps.ToString">
            <summary>
            Gets information about GPS
            </summary>
            <returns>String, same that user gets on `Copy to clipboard`</returns>
            <remarks>Set method doesn't synchronize data over network. Use <see cref="M:VRage.Game.ModAPI.IMyGpsCollection.ModifyGps(System.Int64,VRage.Game.ModAPI.IMyGps)"/>, to update data</remarks>
        </member>
        <member name="P:VRage.Game.ModAPI.IMyGps.ContainerRemainingTime">
            <summary>
            Gets or sets gps text that would be displayed on HUD
            </summary>
            <remarks>Set method doesn't synchronize data over network. Use <see cref="M:VRage.Game.ModAPI.IMyGpsCollection.ModifyGps(System.Int64,VRage.Game.ModAPI.IMyGps)"/>, to update data</remarks>
        </member>
        <member name="M:VRage.Game.ModAPI.IMyGpsCollection.GetGpsList(System.Int64)">
            <summary>
            Gets the GPS entries from the specified identity (does not use network traffic).
            </summary>
            <param name="identityId">Players IdentityId</param>
            <returns>The GPS entry list.</returns>
        </member>
        <member name="M:VRage.Game.ModAPI.IMyGpsCollection.GetGpsList(System.Int64,System.Collections.Generic.List{VRage.Game.ModAPI.IMyGps})">
            <summary>
            Gets the GPS entries from the specified identity (does not use network traffic).
            </summary>
            <param name="identityId">Players IdentityId</param>
            <param name="list">GPS entries will be added to this list. The list is not cleared internally.</param>
        </member>
        <member name="M:VRage.Game.ModAPI.IMyGpsCollection.Create(System.String,System.String,VRageMath.Vector3D,System.Boolean,System.Boolean)">
            <summary>
            Creates a GPS entry object. Does not automatically add it, you need to use AddGps() or AddLocalGps().
            </summary>
            <param name="name">Name of GPS</param>
            <param name="description">Description of GPS</param>
            <param name="coords">GPS coordinates</param>
            <param name="showOnHud">Should gps be visible to player</param>
            <param name="temporary">whether it automatically expires or not (DiscardAt field)</param>
            <returns>GPS object</returns>
        </member>
        <member name="M:VRage.Game.ModAPI.IMyGpsCollection.AddGps(System.Int64,VRage.Game.ModAPI.IMyGps)">
            <summary>
            Sends a network request to add the GPS entry for the said player, which will also save it to the server.
            </summary>
            <param name="identityId">Players IdentityId</param>
            <param name="gps">Use the Create() method to get this object</param>
        </member>
        <member name="M:VRage.Game.ModAPI.IMyGpsCollection.ModifyGps(System.Int64,VRage.Game.ModAPI.IMyGps)">
            <summary>
            Sends a network request to modify the contents of an existing GPS entry.
            </summary>
            <param name="identityId">Players IdentityId</param>
            <param name="gps">NOTE: it must contain the original hash id</param>
        </member>
        <member name="M:VRage.Game.ModAPI.IMyGpsCollection.RemoveGps(System.Int64,VRage.Game.ModAPI.IMyGps)">
            <summary>
            Sends a network request to remove the specified GPS entry.
            </summary>
            <param name="identityId">Players IdentityId</param>
            <param name="gps">GPS</param>
        </member>
        <member name="M:VRage.Game.ModAPI.IMyGpsCollection.RemoveGps(System.Int64,System.Int32)">
            <summary>
            Sends a network request to remove the specified GPS entry.
            </summary>
            <param name="identityId">Players IdentityId</param>
            <param name="gpsHash"><see cref="P:VRage.Game.ModAPI.IMyGps.Hash"/></param>
        </member>
        <member name="M:VRage.Game.ModAPI.IMyGpsCollection.SetShowOnHud(System.Int64,VRage.Game.ModAPI.IMyGps,System.Boolean)">
            <summary>
            Sends a network request to set the GPS entry if it's shown on HUD or not.
            </summary>
            <param name="identityId">Players IdentityId</param>
            <param name="gps">GPS</param>
            <param name="show">Shows on hud</param>
        </member>
        <member name="M:VRage.Game.ModAPI.IMyGpsCollection.SetShowOnHud(System.Int64,System.Int32,System.Boolean)">
            <summary>
            Sends a network request to set the GPS entry if it's shown on HUD or not.
            </summary>
            <param name="identityId">Players IdentityId</param>
            <param name="gpsHash">Hash of gps</param>
            <param name="show">When true, gps should be shown on Hud</param>
        </member>
        <member name="M:VRage.Game.ModAPI.IMyGpsCollection.AddLocalGps(VRage.Game.ModAPI.IMyGps)">
            <summary>
            Adds a GPS entry only for this client which won't be synchronized or saved.
            </summary>
            <param name="gps">GPS</param>
        </member>
        <member name="M:VRage.Game.ModAPI.IMyGpsCollection.RemoveLocalGps(VRage.Game.ModAPI.IMyGps)">
            <summary>
            Remove a local GPS entry, no network updates sent.
            
            NOTE: This can remove synchronized ones too.
            </summary>
            <param name="gps">GPS</param>
        </member>
        <member name="M:VRage.Game.ModAPI.IMyGpsCollection.RemoveLocalGps(System.Int32)">
            <summary>
            Remove a local GPS entry, no network updates sent.
            
            NOTE: This can remove synchronized ones too.
            </summary>
            <param name="gpsHash"><see cref="P:VRage.Game.ModAPI.IMyGps.Hash"/></param>
        </member>
        <member name="T:VRage.Game.ModAPI.IMyGravityProviderSystem">
            <summary>
            Describes gravity ModAPI
            </summary>
        </member>
        <member name="M:VRage.Game.ModAPI.IMyGravityProviderSystem.AddNaturalGravity(VRageMath.Vector3D,System.Double,System.Double,System.Double,System.Double)">
            <summary>
            Adds natural gravity to a position.
            </summary>
            <param name="position">Position coordinates at the center of the natural gravity</param>
            <param name="minRadius">Minimum gravity radius before gravity intensity begins to decrease</param>
            <param name="maxRadius">Max gravity radius at lowest intensity</param>
            <param name="falloff">Gravity falloff between minRadius and maxRadius</param>
            <param name="intensity">Gravity strength</param>
        </member>
        <member name="M:VRage.Game.ModAPI.IMyGravityProviderSystem.AddNaturalGravityToEntity(VRage.ModAPI.IMyEntity,System.Double,System.Double,System.Double,System.Double)">
            <summary>
            Adds natural gravity to an entity.
            </summary>
            <param name="entity">The entity you're adding gravity to</param>
            <param name="minRadius">Minimum gravity radius before gravity intensity begins to decrease</param>
            <param name="maxRadius">Max gravity radius at lowest intensity</param>
            <param name="falloff">Gravity falloff between minRadius and maxRadius</param>
            <param name="intensity">Gravity strength</param>
        </member>
        <member name="M:VRage.Game.ModAPI.IMyGravityProviderSystem.AddNaturalModAPI(VRageMath.Vector3D,VRage.Game.ModAPI.IMyModAPINaturalGravityImplementation)">
            <summary>
            Adds natural gravity to a position.
            </summary>
            <param name="position">Position coordinates at the center of the natural gravity</param>
            <param name="implementation">ModAPI custom gravity provider</param>
        </member>
        <member name="M:VRage.Game.ModAPI.IMyGravityProviderSystem.AddNaturalModAPIGravityToEntity(VRage.ModAPI.IMyEntity,VRage.Game.ModAPI.IMyModAPINaturalGravityImplementation)">
            <summary>
            Adds natural gravity to an entity.
            </summary>
            <param name="entity">The entity you're adding gravity to</param>
            <param name="implementation">Minimum gravity radius before gravity intensity begins to decrease</param>
        </member>
        <member name="M:VRage.Game.ModAPI.IMyGravityProviderSystem.CalculateArtificialGravityInPoint(VRageMath.Vector3D)">
            <summary>
            Provides a vector of all artificial gravity at a set of coordinates.
            </summary>
            <param name="worldPoint">Position coordinates to check</param>
            <returns></returns>
        </member>
        <member name="M:VRage.Game.ModAPI.IMyGravityProviderSystem.CalculateHighestNaturalGravityMultiplierInPoint(VRageMath.Vector3D)">
            <summary>
            Provides the highest natural gravity multiplier at a set of coordinates.
            </summary>
            <param name="worldPoint">Position coordinates to check</param>
            <returns></returns>
        </member>
        <member name="M:VRage.Game.ModAPI.IMyGravityProviderSystem.CalculateNaturalGravityInPoint(VRageMath.Vector3D,System.Single@)">
            <summary>
            Calculates all natural gravity at provided coordinates, returns gravity vector, and outputs gravity multiplier
            </summary>
            <param name="worldPoint">Position coordinates to check</param>
            <param name="naturalGravityMultiplier">Gravity multiplier output</param>
            <returns></returns>
        </member>
        <member name="M:VRage.Game.ModAPI.IMyGravityProviderSystem.CalculateNaturalGravityInPoint(VRageMath.Vector3D)">
            <summary>
            Provides a vector of all natural gravity at a set of coordinates.
            </summary>
            <param name="worldPoint">Position coordinates to check</param>
            <returns></returns>
        </member>
        <member name="M:VRage.Game.ModAPI.IMyGravityProviderSystem.CalculateTotalGravityInPoint(VRageMath.Vector3D)">
            <summary>
            Provides a vector of all natural and artificial gravity at a sec of coordinates.
            </summary>
            <param name="worldPoint">Position coordinates to check</param>
            <returns></returns>
        </member>
        <member name="M:VRage.Game.ModAPI.IMyGravityProviderSystem.DoesEntityHaveGravityProvider(VRage.ModAPI.IMyEntity)">
            <summary>
            Determines if a provided entity is generating gravity (artificial or natural).
            </summary>
            <param name="entity">Entity to check for gravity</param>
            <returns></returns>
        </member>
        <member name="M:VRage.Game.ModAPI.IMyGravityProviderSystem.DoesTrajectoryIntersectNaturalGravity(VRageMath.Vector3D,VRageMath.Vector3D,System.Double)">
            <summary>
            Checks if the specified trajectory intersects any natural gravity wells.
            </summary>
            <param name="start">Starting point of the trajectory.</param>
            <param name="end">Destination of the trajectory.</param>
            <param name="raySize">Size of the ray to test with. (Cylinder test)</param>
            <returns></returns>
        </member>
        <member name="M:VRage.Game.ModAPI.IMyGravityProviderSystem.IsPositionInNaturalGravity(VRageMath.Vector3D,System.Double)">
            <summary>
            This quickly checks if a given position is in any natural gravity.
            </summary>
            <param name="position">Position to check</param>
            <param name="sphereSize">Sphere size to test with.</param>
            <returns>True if there is natural gravity at this position, false otherwise.</returns>
        </member>
        <member name="M:VRage.Game.ModAPI.IMyGravityProviderSystem.GetStrongestNaturalGravityWell(VRageMath.Vector3D,VRage.Game.ModAPI.IMyNaturalGravityComponent@)">
            <summary>
            Determines the strongest natural gravity source at a given set of coordinates.
            </summary>
            <param name="worldPosition">Position coordinates to check</param>
            <param name="nearestProvider">Outputs the strongest natural gravity component detected</param>
            <returns>Gravity intensity value</returns>
        </member>
        <member name="M:VRage.Game.ModAPI.IMyGravityProviderSystem.RemoveNaturalGravity(VRage.Game.ModAPI.IMyNaturalGravityComponent)">
            <summary>
            Removes the natural gravity component provided.
            </summary>
            <param name="gravity">Natural gravity component to remove.</param>
        </member>
        <member name="M:VRage.Game.ModAPI.IMyGravityProviderSystem.RemoveNaturalGravityFromEntity(VRage.ModAPI.IMyEntity)">
            <summary>
            Removes the natural gravity from a provided entity.
            </summary>
            <param name="entity">The entity you're removing natural gravity from.</param>
        </member>
        <member name="T:VRage.Game.ModAPI.IMyGridControlSystem">
            <summary>
            ModAPI interface giving access to grid-group control system
            </summary>
        </member>
        <member name="P:VRage.Game.ModAPI.IMyGridControlSystem.IsControlled">
            <summary>
            Gets whether grid-group is controlled
            </summary>
        </member>
        <member name="P:VRage.Game.ModAPI.IMyGridControlSystem.CurrentShipController">
            <summary>
            Gets the controllable entity of the ship controller currently controlling the grid. Can cast its Entity property to IMyShipController
            </summary>
        </member>
        <member name="E:VRage.Game.ModAPI.IMyGridControlSystem.IsControlledChanged">
            <summary>
            Called when <see cref="P:VRage.Game.ModAPI.IMyGridControlSystem.IsControlled"/> changed. Invoked with grid main grid that 
            </summary>
        </member>
        <member name="T:VRage.Game.ModAPI.IMyGridGasSystem">
            <summary>
            ModAPI interface giving access to grid-group gas system
            </summary>
        </member>
        <member name="M:VRage.Game.ModAPI.IMyGridGasSystem.GetRooms(System.Collections.Generic.List{VRage.Game.ModAPI.IMyOxygenRoom})">
            <summary>
            Gets all oxygen rooms on the grid
            </summary>
        </member>
        <member name="P:VRage.Game.ModAPI.IMyGridGasSystem.IsProcessingData">
            <summary>
            Returns true if the grid is currently recalculating airtightness (It's multithreaded)
            </summary>
        </member>
        <member name="M:VRage.Game.ModAPI.IMyGridGasSystem.GetOxygenRoomForCubeGridPosition(VRageMath.Vector3I@)">
            <summary>
            Returns an oxygen room at the position if there is one
            </summary>
        </member>
        <member name="M:VRage.Game.ModAPI.IMyGridGasSystem.GetOxygenBlock(VRageMath.Vector3D)">
            <summary>
            Returns an oxygen block at the position if there is one
            </summary>
        </member>
        <member name="P:VRage.Game.ModAPI.IMyGridGasSystem.ForcePressurize">
            <summary>
            Specifies if the grid should be able to pressurize without air vents present.
            </summary>
        </member>
        <member name="P:VRage.Game.ModAPI.IMyGridGasSystem.OnProcessingDataComplete">
            <summary>
            Called when ProcessingData becomes false
            </summary>
        </member>
        <member name="P:VRage.Game.ModAPI.IMyGridGasSystem.OnProcessingDataStart">
            <summary>
            Called when ProcessingData becomes true
            </summary>
        </member>
        <member name="T:VRage.Game.ModAPI.IMyGridGroupData">
            <summary>
            A class that presenting connection between grids 
            WARNING: you must not keep link to instance or you have to remove link when event OnReleased is fired
            Use Get/SetVariable to store data in GridGroups. Variables are cleared after OnRelease is fired
            </summary>
        </member>
        <member name="E:VRage.Game.ModAPI.IMyGridGroupData.OnGridAdded">
            <summary>
            First MyGridGroupData(this) - where grid would be added
            Second MyGridGroupData(Nullable) - previous grid group of grid 
            </summary>
        </member>
        <member name="E:VRage.Game.ModAPI.IMyGridGroupData.OnGridRemoved">
             <summary>
             First MyGridGroupData(this) - from where grid was removed
             Second MyGridGroupData(Nullable) - where grid group would be added
            
             Called after Keen OnAdded logic, like MyGridLogicalGroupData.OnNodeAdded
             </summary>
        </member>
        <member name="E:VRage.Game.ModAPI.IMyGridGroupData.OnReleased">
            <summary>
            You must clean your subscriptions here. Instances of IMyGridGroupData are re-used in ObjectPool.
            At the time event is called it has no grids attached to it.
            </summary>
        </member>
        <member name="P:VRage.Game.ModAPI.IMyGridGroupData.LinkType">
            <summary>
            Get connection type
            </summary>
        </member>
        <member name="M:VRage.Game.ModAPI.IMyGridGroupData.GetGrids``1(``0)">
            <summary>
            Gets grids in this grid-group
            </summary>
            <param name="grids">Collection, that would receive grids</param>
            <typeparam name="T">Generic type of collection</typeparam>
            <returns>Grids stored in provided collection</returns>
        </member>
        <member name="M:VRage.Game.ModAPI.IMyGridGroupData.TryGetVariable``1(System.Guid,``0@)">
            <summary>
            Gets memory-stored variable
            </summary>
            <param name="key">Key to access variable in dictionary</param>
            <param name="variable">Variable that stored by key, or default value for type T (null)</param>
            <typeparam name="T">Type of stored value</typeparam>
            <returns>True, when variable found, false when not</returns>
            <remarks>Strongly recommended to define GUID in sbc file, but that is not required</remarks>
        </member>
        <member name="M:VRage.Game.ModAPI.IMyGridGroupData.GetVariable``1(System.Guid)">
            <summary>
            Gets memory-stored variable
            </summary>
            <param name="key">Key to access variable in dictionary</param>
            <typeparam name="T">Type of stored value</typeparam>
            <returns>Variable that stored by key, or default value for type T (null)</returns>
            <remarks>Strongly recommended to define GUID in sbc file, but that is not required</remarks>
        </member>
        <member name="M:VRage.Game.ModAPI.IMyGridGroupData.SetVariable(System.Guid,System.Object)">
            <summary>
            Sets memory-stored variable
            </summary>
            <param name="key">Key to access variable in dictionary</param>
            <param name="data">Stored variable</param>
            <remarks>Strongly recommended to define GUID in sbc file, but that is not required</remarks>
        </member>
        <member name="M:VRage.Game.ModAPI.IMyGridGroupData.RemoveVariable(System.Guid)">
            <summary>
            Removes stored variable
            </summary>
            <param name="key">Key to access variable in dictionary</param>
            <returns>True, if removed</returns>
        </member>
        <member name="T:VRage.Game.ModAPI.GridLinkTypeEnum">
            <summary>
            Defines different link types for grid groups.
            </summary>
        </member>
        <member name="F:VRage.Game.ModAPI.GridLinkTypeEnum.Logical">
            <summary>
            Terminal connections. i.e. rotors, pistons, wheels. Includes Mechanical connections.
            </summary>
        </member>
        <member name="F:VRage.Game.ModAPI.GridLinkTypeEnum.Physical">
            <summary>
            Connections which lock physics. i.e. connectors. Includes Logical and Mechanical connections.
            </summary>
        </member>
        <member name="F:VRage.Game.ModAPI.GridLinkTypeEnum.NoContactDamage">
            <summary>
            Connections which lock physics, but do not connect terminals. Landing gear only.
            </summary>
        </member>
        <member name="F:VRage.Game.ModAPI.GridLinkTypeEnum.Mechanical">
            <summary>
            Connections by rotor, piston, suspension.
            </summary>
        </member>
        <member name="F:VRage.Game.ModAPI.GridLinkTypeEnum.Electrical">
            <summary>
            Connections by rotor, piston, suspension and connectors if they transfer energy.
            </summary>
        </member>
        <member name="T:VRage.Game.ModAPI.IMyGridGroups">
            <summary>
            ModAPI interface giving access to grid-groups
            </summary>
        </member>
        <member name="M:VRage.Game.ModAPI.IMyGridGroups.GetGroup(VRage.Game.ModAPI.IMyCubeGrid,VRage.Game.ModAPI.GridLinkTypeEnum)">
            <summary>
            OBSOLETE: Use GetGroup with passing your own collection, it is better for simulation speed. Returns all grids connected to the given grid by the specified link type. Array always contains node.
            </summary>
            <param name="node">One of grid group</param>
            <param name="type">Type of linking</param>
            <returns>New list of connected grids</returns>
        </member>
        <member name="M:VRage.Game.ModAPI.IMyGridGroups.GetGroup(VRage.Game.ModAPI.IMyCubeGrid,VRage.Game.ModAPI.GridLinkTypeEnum,System.Collections.Generic.ICollection{VRage.Game.ModAPI.IMyCubeGrid})">
            <summary>
            Returns all grids connected to the given grid by the specified link type. Array always contains node.
            </summary>
            <param name="node">One of grid </param>
            <param name="type">Type of grid linking</param>
            <param name="collection">Collection where connected grids would be added</param>
        </member>
        <member name="M:VRage.Game.ModAPI.IMyGridGroups.HasConnection(VRage.Game.ModAPI.IMyCubeGrid,VRage.Game.ModAPI.IMyCubeGrid,VRage.Game.ModAPI.GridLinkTypeEnum)">
            <summary>
            Checks if two grids are connected by the given link type.
            </summary>
            <param name="grid1">Grid 1</param>
            <param name="grid2">Grid 2</param>
            <param name="type">Type of connection</param>
            <returns>True when 2 grids connected with specified grid linking</returns>
        </member>
        <member name="E:VRage.Game.ModAPI.IMyGridGroups.OnGridGroupCreated">
            <summary>
            Called when new grid-group was created.
            Example 1: 1 large grid-group splitted into 2 parts.
            Example 2: new grid created
            </summary>
        </member>
        <member name="E:VRage.Game.ModAPI.IMyGridGroups.OnGridGroupDestroyed">
            <summary>
            Called when grid-group was destroyed.
            Example 1: 2 small grids-groups joined into larger one.
            Example 2: grid, not connected to any other grid, was destroyed
            </summary>
        </member>
        <member name="M:VRage.Game.ModAPI.IMyGridGroups.GetGridGroup(VRage.Game.ModAPI.GridLinkTypeEnum,VRage.Game.ModAPI.IMyCubeGrid)">
            <summary>
            Gets grid-group for provided grid
            </summary>
            <param name="linking">Type of linking</param>
            <param name="grid">One part of grid-group</param>
            <returns>Grid group interface</returns>
        </member>
        <member name="M:VRage.Game.ModAPI.IMyGridGroups.GetGridGroups``1(VRage.Game.ModAPI.GridLinkTypeEnum,``0)">
            <summary>
            Gets all grid groups, that exists in the world
            </summary>
            <param name="linking">Type of linking</param>
            <param name="grids">Collection would be filled with results</param>
            <typeparam name="T">Type of collection</typeparam>
            <returns>Provided collection</returns>
        </member>
        <member name="M:VRage.Game.ModAPI.IMyGridGroups.AddGridGroupLogic``1(VRage.Game.ModAPI.GridLinkTypeEnum,System.Func{VRage.Game.ModAPI.IMyGridGroupData,``0})">
            <summary>
            Generates <see cref="T:VRage.Game.ModAPI.MyGridGroupsDefaultEventHandler"/> each time grid group connected with provided linking is created
            </summary>
            <param name="type">Type of linking</param>
            <param name="creator">Function that creates grid group logic</param>
            <typeparam name="T">Type of grid group logic</typeparam>
        </member>
        <member name="M:VRage.Game.ModAPI.IMyGridGroups.FindConnection(VRage.Game.ModAPI.GridLinkTypeEnum,VRage.Game.ModAPI.IMyCubeGrid,System.Func{VRage.Game.ModAPI.IMyCubeGrid,VRage.Game.ModAPI.IMyCubeGrid,System.Int64,System.Boolean})">
            <summary>
            Dijkstra search  over grid-to-grid connections until searcher is return true
            NOTE: pretty expensive function on large grid-groups, don't call it often.
            </summary>
            <param name="linking">Type of grid-group connection</param>
            <param name="from">Initial grid, from which search would start</param>
            <param name="searcher">When this function returns true - search is stopped, and result is returned.
            <para>First arg - new grid</para>
            <para>Second - previous grid</para>
            <para>Last - block, that creates connection between those 2 grids. Note: There could be only one block per Grid-Grid connection</para>
            <para>Note: first call would be called with (from, null, 0)</para>
            </param>
            <returns>
            <para>Null if linking is <paramref name="linking"/> is incorrect.</para>
            <para>Null if <paramref name="searcher"/> hasn't returned true.</para>
            <para>Otherwise list of connections, where long is block entityId, and IMyCubeGrid - grid, where search is hopped</para>
            <para>Note: first element would be always (from, 0)</para>
            </returns>
        </member>
        <member name="T:VRage.Game.ModAPI.IMyGridJumpDriveSystem">
            <summary>
            Interface for MyGridJumpDriveSystem in IMyCubeGrid
            </summary>
        </member>
        <member name="P:VRage.Game.ModAPI.IMyGridJumpDriveSystem.IsJumping">
            <summary>
            True if the grid is in the animation to jump
            </summary>
        </member>
        <member name="P:VRage.Game.ModAPI.IMyGridJumpDriveSystem.Jumped">
            <summary>
            True when the grid finally teleports
            </summary>
        </member>
        <member name="M:VRage.Game.ModAPI.IMyGridJumpDriveSystem.GetJumpDriveDirection">
            <summary>
            Gets the direction vector the jump will occur (includes magnitude)
            </summary>
        </member>
        <member name="M:VRage.Game.ModAPI.IMyGridJumpDriveSystem.GetJumpDriveDirectionNormalized">
            <summary>
            Gets the normalized direction the jump will occur
            </summary>
        </member>
        <member name="M:VRage.Game.ModAPI.IMyGridJumpDriveSystem.GetJumpDriveTarget">
            <summary>
            Gets the target position the jump is attempting to reach
            </summary>
        </member>
        <member name="M:VRage.Game.ModAPI.IMyGridJumpDriveSystem.GetRemainingJumpTime">
            <summary>
            Gets the time until the jump finally occurs
            </summary>
        </member>
        <member name="M:VRage.Game.ModAPI.IMyGridJumpDriveSystem.GetMinJumpDistance(System.Int64)">
            <summary>
            Gets the minimum possible jump distance with the current loadout
            </summary>
            <param name="userId">IdentityId, that using using jump drive</param>
        </member>
        <member name="M:VRage.Game.ModAPI.IMyGridJumpDriveSystem.GetMaxJumpDistance(System.Int64)">
            <summary>
            Gets the maximum possible jump distance with the current loadout
            </summary>
            <param name="userId">IdentityId, that using using jump drive</param>
        </member>
        <member name="M:VRage.Game.ModAPI.IMyGridJumpDriveSystem.IsJumpValid(System.Int64)">
            <summary>
            True if the grid could jump (does not check obstacles)
            </summary>
            <param name="userId">IdentityId, that using using jump drive</param>
        </member>
        <member name="M:VRage.Game.ModAPI.IMyGridJumpDriveSystem.FindSuitableJumpLocation(VRageMath.Vector3D)">
            <summary>
            Gets a safe position at the desired location (not overlapping stuff)
            </summary>
        </member>
        <member name="M:VRage.Game.ModAPI.IMyGridJumpDriveSystem.Jump(VRageMath.Vector3D,System.Int64,System.Single)">
            <summary>
            Makes the grid begin the jumping sequence (Call on server only!)
            </summary>
            <param name="jumpTarget">World coordinates of place where you jumping</param>
            <param name="userId">IdentityId, that using using jump drive</param>
            <param name="jumpDriveDelay">Delay in seconds before jump</param>
        </member>
        <member name="M:VRage.Game.ModAPI.IMyGridJumpDriveSystem.PerformJump(VRageMath.Vector3D)">
            <summary>
            Performs a jump without the delay or animation (Call on server only!)
            </summary>
        </member>
        <member name="M:VRage.Game.ModAPI.IMyGridJumpDriveSystem.RequestJump(System.String,VRageMath.Vector3D,System.Int64,System.Nullable{VRageMath.BoundingBoxD},System.Single,System.Nullable{System.Int64})">
            <summary>
            Requests the pilot or local player to jump (Prompts the pilot with the jump UI, they can cancel the jump or say yes)
            </summary>
            <param name="destinationName">Name of place where you jumping</param>
            <param name="destination">World coordinates of place where you jumping</param>
            <param name="userId">IdentityId, that using using jump drive</param>
            <param name="shipBox">Bounding box of ship in world coordinates that would be used in gravity check</param>
            <param name="jumpDriveDelay">Delay in seconds before jump</param>
            <param name="driveEntityId">Optional EntityId of the jump drive that requested the jump. It will be used for visual and sound effects.</param>
        </member>
        <member name="M:VRage.Game.ModAPI.IMyGridJumpDriveSystem.RequestJump(VRageMath.Vector3D,System.Int64,System.Single,System.Nullable{System.Int64})">
            <summary>
            Requests the pilot or local player to jump (Prompts the pilot with the jump UI, they can cancel the jump or say yes)
            </summary>
            <param name="jumpTarget">World coordinates of place where you jumping</param>
            <param name="userId">IdentityId, that using using jump drive</param>
            <param name="jumpDriveDelay">Delay in seconds before jump</param>
            <param name="driveEntityId">Optional EntityId of the jump drive that requested the jump. It will be used for visual and sound effects.</param>
        </member>
        <member name="M:VRage.Game.ModAPI.IMyGridJumpDriveSystem.AbortJump(System.Int32)">
            <summary>
            Ends the jump for the provided reason
            0 = None, 1 = Static, 2 = Locked, 3 = ShortDistance, 4 = AlreadyJumping, 5 = NoLocation, 6 = Other
            </summary>
        </member>
        <member name="T:VRage.Game.ModAPI.IMyGridWeaponSystem">
            <summary>
            ModAPI interface giving access to grid-group weapon system
            </summary>
        </member>
        <member name="M:VRage.Game.ModAPI.IMyGridWeaponSystem.GetGun(VRage.Game.MyDefinitionId)">
            <summary>
            Get first found gun object with specified definition id.
            </summary>
            <param name="defId"></param>
            <returns></returns>
        </member>
        <member name="M:VRage.Game.ModAPI.IMyGridWeaponSystem.Register(VRage.Game.ModAPI.IMyGunObject{VRage.Game.ModAPI.MyDeviceBase})">
            <summary>
            Registers gun in weapon system. Required for being able to use it as a ship tool or weapon: `Left mouse hold to shoot`
            </summary>
            <param name="gun">Interface representing gun</param>
        </member>
        <member name="M:VRage.Game.ModAPI.IMyGridWeaponSystem.Unregister(VRage.Game.ModAPI.IMyGunObject{VRage.Game.ModAPI.MyDeviceBase})">
            <summary>
            Unregisters gun in weapon system. 
            </summary>
            <param name="gun"></param>
        </member>
        <member name="T:VRage.Game.ModAPI.IMyGui">
            <summary>
            ModAPI interface giving access to GUI
            </summary>
        </member>
        <member name="E:VRage.Game.ModAPI.IMyGui.GuiControlCreated">
            <summary>
            Event triggered on gui control created.
            </summary>
        </member>
        <member name="E:VRage.Game.ModAPI.IMyGui.GuiControlRemoved">
            <summary>
            Event triggered on gui control removed.
            </summary>
        </member>
        <member name="P:VRage.Game.ModAPI.IMyGui.ActiveGamePlayScreen">
            <summary>
            Gets the name of the currently open GUI screen.
            </summary>
        </member>
        <member name="P:VRage.Game.ModAPI.IMyGui.InteractedEntity">
            <summary>
            Gets the entity the player is currently interacting with.
            </summary>
        </member>
        <member name="P:VRage.Game.ModAPI.IMyGui.GetCurrentScreen">
            <summary>
            Gets an enum describing the currently open GUI screen.
            </summary>
        </member>
        <member name="P:VRage.Game.ModAPI.IMyGui.ChatEntryVisible">
            <summary>
            Checks if the chat entry box is visible.
            </summary>
        </member>
        <member name="P:VRage.Game.ModAPI.IMyGui.IsCursorVisible">
            <summary>
            Checks if the cursor is visible.
            </summary>
        </member>
        <member name="M:VRage.Game.ModAPI.IMyGui.ShowTerminalPage(VRage.Game.ModAPI.MyTerminalPageEnum,VRage.Game.ModAPI.IMyCharacter,VRage.ModAPI.IMyEntity,System.Boolean)">
            <summary>
            Shows the terminal and opens a specific tab.
            </summary>
            <param name="page">Tab to open.</param>
            <param name="user">The user that will interact with the terminal.</param>
            <param name="interactedEntity">The entity the terminal page will be shown for. <see langword="null"/> for player.</param>
            <param name="isRemote">If terminal refers to a remote entity (over antenna).</param>
        </member>
        <member name="M:VRage.Game.ModAPI.IMyGui.ChangeInteractedEntity(VRage.ModAPI.IMyEntity,System.Boolean)">
            <summary>
            Switches the entity the terminal is activated for.
            </summary>
            <param name="interactedEntity">The entity the terminal page will be shown for. <see langword="null"/> for player.</param>
            <param name="isRemote">If terminal refers to a remote entity (over antenna).</param>
        </member>
        <member name="T:VRage.Game.ModAPI.MyGunStatusEnum">
            <summary>
            When attempting to fire a gun, a status from this enum will be returned.
            </summary>
        </member>
        <member name="F:VRage.Game.ModAPI.MyGunStatusEnum.OK">
            <summary>
            Gun is capable of shooting
            </summary>
        </member>
        <member name="F:VRage.Game.ModAPI.MyGunStatusEnum.Cooldown">
            <summary>
            Gun is cooling down after previous shooting
            </summary>
        </member>
        <member name="F:VRage.Game.ModAPI.MyGunStatusEnum.OutOfPower">
            <summary>
            Gun does not have enough power to shoot
            </summary>
        </member>
        <member name="F:VRage.Game.ModAPI.MyGunStatusEnum.NotFunctional">
            <summary>
            Gun is damaged beyond functionality
            </summary>
        </member>
        <member name="F:VRage.Game.ModAPI.MyGunStatusEnum.OutOfAmmo">
            <summary>
            Gun does not have ammo
            </summary>
        </member>
        <member name="F:VRage.Game.ModAPI.MyGunStatusEnum.Disabled">
            <summary>
            Gun is disabled by player
            </summary>
        </member>
        <member name="F:VRage.Game.ModAPI.MyGunStatusEnum.Failed">
            <summary>
            Any other reason not given here
            </summary>
        </member>
        <member name="F:VRage.Game.ModAPI.MyGunStatusEnum.NotSelected">
            <summary>
            No gun was selected, so nothing could shoot
            </summary>
        </member>
        <member name="F:VRage.Game.ModAPI.MyGunStatusEnum.AccessDenied">
            <summary>
            Shooter does not not have access to the weapon
            </summary>
        </member>
        <member name="F:VRage.Game.ModAPI.MyGunStatusEnum.BurstLimit">
            <summary>
            whole burst fired, re-press the trigger
            </summary>
        </member>
        <member name="F:VRage.Game.ModAPI.MyGunStatusEnum.SafeZoneDenied">
            <summary>
            Disabled in safezone
            </summary>
        </member>
        <member name="F:VRage.Game.ModAPI.MyGunStatusEnum.Reloading">
            <summary>
            Gun currently reloading
            </summary>
        </member>
        <member name="F:VRage.Game.ModAPI.MyGunStatusEnum.NotCharged">
            <summary>
            Gun is charging energy
            </summary>
        </member>
        <member name="T:VRage.Game.ModAPI.IMyGunObject`1">
            <summary>
            This can be hand held weapon (including welders and drills) as well as 
            weapons on ship (including ship drills).
            </summary>
        </member>
        <member name="P:VRage.Game.ModAPI.IMyGunObject`1.BackkickForcePerSecond">
            <summary>
            Gets force in Newtons.
            </summary>
            <remarks>Not related to modders. Modders should return zero</remarks>
        </member>
        <member name="P:VRage.Game.ModAPI.IMyGunObject`1.ShakeAmount">
            <summary>
            Gets shake amount of grid, when 
            </summary>
            <remarks>Not related to modders. Modders should return zero</remarks>
        </member>
        <member name="P:VRage.Game.ModAPI.IMyGunObject`1.DefinitionId">
            <summary>
            Gets block definition id
            </summary>
        </member>
        <member name="P:VRage.Game.ModAPI.IMyGunObject`1.EnabledInWorldRules">
            <summary>
            Gets if enabled by world rules (<see cref="P:VRage.Game.ModAPI.IMySession.WeaponsEnabled"/>)
            </summary>
        </member>
        <member name="P:VRage.Game.ModAPI.IMyGunObject`1.GunBase">
            <summary>
            Gets class that extends from <see cref="T:VRage.Game.ModAPI.MyDeviceBase"/>. It could be MyToolBase, MyGunBase or even custom logic.
            Keep in mind, that some functions works differently for tools, gun or custom logic. 
            </summary>
        </member>
        <member name="P:VRage.Game.ModAPI.IMyGunObject`1.IsSkinnable">
            <summary>
            Gets if character weapon/tool is skinnable
            </summary>
        </member>
        <member name="P:VRage.Game.ModAPI.IMyGunObject`1.IsTargetLockingCapable">
            <summary>
            Gets if device can lock targets. (Warfare 2 feature)
            </summary>
        </member>
        <member name="M:VRage.Game.ModAPI.IMyGunObject`1.DirectionToTarget(VRageMath.Vector3D)">
            <summary>
            Gets direction vector (normalized) between device and provided target vector. Used for character devices
            </summary>
            <param name="target">Target vector in world coordinates</param>
            <returns>Normalized direction between device position and provided vector</returns>
        </member>
        <member name="M:VRage.Game.ModAPI.IMyGunObject`1.CanShoot(VRage.Game.ModAPI.MyShootActionEnum,System.Int64,VRage.Game.ModAPI.MyGunStatusEnum@)">
            <summary>
            Should return true if and only if the gun would be able to shoot using the given shoot action.
            This method should not do any side-effects such as play sounds or create particle FX.
            </summary>
            <param name="action">The shooting action to test</param>
            <param name="shooter">Id of shooting player</param>
            <param name="status">Detailed status of the gun, telling why the gun couldn't perform the given shoot action</param>
            <returns></returns>
        </member>
        <member name="M:VRage.Game.ModAPI.IMyGunObject`1.Shoot(VRage.Game.ModAPI.MyShootActionEnum,VRageMath.Vector3,System.Nullable{VRageMath.Vector3D},System.String)">
            <summary>
            Perform the shoot action according to the action parameter.
            This method should only be called when CanShoot returns true for the given action!
            </summary>
            <param name="action">The shooting action to perform</param>
            <param name="overrideWeaponPos">Changes weapon position, world space.</param>
            <param name="direction">The prefered direction of shooting</param>
            <param name="gunAction">Always null</param>
        </member>
        <member name="M:VRage.Game.ModAPI.IMyGunObject`1.GetShootDirection">
            <summary>
            Direction where gun is shooting
            </summary>
            <returns></returns>
        </member>
        <member name="M:VRage.Game.ModAPI.IMyGunObject`1.BeginShoot(VRage.Game.ModAPI.MyShootActionEnum)">
            <summary>
            Called when device start shooting
            </summary>
            <param name="action">Type if shooting</param>
        </member>
        <member name="M:VRage.Game.ModAPI.IMyGunObject`1.EndShoot(VRage.Game.ModAPI.MyShootActionEnum)">
            <summary>
            Called when device stop shooting
            </summary>
            <param name="action">Type if shooting</param>
        </member>
        <member name="P:VRage.Game.ModAPI.IMyGunObject`1.IsShooting">
            <summary>
            Should return true when the weapon is shooting projectiles and other classes should react accordingly (i.e.apply backkick force etc.)
            </summary>
        </member>
        <member name="P:VRage.Game.ModAPI.IMyGunObject`1.ShootDirectionUpdateTime">
            <summary>
            Zero means that the gun should not update shoot direction at all
            </summary>
            <returns>Minimal time interval in milliseconds between two direction updates</returns>
        </member>
        <member name="P:VRage.Game.ModAPI.IMyGunObject`1.NeedsShootDirectionWhileAiming">
            <summary>
            Whether this gun needs the shoot direction at all times. Guns that do not will have their direction 
            </summary>
        </member>
        <member name="P:VRage.Game.ModAPI.IMyGunObject`1.MaximumShotLength">
            <summary>
            Zero means that the gun should not update shoot direction at all
            </summary>
            <returns>Minimal time interval in milliseconds between two direction updates</returns>
        </member>
        <member name="M:VRage.Game.ModAPI.IMyGunObject`1.BeginFailReaction(VRage.Game.ModAPI.MyShootActionEnum,VRage.Game.ModAPI.MyGunStatusEnum)">
            <summary>
            Perform a fail reaction to begin shoot that is shown on all clients (e.g. fail sound, etc.)
            </summary>
            <param name="action">The shooting action, whose begin shoot failed</param>
            <param name="status">Why the begin shoot failed</param>
        </member>
        <member name="M:VRage.Game.ModAPI.IMyGunObject`1.BeginFailReactionLocal(VRage.Game.ModAPI.MyShootActionEnum,VRage.Game.ModAPI.MyGunStatusEnum)">
            <summary>
            Perform a fail reaction to begin shoot that is shown only on client that controls character or ship, that has this device
            </summary>
            <param name="action">The shooting action, whose begin shoot failed</param>
            <param name="status">Why the begin shoot failed</param>
        </member>
        <member name="M:VRage.Game.ModAPI.IMyGunObject`1.ShootFailReactionLocal(VRage.Game.ModAPI.MyShootActionEnum,VRage.Game.ModAPI.MyGunStatusEnum)">
            <summary>
            Perform a fail reaction to during shooting that is shown only on client that controls character or ship, that has this device
            </summary>
            <param name="action">The shooting action, whose shooting failed</param>
            <param name="status">Why the shooting failed</param>
        </member>
        <member name="M:VRage.Game.ModAPI.IMyGunObject`1.GetTotalAmmunitionAmount">
            <summary>
            Gets total ammunition count: <see cref="M:VRage.Game.ModAPI.IMyGunObject`1.GetAmmunitionAmount"/> + <see cref="M:VRage.Game.ModAPI.IMyGunObject`1.GetMagazineAmount"/> * Magazine.Capacity
            </summary>
            <returns>Total ammunition amount</returns>
        </member>
        <member name="M:VRage.Game.ModAPI.IMyGunObject`1.GetAmmunitionAmount">
            <summary>
            Gets current ammunition left before reloading
            </summary>
            <returns>Ammunition amount</returns>
        </member>
        <member name="M:VRage.Game.ModAPI.IMyGunObject`1.GetMagazineAmount">
            <summary>
            Gets magazines amount
            </summary>
            <returns>Magazines amount</returns>
        </member>
        <member name="M:VRage.Game.ModAPI.IMyGunObject`1.OnControlAcquired(VRage.Game.ModAPI.IMyCharacter)">
            <summary>
            Called when control over device acquired
            </summary>
            <param name="owner">Controlling character</param>
        </member>
        <member name="M:VRage.Game.ModAPI.IMyGunObject`1.OnControlReleased">
            <summary>
            Called when control over device lost
            </summary>
        </member>
        <member name="M:VRage.Game.ModAPI.IMyGunObject`1.DrawHud(VRage.Game.ModAPI.Interfaces.IMyCameraController,System.Int64)">
            <summary>
            When device is selected, this method is called in Draw thread. Example: welder shows info about what block it welds.
            </summary>
            <param name="camera">Current camera</param>
            <param name="playerId">Player that controls device</param>
        </member>
        <member name="M:VRage.Game.ModAPI.IMyGunObject`1.DrawHud(VRage.Game.ModAPI.Interfaces.IMyCameraController,System.Int64,System.Boolean)">
            <summary>
            When device is selected, this method is called in Draw thread. 
            </summary>
            <param name="camera">Current camera</param>
            <param name="playerId">Player that controls device</param>
            <param name="fullUpdate">True when should update internal cache</param>
        </member>
        <member name="M:VRage.Game.ModAPI.IMyGunObject`1.UpdateSoundEmitter">
            <summary>
            If device has sound emmiter(s), it(they) should be updated
            </summary>
        </member>
        <member name="M:VRage.Game.ModAPI.IMyGunObject`1.SupressShootAnimation">
            <summary>
             When too close to object and hands shouldn't be extended
            </summary>
            <returns>True if too close</returns>
        </member>
        <member name="M:VRage.Game.ModAPI.IMyGunObject`1.GetMuzzlePosition">
            <summary>
            Gets muzzle world position
            </summary>
            <returns>Position of muzzle in world coordinates</returns>
        </member>
        <member name="M:VRage.Game.ModAPI.IMyGunObject`1.IsToolbarUsable">
            <summary>
            Returns true if can be used with LMB/RMB like drills
            </summary>
            <returns>True if can be used with LMB/RMB like drills</returns>
        </member>
        <member name="T:VRage.Game.ModAPI.IMyHudNotification">
            <summary>
            Describes interface of notification (mods interface)
            </summary>
        </member>
        <member name="P:VRage.Game.ModAPI.IMyHudNotification.Text">
            <summary>
            Get or set the notification text.
            Setting the text will immediately update it if the notification is shown.
            </summary>
        </member>
        <member name="P:VRage.Game.ModAPI.IMyHudNotification.Font">
            <summary>
            Get or set the font for this notification.
            Setting it will immediately update it if the notification is shown.
            </summary>
        </member>
        <member name="P:VRage.Game.ModAPI.IMyHudNotification.AliveTime">
            <summary>
            Get or set the time for the notification to be shown, in milliseconds.
            </summary>
        </member>
        <member name="M:VRage.Game.ModAPI.IMyHudNotification.Show">
            <summary>
            Shows the notification on the HUD.
            </summary>
        </member>
        <member name="M:VRage.Game.ModAPI.IMyHudNotification.Hide">
            <summary>
            Hides the notification on the HUD even if it was supposed to show for longer.
            </summary>
        </member>
        <member name="M:VRage.Game.ModAPI.IMyHudNotification.ResetAliveTime">
            <summary>
            Reset the alive time for the text.
            This is called when setting AliveTime as well.
            </summary>
        </member>
        <member name="T:VRage.Game.ModAPI.IMyHudObjectiveLine">
            <summary>
            Describes interface of notification (mods interface)
            </summary>
        </member>
        <member name="P:VRage.Game.ModAPI.IMyHudObjectiveLine.Visible">
            <summary>
            Gets if visible
            </summary>
        </member>
        <member name="P:VRage.Game.ModAPI.IMyHudObjectiveLine.Title">
            <summary>
            Gets or sets title
            </summary>
        </member>
        <member name="P:VRage.Game.ModAPI.IMyHudObjectiveLine.CurrentObjective">
            <summary>
            Gets current objective text
            </summary>
        </member>
        <member name="M:VRage.Game.ModAPI.IMyHudObjectiveLine.Show">
            <summary>
            Shows objective
            </summary>
        </member>
        <member name="M:VRage.Game.ModAPI.IMyHudObjectiveLine.Hide">
            <summary>
            Hides 
            </summary>
        </member>
        <member name="M:VRage.Game.ModAPI.IMyHudObjectiveLine.AdvanceObjective">
            <summary>
            Moves to next objective
            </summary>
        </member>
        <member name="P:VRage.Game.ModAPI.IMyHudObjectiveLine.Objectives">
            <summary>
            Gets or sets objectives
            </summary>
        </member>
        <member name="T:VRage.Game.ModAPI.IMyIdentity">
            <summary>
            Describes player or bot (mods interface)
            </summary>
        </member>
        <member name="E:VRage.Game.ModAPI.IMyIdentity.CharacterChanged">
            <summary>
            Triggered when the player's character changes.
            </summary>
            <remarks>First Action argument is old character; second is new character.</remarks>
        </member>
        <member name="P:VRage.Game.ModAPI.IMyIdentity.IdentityId">
            <summary>
            Player's unique identity id.
            </summary>
            <remarks>This will change when the player dies with permadeath enabled.</remarks>
        </member>
        <member name="P:VRage.Game.ModAPI.IMyIdentity.DisplayName">
            <summary>
            Name of player.
            </summary>
        </member>
        <member name="P:VRage.Game.ModAPI.IMyIdentity.Model">
            <summary>
            Gets the model the player is using.
            </summary>
        </member>
        <member name="P:VRage.Game.ModAPI.IMyIdentity.ColorMask">
            <summary>
            The player's model color mask
            </summary>
        </member>
        <member name="P:VRage.Game.ModAPI.IMyIdentity.IsDead">
            <summary>
            Gets if the player is dead
            </summary>
        </member>
        <member name="T:VRage.Game.ModAPI.IMyInventory">
            <summary>
            Describes inventory interface (PB scripting interface)
            You can cast if MyInventory for getting more functionality
            </summary>
        </member>
        <member name="P:VRage.Game.ModAPI.IMyInventory.Owner">
            <summary>
            Returns entity this inventory belongs to.
            </summary>
        </member>
        <member name="M:VRage.Game.ModAPI.IMyInventory.Empty">
            <summary>
            Gets if inventory is empty
            </summary>
            <returns>Try if there is no items</returns>
        </member>
        <member name="M:VRage.Game.ModAPI.IMyInventory.Clear(System.Boolean)">
            <summary>
            Remove all items from inventory
            </summary>
            <param name="sync">If you need send clear event for clients too</param>
        </member>
        <member name="M:VRage.Game.ModAPI.IMyInventory.CanAddItemAmount(VRage.Game.ModAPI.IMyInventoryItem,VRage.MyFixedPoint)">
            <summary>
            Gets whether item could be added into inventory, but doesn't add it
            Checks:
            - Inserting volume
            - Inventory can receive items
            - Inventory filter can 
            </summary>
            <param name="item">Item that you want to add</param>
            <param name="amount">Amount of items</param>
            <returns>True if item can be added</returns>
        </member>
        <member name="M:VRage.Game.ModAPI.IMyInventory.AddItems(VRage.MyFixedPoint,VRage.Game.MyObjectBuilder_PhysicalObject,System.Int32)">
            <summary>
            Adds item to inventory. Doesn't do all checks inside. Call <see cref="M:VRage.Game.ModAPI.IMyInventory.CanAddItemAmount(VRage.Game.ModAPI.IMyInventoryItem,VRage.MyFixedPoint)"/> before this function 
            </summary>
            <param name="amount">Amount of items</param>
            <param name="objectBuilder">Builder of item to add</param>
            <param name="index">Position to add, starting from 0</param>
        </member>
        <member name="M:VRage.Game.ModAPI.IMyInventory.RemoveItemsOfType(VRage.MyFixedPoint,VRage.Game.MyObjectBuilder_PhysicalObject,System.Boolean)">
            <summary>
            Removes amount for specified item type from inventory
            </summary>
            <param name="amount">Amount of items should be removed</param>
            <param name="objectBuilder">Item type to remove</param>
            <param name="spawn">Should be removed items be spawned as floating items</param>
        </member>
        <member name="M:VRage.Game.ModAPI.IMyInventory.RemoveItemsOfType(VRage.MyFixedPoint,VRage.ObjectBuilders.SerializableDefinitionId,VRage.Game.MyItemFlags,System.Boolean)">
            <summary>
            Removes amount for specified item type from inventory
            </summary>
            <param name="amount">Amount of items</param>
            <param name="contentId">Item id</param>
            <param name="flags">Not supported. Use <see cref="F:VRage.Game.MyItemFlags.None"/></param>
            <param name="spawn">Should be removed items be spawned as floating items</param>
        </member>
        <member name="M:VRage.Game.ModAPI.IMyInventory.RemoveItemsAt(System.Int32,System.Nullable{VRage.MyFixedPoint},System.Boolean,System.Boolean)">
            <summary>
            Removes items at exact inventory index
            </summary>
            <param name="itemIndex">Starting from 0</param>
            <param name="amount">Amount to remove or null. When null whole item stack would be removed</param>
            <param name="sendEvent">Should synchronize to clients or not</param>
            <param name="spawn">Should spawn as floating object or not</param>
        </member>
        <member name="M:VRage.Game.ModAPI.IMyInventory.RemoveItems(System.UInt32,System.Nullable{VRage.MyFixedPoint},System.Boolean,System.Boolean)">
            <summary>
            Removes item by itemId
            </summary>
            <param name="itemId">Item id of item you want to remove. See <see ref="IMyInventoryItem.ItemId"/></param>
            <param name="amount">Amount to remove or null. When null whole item stack would be removed</param>
            <param name="sendEvent">Should synchronize to clients or not</param>
            <param name="spawn">Should spawn as floating object or not</param>
        </member>
        <member name="M:VRage.Game.ModAPI.IMyInventory.RemoveItemAmount(VRage.Game.ModAPI.IMyInventoryItem,VRage.MyFixedPoint)">
            <summary>
            Remove 
            </summary>
            <param name="item">Item to remove</param>
            <param name="amount">Amount to remove</param>
        </member>
        <member name="M:VRage.Game.ModAPI.IMyInventory.TransferItemTo(VRage.Game.ModAPI.IMyInventory,System.Int32,System.Nullable{System.Int32},System.Nullable{System.Boolean},System.Nullable{VRage.MyFixedPoint},System.Boolean)">
            <summary>
            Transfer item from one inventory to another
            </summary>
            <param name="dst">Inventory that would receive item</param>
            <param name="sourceItemIndex">This inventory index</param>
            <param name="targetItemIndex">Dst inventory item index. You may use null, to add to existing stack, or as last item</param>
            <param name="stackIfPossible">When false, would add always create new item stack</param>
            <param name="amount">Transferred item amount</param>
            <param name="checkConnection">Check if two inventories connected with conveyor needed size</param>
            <returns>True if checkConnection is false, or inventories are connected with correct conveyor</returns>
        </member>
        <member name="M:VRage.Game.ModAPI.IMyInventory.TransferItemFrom(VRage.Game.ModAPI.IMyInventory,System.Int32,System.Nullable{System.Int32},System.Nullable{System.Boolean},System.Nullable{VRage.MyFixedPoint},System.Boolean)">
            <summary>
            Transfer item from one inventory to another
            </summary>
            <param name="sourceInventory">Inventory that would give item</param>
            <param name="sourceItemIndex">Index of item in inventory that would give item</param>
            <param name="targetItemIndex">Index of item in this inventory. You may use null, to add to existing stack, or as last item</param>
            <param name="stackIfPossible">When false, would add always create new item stack</param>
            <param name="amount">Transferred item amount</param>
            <param name="checkConnection">Check if two inventories connected with conveyor needed size</param>
            <returns>True if checkConnection is false, or inventories are connected with correct conveyor</returns>
        </member>
        <member name="M:VRage.Game.ModAPI.IMyInventory.TransferItemFrom(VRage.Game.ModAPI.IMyInventory,VRage.Game.ModAPI.IMyInventoryItem,VRage.MyFixedPoint)">
            <summary>
            Transfer item from one inventory to another
            </summary>
            <param name="sourceInventory">Inventory that would give item</param>
            <param name="item">Item in sourceInventory</param>
            <param name="amount">Transferred item amount</param>
            <returns>True if two inventories are connected</returns>
            <remarks>Items could be transferred only through conveyors</remarks>
        </member>
        <member name="M:VRage.Game.ModAPI.IMyInventory.GetItemByID(System.UInt32)">
            <summary>
            Gets item by id
            </summary>
            <param name="id">Id of items</param>
            <returns>Item</returns>
        </member>
        <member name="M:VRage.Game.ModAPI.IMyInventory.FindItem(VRage.ObjectBuilders.SerializableDefinitionId)">
            <summary>
            Finds first item stack, whose content matching provided id 
            </summary>
            <param name="contentId">Definition id. Example MyObjectBuilder</param>
            <returns>Item</returns>
        </member>
        <member name="E:VRage.Game.ModAPI.IMyInventory.OnVolumeChanged">
            <summary>
            Triggers when volume of the inventory is changed
            </summary>
        </member>
        <member name="P:VRage.Game.ModAPI.IMyInventory.CanPutItems">
            <summary>
            Gets or sets if inventory can receive items or not.
            </summary>
        </member>
        <member name="T:VRage.Game.ModAPI.IMyInventoryItem">
            <summary>
            Describes item stack in inventory (mod interface)
            </summary>
        </member>
        <member name="T:VRage.Game.ModAPI.IMyModel">
            <summary>
            Describes 3D model (mods interface)
            </summary>
        </member>
        <member name="P:VRage.Game.ModAPI.IMyModel.UniqueId">
            <summary>
            Gets id of model
            </summary>
        </member>
        <member name="P:VRage.Game.ModAPI.IMyModel.DataVersion">
            <summary>
            Get version of model
            </summary>
        </member>
        <member name="P:VRage.Game.ModAPI.IMyModel.BoundingSphere">
            <summary>
            Gets bounding sphere
            </summary>
        </member>
        <member name="P:VRage.Game.ModAPI.IMyModel.BoundingBox">
            <summary>
            Gets bounding box
            </summary>
        </member>
        <member name="P:VRage.Game.ModAPI.IMyModel.BoundingBoxSize">
            <summary>
            Gets bounding box size
            </summary>
        </member>
        <member name="P:VRage.Game.ModAPI.IMyModel.BoundingBoxSizeHalf">
            <summary>
            Gets bounding box size
            </summary>
        </member>
        <member name="P:VRage.Game.ModAPI.IMyModel.PatternScale">
            <summary>
            Used in texturing of armor blocks. Default is 1
            </summary>
        </member>
        <member name="P:VRage.Game.ModAPI.IMyModel.ScaleFactor">
            <summary>
            Scale of model. Default 1. Greater number - bigger model
            </summary>
        </member>
        <member name="P:VRage.Game.ModAPI.IMyModel.AssetName">
            <summary>
            File path of the model
            </summary>
        </member>
        <member name="M:VRage.Game.ModAPI.IMyModel.GetTrianglesCount">
            <summary>
            Gets amount of triangles
            </summary>
            <returns>Amount of triangles</returns>
        </member>
        <member name="M:VRage.Game.ModAPI.IMyModel.GetVerticesCount">
            <summary>
            Gets amount of vertices
            </summary>
            <returns>Amount of vertices</returns>
        </member>
        <member name="M:VRage.Game.ModAPI.IMyModel.GetDummies(System.Collections.Generic.IDictionary{System.String,VRage.Game.ModAPI.IMyModelDummy})">
            <summary>
            Gets the dummies from the model
            </summary>
            <param name="dummies">Dictionary of dummies, can be null to just return count</param>
            <returns>Number of dummies in model</returns>
        </member>
        <member name="M:VRage.Game.ModAPI.IMyModel.GetTriangle(System.Int32)">
            <summary>
            Gets the vertex indices that complete a triangle at the index
            </summary>
            <param name="triangleIndex">Index of triangle</param>
            <returns>Struct with 3 indexes of vertices</returns>
        </member>
        <member name="M:VRage.Game.ModAPI.IMyModel.GetDrawTechnique(System.Int32)">
            <summary>
            Gets <see cref="T:VRageRender.Import.MyMeshDrawTechnique"/> by triangle index
            </summary>
            <param name="triangleIndex">Index of triangle</param>
            <returns>Draw technique</returns>
        </member>
        <member name="M:VRage.Game.ModAPI.IMyModel.GetVertex(System.Int32)">
            <summary>
            Gets the vertex
            </summary>
        </member>
        <member name="M:VRage.Game.ModAPI.IMyModel.GetVertex(System.Int32,System.Int32,System.Int32,VRageMath.Vector3@,VRageMath.Vector3@,VRageMath.Vector3@)">
            <summary>
            Gets a set of three vertices
            </summary>
            <param name="vertexIndex1">Vertex index 1</param>
            <param name="vertexIndex2">Vertex index 2</param>
            <param name="vertexIndex3">Vertex index 3</param>
            <param name="v1">Vertex value at index 1</param>
            <param name="v2">Vertex value at index 2</param>
            <param name="v3">Vertex value at index 3</param>
        </member>
        <member name="T:VRage.Game.ModAPI.IMyMultiplayer">
            <summary>
            ModAPI interface giving access to interaction between server and client
            </summary>
        </member>
        <member name="P:VRage.Game.ModAPI.IMyMultiplayer.MultiplayerActive">
            <summary>
            Gets if game supports several people
            </summary>
        </member>
        <member name="P:VRage.Game.ModAPI.IMyMultiplayer.IsServer">
            <summary>
            Returns if current game instance is server
            </summary>
        </member>
        <member name="P:VRage.Game.ModAPI.IMyMultiplayer.ServerId">
            <summary>
            Gets id (steamId or other) of server 
            </summary>
        </member>
        <member name="P:VRage.Game.ModAPI.IMyMultiplayer.MyId">
            <summary>
            Gets this game instance id (steamId or other)
            </summary>
        </member>
        <member name="P:VRage.Game.ModAPI.IMyMultiplayer.MyName">
            <summary>
            Get current player name
            </summary>
        </member>
        <member name="P:VRage.Game.ModAPI.IMyMultiplayer.Players">
            <summary>
            Gets players currently connected to server
            </summary>
        </member>
        <member name="M:VRage.Game.ModAPI.IMyMultiplayer.IsServerPlayer(VRage.Game.ModAPI.IMyNetworkClient)">
            <summary>
            Gets if provided network is a player and also server 
            </summary>
            <param name="player">Player to test if he is server</param>
            <returns>True if provided network is a player and also server </returns>
        </member>
        <member name="M:VRage.Game.ModAPI.IMyMultiplayer.SendEntitiesCreated(System.Collections.Generic.List{VRage.ObjectBuilders.MyObjectBuilder_EntityBase})">
            <summary>
            Does nothing
            </summary>
            <param name="objectBuilders">Ignored</param>
        </member>
        <member name="M:VRage.Game.ModAPI.IMyMultiplayer.SendMessageToServer(System.UInt16,System.Byte[],System.Boolean)">
            <summary>
            Send message to server
            </summary>
            <param name="id">Some random number from 0-65535, that you use in <see cref="M:VRage.Game.ModAPI.IMyMultiplayer.RegisterSecureMessageHandler(System.UInt16,System.Action{System.UInt16,System.Byte[],System.UInt64,System.Boolean})"/>. Dont use beautiful numbers like 11111, 22222. You may conflict with other mods.</param>
            <param name="message">Byte data. Use <see cref="M:VRage.Game.ModAPI.IMyUtilities.SerializeToBinary``1(``0)"/></param>
            <param name="reliable">When false, message may not arrive to client, but faster. They also may come in different order, that they have been sent. Unreliable messages are also limited by 1024 bytes.</param>
            <returns>True if message was sent</returns>
        </member>
        <member name="M:VRage.Game.ModAPI.IMyMultiplayer.SendMessageToOthers(System.UInt16,System.Byte[],System.Boolean)">
            <summary>
            Send message to everyone on server (including server)
            </summary>
            <param name="id">Some random number from 0-65535, that you use in <see cref="M:VRage.Game.ModAPI.IMyMultiplayer.RegisterSecureMessageHandler(System.UInt16,System.Action{System.UInt16,System.Byte[],System.UInt64,System.Boolean})"/>. Dont use beautiful numbers like 11111, 22222. You may conflict with other mods.</param>
            <param name="message">Byte data. Use <see cref="M:VRage.Game.ModAPI.IMyUtilities.SerializeToBinary``1(``0)"/></param>
            <param name="reliable">When false, message may not arrive to client, but faster. Unreliable messages are also limited by 1024 bytes.</param>
            <returns>True if message was sent</returns>
        </member>
        <member name="M:VRage.Game.ModAPI.IMyMultiplayer.SendMessageTo(System.UInt16,System.Byte[],System.UInt64,System.Boolean)">
            <summary>
            Send message to one recipient.
            </summary>
            <param name="id">Some random number from 0-65535, that you use in <see cref="M:VRage.Game.ModAPI.IMyMultiplayer.RegisterSecureMessageHandler(System.UInt16,System.Action{System.UInt16,System.Byte[],System.UInt64,System.Boolean})"/>. Dont use beautiful numbers like 11111, 22222. You may conflict with other mods.</param>
            <param name="message">Byte data. Use <see cref="M:VRage.Game.ModAPI.IMyUtilities.SerializeToBinary``1(``0)"/></param>
            <param name="reliable">When false, message may not arrive to client, but faster. Unreliable messages are also limited by 1024 bytes.</param>
            <param name="recipient">Use <see cref="P:VRage.Game.ModAPI.IMyPlayer.SteamUserId"/>. <b>Not</b> IdentityId (long)</param>
            <returns>True if message was sent</returns>
        </member>
        <member name="M:VRage.Game.ModAPI.IMyMultiplayer.JoinServer(System.String)">
            <summary>
            Exiting current server, and joining other server
            </summary>
            <param name="address"></param>
        </member>
        <member name="M:VRage.Game.ModAPI.IMyMultiplayer.RegisterSecureMessageHandler(System.UInt16,System.Action{System.UInt16,System.Byte[],System.UInt64,System.Boolean})">
            <summary>
            Allows you do reliable checks WHO have sent message to you.
            Action - HandlerId, Package, Player SteamID or 0 for Dedicated server, Sent message comes from server
            </summary>
            <param name="id">Handler id, may be not unique, but then for each message multiple handlers would be executed</param>
            <param name="messageHandler">Call function. Arguments: handlerId, messageSentBytes, senderPlayerId, isArrivedFromServer</param>        
        </member>
        <member name="M:VRage.Game.ModAPI.IMyMultiplayer.UnregisterSecureMessageHandler(System.UInt16,System.Action{System.UInt16,System.Byte[],System.UInt64,System.Boolean})">
            <summary>
            Unsubscribes from incoming messages
            </summary>
            <param name="id">Handler id. Should be same that was registered</param>
            <param name="messageHandler">Call function. Should be same that was registered</param>
        </member>
        <member name="T:VRage.Game.ModAPI.IMySphericalNaturalGravityComponent">
            <summary>
            Describes spherical natural gravity provider
            </summary>
        </member>
        <member name="P:VRage.Game.ModAPI.IMySphericalNaturalGravityComponent.MinRadius">
            <summary>
            Minimum gravity radius before gravity intensity begins to decrease
            </summary>
        </member>
        <member name="P:VRage.Game.ModAPI.IMySphericalNaturalGravityComponent.MaxRadius">
            <summary>
            Max gravity radius at lowest intensity
            </summary>
        </member>
        <member name="P:VRage.Game.ModAPI.IMySphericalNaturalGravityComponent.Falloff">
            <summary>
            Gravity falloff between minRadius and maxRadius
            </summary>
        </member>
        <member name="P:VRage.Game.ModAPI.IMySphericalNaturalGravityComponent.Intensity">
            <summary>
            Gravity strength
            </summary>
        </member>
        <member name="T:VRage.Game.ModAPI.IMyModAPINaturalGravityComponent">
            <summary>
            Describes ModAPI any form natural gravity provider (any form, not only sphere)
            </summary>
        </member>
        <member name="P:VRage.Game.ModAPI.IMyModAPINaturalGravityComponent.Implementation">
            <summary>
            Gets implementation of gravity provider
            </summary>
        </member>
        <member name="T:VRage.Game.ModAPI.IMyModAPINaturalGravityImplementation">
            <summary>
            Describes ModAPI implementation for natural gravity provider (any form, not only sphere)
            </summary>
        </member>
        <member name="M:VRage.Game.ModAPI.IMyModAPINaturalGravityImplementation.GetWorldGravity(VRageMath.Vector3D)">
            <summary>
            Gets gravity vector
            </summary>
            <param name="worldPoint">World coordinates</param>
            <returns>Gravity vector, in meters per second</returns>
        </member>
        <member name="M:VRage.Game.ModAPI.IMyModAPINaturalGravityImplementation.GetWorldGravityNormalized(VRageMath.Vector3D)">
            <summary>
            Gets gravity vector (normalized)
            </summary>
            <param name="worldPoint">World coordinates</param>
            <returns>Gravity vector, normalized</returns>
        </member>
        <member name="M:VRage.Game.ModAPI.IMyModAPINaturalGravityImplementation.IsPositionInRange(VRageMath.Vector3D)">
            <summary>
            Tests if the specified point is within the gravity of this entity.
            </summary>
            <param name="worldPoint">Point to test</param>
            <returns><b>true</b> if in range; <b>false</b> if not</returns>
        </member>
        <member name="M:VRage.Game.ModAPI.IMyModAPINaturalGravityImplementation.GetGravityMultiplier(VRageMath.Vector3D)">
            <summary>
            Get gravity scalar
            </summary>
            <param name="worldPoint">World coordinates</param>
            <returns>Gravity scalar, in meters per second</returns>
        </member>
        <member name="M:VRage.Game.ModAPI.IMyModAPINaturalGravityImplementation.GetProxyAABB(VRageMath.BoundingBoxD@)">
            <summary>
            Get bounding box around gravity provider
            </summary>
            <param name="aabb">Bounding box in world coordinates</param>
        </member>
        <member name="M:VRage.Game.ModAPI.IMyModAPINaturalGravityImplementation.DoesTrajectoryIntersectNaturalGravity(VRageMath.RayD,System.Double)">
            <summary>
            Checks if the specified trajectory intersects any natural gravity wells.
            </summary>
            <param name="trajectory">Trajectory in world coordinates</param>
            <param name="raySize">Size of the ray to test with. (Capsule test)</param>
            <returns>Null if doesn't intersect, double if </returns>
        </member>
        <member name="M:VRage.Game.ModAPI.IMyModAPINaturalGravityImplementation.GetGravityLimit">
            <summary>
            Gets distance between Position of gravity provider, and it's most distant point
            </summary>
            <returns>Distance in meters</returns>
        </member>
        <member name="M:VRage.Game.ModAPI.IMyModAPINaturalGravityImplementation.OnPositionChanged(VRageMath.Vector3D)">
            <summary>
            Called when position of gravity provider is changed
            </summary>
            <param name="position">New world position</param>
        </member>
        <member name="T:VRage.Game.ModAPI.IMyNaturalGravityComponent">
            <summary>
            Describes natural gravity provider
            It may be <see cref="T:VRage.Game.ModAPI.IMySphericalNaturalGravityComponent"/> or <see cref="T:VRage.Game.ModAPI.IMyModAPINaturalGravityImplementation"/>
            </summary>
        </member>
        <member name="P:VRage.Game.ModAPI.IMyNaturalGravityComponent.GravityLimit">
            <summary>
            Gets distance between Position of gravity provider, and it's most distant point
            </summary>
        </member>
        <member name="P:VRage.Game.ModAPI.IMyNaturalGravityComponent.IsWorking">
            <summary>
            Gets whither block is working or not
            </summary>
        </member>
        <member name="M:VRage.Game.ModAPI.IMyNaturalGravityComponent.GetWorldGravity(VRageMath.Vector3D)">
            <summary>
            Gets gravity vector
            </summary>
            <param name="worldPoint">World coordinates</param>
            <returns>Gravity vector, in meters per second</returns>
        </member>
        <member name="M:VRage.Game.ModAPI.IMyNaturalGravityComponent.IsPositionInRange(VRageMath.Vector3D)">
            <summary>
            Tests if the specified point is within the gravity of this entity.
            </summary>
            <param name="worldPoint">Point to test</param>
            <returns><b>true</b> if in range; <b>false</b> if not</returns>
        </member>
        <member name="M:VRage.Game.ModAPI.IMyNaturalGravityComponent.GetGravityMultiplier(VRageMath.Vector3D)">
            <summary>
            Get gravity scalar
            </summary>
            <param name="worldPoint">World coordinates</param>
            <returns>Gravity scalar, in meters per second</returns>
        </member>
        <member name="M:VRage.Game.ModAPI.IMyNaturalGravityComponent.GetProxyAABB(VRageMath.BoundingBoxD@)">
            <summary>
            Get bounding box around gravity provider
            </summary>
            <param name="aabb">Bounding box in world coordinates</param>
        </member>
        <member name="T:VRage.Game.ModAPI.IMyNetworkClient">
            <summary>
            Represents network client (basically a computer) on the network.
            </summary>
        </member>
        <member name="T:VRage.Game.ModAPI.IMyOxygenBlock">
            <summary>
            ModAPI describing block that can work with gas in airtight rooms (AirVent)
            </summary>
        </member>
        <member name="P:VRage.Game.ModAPI.IMyOxygenBlock.PreviousOxygenAmount">
            <summary>
            Gets previous oxygen level. Oxygen level is updated each 100 frames.
            </summary>
        </member>
        <member name="P:VRage.Game.ModAPI.IMyOxygenBlock.OxygenChangeTime">
            <summary>
            Get time in milliseconds when last oxygen level was changed. 
            </summary>
        </member>
        <member name="P:VRage.Game.ModAPI.IMyOxygenBlock.Room">
            <summary>
            Gets oxygen room to which this block belongs to.
            </summary>
        </member>
        <member name="M:VRage.Game.ModAPI.IMyOxygenBlock.OxygenLevel(System.Single)">
            <summary>
            Gets oxygen level in current oxygen room
            </summary>
            <param name="gridSize">Should be 0.5 for small, and 2.5 for large grid</param>
            <returns>Oxygen level from 0 to 1</returns>
        </member>
        <member name="T:VRage.Game.ModAPI.IMyOxygenProvider">
            <summary>
            ModAPI interface representing provider of oxygen
            </summary>
        </member>
        <member name="M:VRage.Game.ModAPI.IMyOxygenProvider.GetOxygenForPosition(VRageMath.Vector3D)">
            <summary>
            Gets oxygen for position
            </summary>
            <param name="worldPoint">World coordinates</param>
            <returns>Oxygen level</returns>
        </member>
        <member name="M:VRage.Game.ModAPI.IMyOxygenProvider.IsPositionInRange(VRageMath.Vector3D)">
            <summary>
            Checks if provider can provide oxygen in that position 
            </summary>
            <param name="worldPoint">World coordinates</param>
            <returns>True if can provide oxygen in that position</returns>
        </member>
        <member name="T:VRage.Game.ModAPI.IMyOxygenProviderSystem">
            <summary>
            ModAPI interface allowing to get information about oxygen level and giving ability to register <see cref="T:VRage.Game.ModAPI.IMyOxygenProvider"/>
            </summary>
        </member>
        <member name="M:VRage.Game.ModAPI.IMyOxygenProviderSystem.GetOxygenInPoint(VRageMath.Vector3D)">
            <summary>
            Gets oxygen level in point 
            </summary>
            <param name="worldPoint">World position</param>
            <returns>Value from 0 to 1</returns>
        </member>
        <member name="M:VRage.Game.ModAPI.IMyOxygenProviderSystem.AddOxygenGenerator(VRage.Game.ModAPI.IMyOxygenProvider)">
            <summary>
            Registers oxygen provider
            </summary>
            <param name="provider">Provider of oxygen</param>
        </member>
        <member name="M:VRage.Game.ModAPI.IMyOxygenProviderSystem.RemoveOxygenGenerator(VRage.Game.ModAPI.IMyOxygenProvider)">
            <summary>
            Unregisters oxygen provider 
            </summary>
            <param name="provider">Provider of oxygen</param>
        </member>
        <member name="T:VRage.Game.ModAPI.IMyOxygenRoom">
            <summary>
            Represents space containing air vent. May be not airtight 
            </summary>
        </member>
        <member name="P:VRage.Game.ModAPI.IMyOxygenRoom.IsAirtight">
            <summary>
            Gets if room is airtight
            </summary>
        </member>
        <member name="P:VRage.Game.ModAPI.IMyOxygenRoom.IsDirty">
            <summary>
            Gets if room state is dirty, and would be updated soon. 
            </summary>
        </member>
        <member name="P:VRage.Game.ModAPI.IMyOxygenRoom.EnvironmentOxygen">
            <summary>
            Gets current oxygen level
            </summary>
        </member>
        <member name="P:VRage.Game.ModAPI.IMyOxygenRoom.OxygenAmount">
            <summary>
            Gets oxygen amount in cubic meters. BlockCount * gridSize * gridSize * gridSize
            </summary>
        </member>
        <member name="P:VRage.Game.ModAPI.IMyOxygenRoom.BlockCount">
            <summary>
            Gets blocks in room. Can be used to calculate max oxygen available for this room: BlockCount * gridSize * gridSize * gridSize
            </summary>
        </member>
        <member name="P:VRage.Game.ModAPI.IMyOxygenRoom.StartingPosition">
            <summary>
            Gets oxygen room starting position
            </summary>
        </member>
        <member name="P:VRage.Game.ModAPI.IMyOxygenRoom.Blocks">
            <summary>
            HashSet of all the airtight positions in the room (Reference, not a copy!)
            </summary>
        </member>
        <member name="M:VRage.Game.ModAPI.IMyOxygenRoom.OxygenLevel(System.Single)">
            <summary>
            Returns the percentage of oxygen in the room compared to the maximum possible oxygen
            </summary>
        </member>
        <member name="M:VRage.Game.ModAPI.IMyOxygenRoom.MissingOxygen(System.Single)">
            <summary>
            Returns the volume of oxygen that is not in the room (m^3)
            </summary>
        </member>
        <member name="M:VRage.Game.ModAPI.IMyOxygenRoom.MaxOxygen(System.Single)">
            <summary>
            Gets the maximum volume of oxygen in the room (m^3)
            </summary>
        </member>
        <member name="T:VRage.Game.ModAPI.IMyParallelTask">
            <summary>
            Mod API interface allowing you to run async tasks
            </summary>
        </member>
        <member name="P:VRage.Game.ModAPI.IMyParallelTask.DefaultOptions">
            <summary>
            Default WorkOptions.
            DetachFromParent = false, MaximumThreads = 1
            </summary>
        </member>
        <member name="M:VRage.Game.ModAPI.IMyParallelTask.StartBackground(ParallelTasks.IWork,System.Action)">
            <summary>
            Starts a task in a secondary worker thread. Intended for long running, blocking, work
            such as I/O.
            </summary>
            <param name="work">The work to execute.</param>
            <param name="completionCallback">A method which will be called in Parallel.RunCallbacks() once this task has completed.</param>
            <returns>A task which represents one execution of the work.</returns>
            <exception cref="T:System.ArgumentNullException">
            <paramref name="work"/> is <see langword="null"/>.
            </exception>
            <exception cref="T:System.ArgumentException">
            Invalid number of maximum threads set in <see cref="P:ParallelTasks.IWork.Options"/>.
            </exception>
        </member>
        <member name="M:VRage.Game.ModAPI.IMyParallelTask.StartBackground(ParallelTasks.IWork)">
            <summary>
            Starts a task in a secondary worker thread. Intended for long running, blocking, work
            such as I/O.
            </summary>
            <param name="work">The work to execute.</param>
            <returns>A task which represents one execution of the work.</returns>
        </member>
        <member name="M:VRage.Game.ModAPI.IMyParallelTask.StartBackground(System.Action)">
            <summary>
            Starts a task in a secondary worker thread. Intended for long running, blocking, work
            such as I/O.
            </summary>
            <param name="action">The work to execute.</param>
            <returns>A task which represents one execution of the action.</returns>
        </member>
        <member name="M:VRage.Game.ModAPI.IMyParallelTask.StartBackground(System.Action,System.Action)">
            <summary>
            Starts a task in a secondary worker thread. Intended for long running, blocking, work
            such as I/O.
            </summary>
            <param name="action">The work to execute.</param>
            <param name="completionCallback">A method which will be called in Parallel.RunCallbacks() once this task has completed.</param>
            <returns>A task which represents one execution of the action.</returns>
            <exception cref="T:System.ArgumentNullException">
            <paramref name="action"/> is <see langword="null"/>.
            </exception>
        </member>
        <member name="M:VRage.Game.ModAPI.IMyParallelTask.StartBackground(System.Action{ParallelTasks.WorkData},System.Action{ParallelTasks.WorkData},ParallelTasks.WorkData)">
            <summary>
            Starts a task in a secondary worker thread. Intended for long running, blocking work such as I/O.
            </summary>
            <param name="action">The work to execute.</param>
            <param name="completionCallback">A method which will be called in Parallel.RunCallbacks() once this task has completed.</param>
            <param name="workData">Data to be passed along both the work and the completion callback.</param>
            <returns>A task which represents one execution of the action.</returns>
            <exception cref="T:System.ArgumentNullException">
            <paramref name="action"/> is <see langword="null"/>.
            </exception>
        </member>
        <member name="M:VRage.Game.ModAPI.IMyParallelTask.Do(ParallelTasks.IWork,ParallelTasks.IWork)">
            <summary>
            Executes the given work items potentially in parallel with each other.
            This method will block until all work is completed.
            </summary>
            <param name="a">Work to execute.</param>
            <param name="b">Work to execute.</param>
        </member>
        <member name="M:VRage.Game.ModAPI.IMyParallelTask.Do(ParallelTasks.IWork[])">
            <summary>
            Executes the given work items potentially in parallel with each other.
            This method will block until all work is completed.
            </summary>
            <param name="work">The work to execute.</param>
        </member>
        <member name="M:VRage.Game.ModAPI.IMyParallelTask.Do(System.Action,System.Action)">
            <summary>
            Executes the given work items potentially in parallel with each other.
            This method will block until all work is completed.
            </summary>
            <param name="action1">The work to execute.</param>
            <param name="action2">The work to execute.</param>
        </member>
        <member name="M:VRage.Game.ModAPI.IMyParallelTask.Do(System.Action[])">
            <summary>
            Executes the given work items potentially in parallel with each other.
            This method will block until all work is completed.
            </summary>
            <param name="actions">The work to execute.</param>
        </member>
        <member name="M:VRage.Game.ModAPI.IMyParallelTask.For(System.Int32,System.Int32,System.Action{System.Int32})">
            <summary>
            Executes a for loop, where each iteration can potentially occur in parallel with others.
            </summary>
            <param name="startInclusive">The index (inclusive) at which to start iterating.</param>
            <param name="endExclusive">The index (exclusive) at which to end iterating.</param>
            <param name="body">The method to execute at each iteration. The current index is supplied as the parameter.</param>
        </member>
        <member name="M:VRage.Game.ModAPI.IMyParallelTask.For(System.Int32,System.Int32,System.Action{System.Int32},System.Int32)">
            <summary>
            Executes a for loop, where each iteration can potentially occur in parallel with others.
            </summary>
            <param name="startInclusive">The index (inclusive) at which to start iterating.</param>
            <param name="endExclusive">The index (exclusive) at which to end iterating.</param>
            <param name="body">The method to execute at each iteration. The current index is supplied as the parameter.</param>
            <param name="stride">The number of iterations that each processor takes at a time.</param>
        </member>
        <member name="M:VRage.Game.ModAPI.IMyParallelTask.ForEach``1(System.Collections.Generic.IEnumerable{``0},System.Action{``0})">
            <summary>
            Executes a foreach loop, where each iteration can potentially occur in parallel with others.
            </summary>
            <typeparam name="T">The type of item to iterate over.</typeparam>
            <param name="collection">The enumerable data source.</param>
            <param name="action">The method to execute at each iteration. The item to process is supplied as the parameter.</param>
        </member>
        <member name="M:VRage.Game.ModAPI.IMyParallelTask.Start(System.Action,ParallelTasks.WorkOptions,System.Action)">
            <summary>
            Creates and starts a task to execute the given work.
            </summary>
            <param name="action">The work to execute in parallel.</param>
            <param name="options">The work options to use with this action.</param>
            <param name="completionCallback">A method which will be called in Parallel.RunCallbacks() once this task has completed.</param>
            <returns>A task which represents one execution of the work.</returns>
        </member>
        <member name="M:VRage.Game.ModAPI.IMyParallelTask.Start(System.Action,ParallelTasks.WorkOptions)">
            <summary>
            Creates and starts a task to execute the given work.
            </summary>
            <param name="action">The work to execute in parallel.</param>
            <param name="options">The work options to use with this action.</param>
            <returns>A task which represents one execution of the work.</returns>
        </member>
        <member name="M:VRage.Game.ModAPI.IMyParallelTask.Start(System.Action,System.Action)">
            <summary>
            Creates and starts a task to execute the given work.
            </summary>
            <param name="action">The work to execute in parallel.</param>
            <param name="completionCallback">A method which will be called in Parallel.RunCallbacks() once this task has completed.</param>
            <returns>A task which represents one execution of the work.</returns>
        </member>
        <member name="M:VRage.Game.ModAPI.IMyParallelTask.Start(System.Action)">
            <summary>
            Creates and starts a task to execute the given work.
            </summary>
            <param name="action">The work to execute in parallel.</param>
            <returns>A task which represents one execution of the work.</returns>
        </member>
        <member name="M:VRage.Game.ModAPI.IMyParallelTask.Start(System.Action{ParallelTasks.WorkData},System.Action{ParallelTasks.WorkData},ParallelTasks.WorkData)">
            <summary>
            Creates and schedules a task to execute the given work with the given work data.
            </summary>
            <param name="action">The work to execute in parallel.</param>
            <param name="completionCallback">A method which will be called in Parallel.RunCallbacks() once this task has completed.</param>
            <param name="workData">Data to be passed along both the work and the completion callback.</param>
            <returns>A task which represents one execution of the action.</returns>
        </member>
        <member name="M:VRage.Game.ModAPI.IMyParallelTask.Start(ParallelTasks.IWork,System.Action)">
            <summary>
            Creates and starts a task to execute the given work.
            </summary>
            <param name="work">The work to execute in parallel.</param>
            <param name="completionCallback">A method which will be called in Parallel.RunCallbacks() once this task has completed.</param>
            <returns>A task which represents one execution of the work.</returns>
            <exception cref="T:System.ArgumentNullException">
            <paramref name="work"/> is <see langword="null"/>.
            </exception>
            <exception cref="T:System.ArgumentException">
            Invalid number of maximum threads set in <see cref="P:ParallelTasks.IWork.Options"/>.
            </exception>
        </member>
        <member name="M:VRage.Game.ModAPI.IMyParallelTask.Start(ParallelTasks.IWork)">
            <summary>
            Creates and starts a task to execute the given work.
            </summary>
            <param name="work">The work to execute in parallel.</param>
            <returns>A task which represents one execution of the work.</returns>
        </member>
        <member name="M:VRage.Game.ModAPI.IMyParallelTask.Sleep(System.Int32)">
            <summary>
            Suspends the current thread for the specified number of milliseconds.
            </summary>
            <param name="millisecondsTimeout">How much to sleep</param>
        </member>
        <member name="M:VRage.Game.ModAPI.IMyParallelTask.Sleep(System.TimeSpan)">
            <summary>
            Suspends the current thread for the specified amount of time.
            </summary>
            <param name="timeout">How much to sleep</param>
        </member>
        <member name="P:VRage.Game.ModAPI.IHitInfo.Position">
            <summary>
            The position where the raycast hit.
            </summary>
        </member>
        <member name="P:VRage.Game.ModAPI.IHitInfo.HitEntity">
            <summary>
            The entity that was hit.
            </summary>
        </member>
        <member name="P:VRage.Game.ModAPI.IHitInfo.Normal">
            <summary>
            The direction vector of the hit surface.
            </summary>
        </member>
        <member name="P:VRage.Game.ModAPI.IHitInfo.Fraction">
            <summary>
            How much of the ray cast distance was traveled before hitting something.
            Use this value to multiply your initial distance to get the distance to hit position in a cheaper way.
            </summary>
        </member>
        <member name="T:VRage.Game.ModAPI.IMyPhysics">
            <summary>
            Mod API interface giving you access to physics
            </summary>
        </member>
        <member name="P:VRage.Game.ModAPI.IMyPhysics.StepsLastSecond">
            <summary>
            Number of physics steps done in last second
            </summary>
        </member>
        <member name="P:VRage.Game.ModAPI.IMyPhysics.SimulationRatio">
            <summary>
            Simulation ratio, when physics cannot keep up, this is smaller than 1
            </summary>
        </member>
        <member name="P:VRage.Game.ModAPI.IMyPhysics.ServerSimulationRatio">
            <summary>
            The server's simulation ratio.
            When physics cannot keep up server side this is smaller than 1.
            </summary>
        </member>
        <member name="M:VRage.Game.ModAPI.IMyPhysics.CastLongRay(VRageMath.Vector3D,VRageMath.Vector3D,VRage.Game.ModAPI.IHitInfo@,System.Boolean)">
            <summary>
            Finds closest or any object on the path of the ray from->to. Uses Storage for voxels for faster 
            search but only good for long rays (more or less more than 50m). Use it only in such cases.
            </summary>
            <param name="from">Start of the ray.</param>
            <param name="to">End of the ray.</param>
            <param name="hitInfo">Hit info</param>
            <param name="any">Indicates if method should return any object found (May not be closest)</param>
            <returns>true if hit, false if no hit</returns>
        </member>
        <member name="M:VRage.Game.ModAPI.IMyPhysics.CastRay(VRageMath.Vector3D,VRageMath.Vector3D,System.Collections.Generic.List{VRage.Game.ModAPI.IHitInfo},System.Int32)">
            <summary>
            Cast a ray and returns all matching entities.
            Must not be called from parallel thread!!!
            </summary>
            <param name="from">Start of ray.</param>
            <param name="to">End of ray.</param>
            <param name="toList">List of hits</param>
            <param name="raycastFilterLayer">Collision layer</param>
        </member>
        <member name="M:VRage.Game.ModAPI.IMyPhysics.CastRay(VRageMath.Vector3D,VRageMath.Vector3D,VRage.Game.ModAPI.IHitInfo@,System.Int32)">
            <summary>
            Cast a ray and return first entity.
            Must not be called from parallel thread!!!
            </summary>
            <param name="from">Start of ray.</param>
            <param name="to">End of ray.</param>
            <param name="hitInfo">Hit info</param>
            <param name="raycastFilterLayer">Collision layer</param>
            <returns>true if hit; false if no hit</returns>
        </member>
        <member name="M:VRage.Game.ModAPI.IMyPhysics.CastRay(VRageMath.Vector3D,VRageMath.Vector3D,VRage.Game.ModAPI.IHitInfo@,System.UInt32,System.Boolean)">
            <summary>
            Cast a ray and return first entity.
            Must not be called from parallel thread!!!
            </summary>
            <param name="from">Start of ray.</param>
            <param name="to">End of ray.</param>
            <param name="hitInfo">Hit info</param>
            <param name="raycastCollisionFilter">Collision layer</param>
            <param name="ignoreConvexShape">Convex radius - allowed to penetrate space, around collision model</param>
            <returns>true if hit; false if no hit</returns>
        </member>
        <member name="M:VRage.Game.ModAPI.IMyPhysics.EnsurePhysicsSpace(VRageMath.BoundingBoxD)">
            <summary>
            Ensure aabb is inside only one subspace. If no, reorder.
            Must not be called from parallel thread!!!
            </summary>
            <param name="aabb">World bounding box</param>
        </member>
        <member name="M:VRage.Game.ModAPI.IMyPhysics.GetCollisionLayer(System.String)">
            <summary>
            Given a string, gets the numeric value for the collision layer. Default: 0.
            TargetDummyLayer = 6
            BlockPlacementTestCollisionLayer = 7
            MissileLayer = 8
            NoVoxelCollisionLayer = 9
            LightFloatingObjectCollisionLayer = 10
            VoxelLod1CollisionLayer = 11
            NotCollideWithStaticLayer = 12
            StaticCollisionLayer = 13
            CollideWithStaticLayer = 14
            DefaultCollisionLayer = 15
            DynamicDoubledCollisionLayer = 16
            KinematicDoubledCollisionLayer = 17
            CharacterCollisionLayer = 18
            NoCollisionLayer = 19
            DebrisCollisionLayer = 20
            GravityPhantomLayer = 21
            CharacterNetworkCollisionLayer = 22
            FloatingObjectCollisionLayer = 23
            ObjectDetectionCollisionLayer = 24
            VirtualMassLayer = 25
            CollectorCollisionLayer = 26
            AmmoLayer = 27
            VoxelCollisionLayer = 28
            ExplosionRaycastLayer = 29
            CollisionLayerWithoutCharacter = 30
            RagdollCollisionLayer = 31
            </summary>
            <param name="strLayer">Name of collision layer. See MyPhysics.CollisionLayers for valid names.</param>
            <returns>Numeric value from MyPhysics.CollisionLayers</returns>
            <remarks>Default string used if not valid: DefaultCollisionLayer</remarks>
        </member>
        <member name="M:VRage.Game.ModAPI.IMyPhysics.CastRayParallel(VRageMath.Vector3D@,VRageMath.Vector3D@,System.Int32,System.Action{VRage.Game.ModAPI.IHitInfo})">
            <summary>
            Cast a ray and return first entity.
            May be called from parallel thread.
            </summary>
            <param name="from">Start of ray.</param>
            <param name="to">End of ray.</param>        
            <param name="raycastCollisionFilter">Collision layer</param>
            <param name="callback">Callback were results are returned to when query is done</param>
        </member>
        <member name="M:VRage.Game.ModAPI.IMyPhysics.CastRayParallel(VRageMath.Vector3D@,VRageMath.Vector3D@,System.Collections.Generic.List{VRage.Game.ModAPI.IHitInfo},System.Int32,System.Action{System.Collections.Generic.List{VRage.Game.ModAPI.IHitInfo}})">
            <summary>
            Cast a ray and returns all matching entities.
            May be called from parallel thread.
            </summary>
            <param name="from">Start of ray.</param>
            <param name="to">End of ray.</param>
            <param name="toList">List of hits</param>
            <param name="raycastCollisionFilter">Collision layer</param>
            <param name="callback">Callback were results are returned to when query is done</param>
        </member>
        <member name="M:VRage.Game.ModAPI.IMyPhysics.CalculateNaturalGravityAt(VRageMath.Vector3D,System.Single@)">
            <summary>
            Returns current natural gravity at world position.
            </summary>
            <param name="worldPosition">Target position</param>
            <param name="naturalGravityInterference">Natural gravity affects artificial gravity strength.
            Use this value when calling <see cref="M:VRage.Game.ModAPI.IMyPhysics.CalculateArtificialGravityAt(VRageMath.Vector3D,System.Single)"/> to get effective (physical) strength of artificial gravity at point.</param>
            <returns></returns>
        </member>
        <member name="M:VRage.Game.ModAPI.IMyPhysics.CalculateArtificialGravityAt(VRageMath.Vector3D,System.Single)">
            <summary>
            Returns current artificial gravity at world position.
            </summary>
            <param name="worldPosition">Target position</param>
            <param name="naturalGravityInterference">Artificial gravity strength is affected by presence of natural gravity.
            Use <see cref="M:VRage.Game.ModAPI.IMyPhysics.CalculateNaturalGravityAt(VRageMath.Vector3D,System.Single@)"/> to get correct value for given point in space.
            Value of 1 indicates no natural gravity effect.</param>
        </member>
        <member name="M:VRage.Game.ModAPI.IMyPhysics.CreateModelPhysics(VRage.ModAPI.PhysicsSettings)">
            <summary>
            Creates physical body when <see cref="F:VRage.ModAPI.PhysicsSettings.DetectorColliderCallback"/> is null, or physics detector, when <see cref="F:VRage.ModAPI.PhysicsSettings.DetectorColliderCallback"/> is not null.
            Created physics has a collision model, taken from entity model
            </summary>
            <param name="settings">Physical settings, created with <see cref="M:VRage.Game.ModAPI.IMyPhysics.CreateSettingsForPhysics(VRage.ModAPI.IMyEntity,VRageMath.MatrixD,VRageMath.Vector3,System.Single,System.Single,System.UInt16,VRage.Game.Components.RigidBodyFlag,System.Boolean,System.Nullable{VRage.ModAPI.ModAPIMass})"/> or <see cref="M:VRage.Game.ModAPI.IMyPhysics.CreateSettingsForDetector(VRage.ModAPI.IMyEntity,System.Action{VRage.ModAPI.IMyEntity,System.Boolean},VRageMath.MatrixD,VRageMath.Vector3,VRage.Game.Components.RigidBodyFlag,System.UInt16,System.Boolean)"/></param>
        </member>
        <member name="M:VRage.Game.ModAPI.IMyPhysics.CreateBoxPhysics(VRage.ModAPI.PhysicsSettings,VRageMath.Vector3,System.Single)">
            <summary>
            Creates physical body when <see cref="F:VRage.ModAPI.PhysicsSettings.DetectorColliderCallback"/> is null, or physics detector, when <see cref="F:VRage.ModAPI.PhysicsSettings.DetectorColliderCallback"/> is not null.
            Created physics has a box collision
            </summary>
            <param name="settings">Physical settings, created with <see cref="M:VRage.Game.ModAPI.IMyPhysics.CreateSettingsForPhysics(VRage.ModAPI.IMyEntity,VRageMath.MatrixD,VRageMath.Vector3,System.Single,System.Single,System.UInt16,VRage.Game.Components.RigidBodyFlag,System.Boolean,System.Nullable{VRage.ModAPI.ModAPIMass})"/> or <see cref="M:VRage.Game.ModAPI.IMyPhysics.CreateSettingsForDetector(VRage.ModAPI.IMyEntity,System.Action{VRage.ModAPI.IMyEntity,System.Boolean},VRageMath.MatrixD,VRageMath.Vector3,VRage.Game.Components.RigidBodyFlag,System.UInt16,System.Boolean)"/></param>
            <param name="halfExtends">Half extends of box</param>
            <param name="convexRadius">Convex radius in meters</param>
        </member>
        <member name="M:VRage.Game.ModAPI.IMyPhysics.CreateSpherePhysics(VRage.ModAPI.PhysicsSettings,System.Single)">
            <summary>
            Creates physical body when <see cref="F:VRage.ModAPI.PhysicsSettings.DetectorColliderCallback"/> is null, or physics detector, when <see cref="F:VRage.ModAPI.PhysicsSettings.DetectorColliderCallback"/> is not null.
            Created physics has a sphere collision
            </summary>
            <param name="settings">Physical settings, created with <see cref="M:VRage.Game.ModAPI.IMyPhysics.CreateSettingsForPhysics(VRage.ModAPI.IMyEntity,VRageMath.MatrixD,VRageMath.Vector3,System.Single,System.Single,System.UInt16,VRage.Game.Components.RigidBodyFlag,System.Boolean,System.Nullable{VRage.ModAPI.ModAPIMass})"/> or <see cref="M:VRage.Game.ModAPI.IMyPhysics.CreateSettingsForDetector(VRage.ModAPI.IMyEntity,System.Action{VRage.ModAPI.IMyEntity,System.Boolean},VRageMath.MatrixD,VRageMath.Vector3,VRage.Game.Components.RigidBodyFlag,System.UInt16,System.Boolean)"/></param>
            <param name="radius">Radius of sphere</param>
        </member>
        <member name="M:VRage.Game.ModAPI.IMyPhysics.CreateCapsulePhysics(VRage.ModAPI.PhysicsSettings,VRageMath.Vector3,VRageMath.Vector3,System.Single)">
            <summary>
            Creates physical body when <see cref="F:VRage.ModAPI.PhysicsSettings.DetectorColliderCallback"/> is null, or physics detector, when <see cref="F:VRage.ModAPI.PhysicsSettings.DetectorColliderCallback"/> is not null.
            Created physics has a capsule collision
            </summary>
            <param name="settings">Physical settings, created with <see cref="M:VRage.Game.ModAPI.IMyPhysics.CreateSettingsForPhysics(VRage.ModAPI.IMyEntity,VRageMath.MatrixD,VRageMath.Vector3,System.Single,System.Single,System.UInt16,VRage.Game.Components.RigidBodyFlag,System.Boolean,System.Nullable{VRage.ModAPI.ModAPIMass})"/> or <see cref="M:VRage.Game.ModAPI.IMyPhysics.CreateSettingsForDetector(VRage.ModAPI.IMyEntity,System.Action{VRage.ModAPI.IMyEntity,System.Boolean},VRageMath.MatrixD,VRageMath.Vector3,VRage.Game.Components.RigidBodyFlag,System.UInt16,System.Boolean)"/></param>
            <param name="vertexA">Local coordinates of capsule's first vertex</param>
            <param name="vertexB">Local coordinates of capsule's second vertex</param>
            <param name="radius">Radius of capsule in meters</param>
        </member>
        <member name="M:VRage.Game.ModAPI.IMyPhysics.CreateMassCombined(System.Collections.Generic.ICollection{VRage.ModAPI.ModAPIMassElement})">
            <summary>
            Calculates mass combined from other several masses 
            </summary>
            <param name="massElements">Other masses</param>
            <returns>Combined mass</returns>
        </member>
        <member name="M:VRage.Game.ModAPI.IMyPhysics.CreateMassForBox(VRageMath.Vector3,System.Single)">
            <summary>
            Creates mass for cube
            </summary>
            <param name="halfExtents">Cube halfExtents </param>
            <param name="mass">Mass in kg</param>
            <returns>Calculated mass properties</returns>
        </member>
        <member name="M:VRage.Game.ModAPI.IMyPhysics.CreateMassForCapsule(VRageMath.Vector3,VRageMath.Vector3,System.Single,System.Single)">
            <summary>
            Creates mass for capsule
            </summary>
            <param name="startAxis">Local coordinates of capsule's first vertex</param>
            <param name="endAxis">Local coordinates of capsule's second vertex</param>
            <param name="radius">Radius of capsule in meters</param>
            <param name="mass">Mass in kg</param>
            <returns>Calculated mass properties</returns>
        </member>
        <member name="M:VRage.Game.ModAPI.IMyPhysics.CreateMassForCylinder(VRageMath.Vector3,VRageMath.Vector3,System.Single,System.Single)">
            <summary>
            Creates mass for cylinder
            </summary>
            <param name="startAxis">Local coordinates of cylinder's first vertex</param>
            <param name="endAxis">Local coordinates of cylinder's second vertex</param>
            <param name="radius">Radius of cylinder in meters</param>
            <param name="mass">Mass in kg</param>
            <returns>Calculated mass properties</returns>
        </member>
        <member name="M:VRage.Game.ModAPI.IMyPhysics.CreateMassForSphere(System.Single,System.Single)">
            <summary>
            Creates mass for sphere
            </summary>
            <param name="radius">Radius of sphere in meters</param>
            <param name="mass">Mass in kg</param>
            <returns>Calculated mass properties</returns>
        </member>
        <member name="M:VRage.Game.ModAPI.IMyPhysics.CreateSettingsForPhysics(VRage.ModAPI.IMyEntity,VRageMath.MatrixD,VRageMath.Vector3,System.Single,System.Single,System.UInt16,VRage.Game.Components.RigidBodyFlag,System.Boolean,System.Nullable{VRage.ModAPI.ModAPIMass})">
            <summary>
            Used for create physics with collisions
            </summary>
        </member>
        <member name="M:VRage.Game.ModAPI.IMyPhysics.CreateSettingsForDetector(VRage.ModAPI.IMyEntity,System.Action{VRage.ModAPI.IMyEntity,System.Boolean},VRageMath.MatrixD,VRageMath.Vector3,VRage.Game.Components.RigidBodyFlag,System.UInt16,System.Boolean)">
            <summary>
            Used to create physical detectors. They don't have physical collisions, instead they provide trigger callbacks when Entities collide with their shape 
            </summary>
        </member>
        <member name="M:VRage.Game.ModAPI.IMyPhysics.GetWeaponLeadPrediction(VRage.ModAPI.IMyEntity,VRage.ModAPI.IMyEntity,VRage.Game.MyDefinitionId)">
            <summary>
            Gets the predicted target coordinates of an entity for weapon leading. Will return Vector3D.Zero if the entity is not valid. If the predicted intercept position cannot be calculated because of missing physics or ammo definitions, then it will return the entity position instead.
            </summary>
            <param name="shooter">The entity shooting the target, usually a weapon block or tool</param>
            <param name="target">The target entity you want to hit</param>
            <param name="ammoDefinitionId">The definition id for the MyAmmoDefinition object the shooter uses.</param>
            <returns>Vector3D world coordinates of where a fired shot from the weapon should intercept the provided entity target.</returns>
        </member>
        <member name="E:VRage.Game.ModAPI.IMyPlayer.IdentityChanged">
            <summary>
            Event triggered when the player's identity changed (eg. died w/permadeath on)
            </summary>
        </member>
        <member name="P:VRage.Game.ModAPI.IMyPlayer.Client">
            <summary>
            Gets network client for this player. Used for sending network messages between players and server
            </summary>
        </member>
        <member name="M:VRage.Game.ModAPI.IMyPlayer.GetRelationTo(System.Int64)">
            <summary>
            Gets the relationship between this player and another.
            </summary>
            <param name="playerId">Player to test relationship against</param>
            <returns>Relations</returns>
        </member>
        <member name="P:VRage.Game.ModAPI.IMyPlayer.Grids">
            <summary>
            List of grids where the player owns at least one block.
            </summary>
            <remarks>Not synced.</remarks>
        </member>
        <member name="M:VRage.Game.ModAPI.IMyPlayer.AddGrid(System.Int64)">
            <summary>
            Adds a grid to the player's Grids list.
            </summary>
            <param name="gridEntityId"><see cref="P:VRage.ModAPI.IMyEntity.EntityId"/></param>
        </member>
        <member name="M:VRage.Game.ModAPI.IMyPlayer.RemoveGrid(System.Int64)">
            <summary>
            Removes a grid from the player's Grids list.
            </summary>
            <param name="gridEntityId"><see cref="P:VRage.ModAPI.IMyEntity.EntityId"/></param>
        </member>
        <member name="P:VRage.Game.ModAPI.IMyPlayer.Controller">
            <summary>
            Gets the EntityController for the player.
            </summary>
        </member>
        <member name="M:VRage.Game.ModAPI.IMyPlayer.GetPosition">
            <summary>
            Gets the position of controlled entity. Grid/Character
            </summary>
            <returns>World coordinates of controlled entity</returns>
        </member>
        <member name="P:VRage.Game.ModAPI.IMyPlayer.SteamUserId">
            <summary>
            Gets the Steam user id for the player.
            </summary>
        </member>
        <member name="P:VRage.Game.ModAPI.IMyPlayer.DisplayName">
            <summary>
            Visible player name
            </summary>
        </member>
        <member name="P:VRage.Game.ModAPI.IMyPlayer.IdentityId">
            <summary>
            Unique id for the current player identity.
            </summary>
            <remarks>This will change when the player dies with permadeath enabled.</remarks>
        </member>
        <member name="P:VRage.Game.ModAPI.IMyPlayer.IsAdmin">
            <summary>
            Gets if the player is an admin on the server.
            </summary>
        </member>
        <member name="P:VRage.Game.ModAPI.IMyPlayer.IsPromoted">
            <summary>
            Gets if the player is promoted to Space Master.
            </summary>
        </member>
        <member name="P:VRage.Game.ModAPI.IMyPlayer.PromoteLevel">
            <summary>
            Gets the player's promote level
            </summary>
        </member>
        <member name="P:VRage.Game.ModAPI.IMyPlayer.Character">
            <summary>
            Gets the Character entity for the player.
            </summary>
        </member>
        <member name="P:VRage.Game.ModAPI.IMyPlayer.IsBot">
            <summary>
            Gets if the player is a bot (non-human)
            </summary>
        </member>
        <member name="P:VRage.Game.ModAPI.IMyPlayer.Identity">
            <summary>
            Gets the identity for the player
            </summary>
        </member>
        <member name="P:VRage.Game.ModAPI.IMyPlayer.RespawnShip">
            <summary>
            Gets the entity id for the player's respawn ship(s).
            </summary>
        </member>
        <member name="P:VRage.Game.ModAPI.IMyPlayer.BuildColorSlots">
            <summary>
            Gets or sets all the player's build color slots
            </summary>
            <remarks>Not synced.</remarks>
        </member>
        <member name="P:VRage.Game.ModAPI.IMyPlayer.DefaultBuildColorSlots">
            <summary>
            Gets the list of the default build colors.
            </summary>
        </member>
        <member name="P:VRage.Game.ModAPI.IMyPlayer.SelectedBuildColor">
            <summary>
            Gets or sets the build color for the selected slot.
            </summary>
            <remarks>Not synced.</remarks>
        </member>
        <member name="P:VRage.Game.ModAPI.IMyPlayer.SelectedBuildColorSlot">
            <summary>
            Gets or sets the selected slot for the build color.
            </summary>
            <remarks>Not synced.</remarks>
        </member>
        <member name="M:VRage.Game.ModAPI.IMyPlayer.ChangeOrSwitchToColor(VRageMath.Vector3)">
            <summary>
            Switches to slot containing color, if present. Otherwise sets active slot to color.
            </summary>
            <param name="color">New current painting color</param>
            <remarks>Not synced.</remarks>
        </member>
        <member name="M:VRage.Game.ModAPI.IMyPlayer.SetDefaultColors">
            <summary>
            Sets build colors back to defaults.
            </summary>
        </member>
        <member name="M:VRage.Game.ModAPI.IMyPlayer.SpawnIntoCharacter(VRage.Game.ModAPI.IMyCharacter)">
            <summary>
            Spawns the player as a new character (changes the model).
            </summary>
            <param name="character">New character to use</param>
        </member>
        <member name="M:VRage.Game.ModAPI.IMyPlayer.SpawnAt(VRageMath.MatrixD,VRageMath.Vector3,VRage.ModAPI.IMyEntity,System.Boolean,System.String,System.Nullable{VRageMath.Color})">
            <summary>
            Spawns the player at a specific place. Must be called on server.
            </summary>
            <param name="worldMatrix">Spawn position</param>
            <param name="velocity">Velocity to provide to player</param>
            <param name="spawnedBy">Entity triggering respawn (can be null)</param>
            <param name="findFreePlace">Find a safe place to spawn near the position</param>
            <param name="modelName">Model of character. Use <b>null</b> for using player's default color</param>
            <param name="color">Character color. Use <b>null</b> for using player's default color</param>
        </member>
        <member name="M:VRage.Game.ModAPI.IMyPlayer.SpawnAt(VRageMath.MatrixD,VRageMath.Vector3,VRage.ModAPI.IMyEntity)">
            <summary>
            Spawns the player at a specific place. Must be called on server.
            </summary>
            <param name="worldMatrix">Spawn position</param>
            <param name="velocity">Velocity to provide to player</param>
            <param name="spawnedBy">Entity triggering respawn (can be null)</param>
        </member>
        <member name="M:VRage.Game.ModAPI.IMyPlayer.TryGetBalanceInfo(System.Int64@)">
            <summary>
            Gets balance of an account associated with player.
            </summary>
            <param name="balance">Returns current balance of the account. (If called on client, can return delayed value, as changes to balance have to be synchronized first)</param>
            <returns>True if account was found. Otherwise false.</returns>
        </member>
        <member name="M:VRage.Game.ModAPI.IMyPlayer.GetBalanceShortString">
            <summary>
            Gets balance of an account associated with player. Format is 'BALANCE CURRENCYSHORTNAME'.
            </summary>
            <returns>Current balance of the account in form of formatted string. If Banking System does not exist method returns null.</returns>
        </member>
        <member name="M:VRage.Game.ModAPI.IMyPlayer.RequestChangeBalance(System.Int64)">
            <summary>
            Changes the balance of the account of this player by given amount. Sends a message to server with the request.
            </summary>
            <param name="amount">Amount by which to change te balance.</param>
        </member>
        <member name="T:VRage.Game.ModAPI.IMyPlayerCollection">
            <summary>
            ModAPI interface giving control on players
            </summary>
        </member>
        <member name="M:VRage.Game.ModAPI.IMyPlayerCollection.ExtendControl(VRage.Game.ModAPI.Interfaces.IMyControllableEntity,VRage.ModAPI.IMyEntity)">
            <summary>
            Control extension and reduction is a mechanism that saves the control of other entities than IMyControllableEntities.
            A typical example is a cockpit inside a cube grid - you control the cockpit, but you want to "extend" the control to
            the cube grid as well. You can extend the control multiple times, but you always have to extend from the "base" entity,
            i.e. the cockpit in our example. The same goes for control reduction: always reduce to the "base" entity
            </summary>
            <param name="entityWithControl">Entity that already control. Example: cockpit</param>
            <param name="entityGettingControl">Entity that would get control. Example: grid</param>
            <remarks>Same as <see cref="M:VRage.Game.ModAPI.IMyPlayerCollection.TryExtendControl(VRage.Game.ModAPI.Interfaces.IMyControllableEntity,VRage.ModAPI.IMyEntity)"/></remarks>
        </member>
        <member name="M:VRage.Game.ModAPI.IMyPlayerCollection.GetPlayers(System.Collections.Generic.List{VRage.Game.ModAPI.IMyPlayer},System.Func{VRage.Game.ModAPI.IMyPlayer,System.Boolean})">
            <summary>
            Gets list of currently connected players
            </summary>
            <param name="players">List, that would receive connected players</param>
            <param name="collect">When null, or returns true, <paramref name="players"/> would receive player</param>
        </member>
        <member name="M:VRage.Game.ModAPI.IMyPlayerCollection.HasExtendedControl(VRage.Game.ModAPI.Interfaces.IMyControllableEntity,VRage.ModAPI.IMyEntity)">
            <summary>
            Gets whether player controls both entities
            </summary>
            <param name="firstEntity">First entity</param>
            <param name="secondEntity">Second entity</param>
            <returns>True, if both entities under control of one player</returns>
        </member>
        <member name="M:VRage.Game.ModAPI.IMyPlayerCollection.ReduceControl(VRage.Game.ModAPI.Interfaces.IMyControllableEntity,VRage.ModAPI.IMyEntity)">
            <summary>
            Control extension and reduction is a mechanism that saves the control of other entities than IMyControllableEntities.
            A typical example is a cockpit inside a cube grid - you control the cockpit, but you want to "extend" the control to
            the cube grid as well. You can extend the control multiple times, but you always have to extend from the "base" entity,
            i.e. the cockpit in our example. The same goes for control reduction: always reduce to the "base" entity
            </summary>
            <param name="entityWhichKeepsControl">Entity that would keep control. Example: cockpit</param>
            <param name="entityWhichLoosesControl">Entity that would loose control. Example: grid</param>
            <remarks>Same as <see cref="M:VRage.Game.ModAPI.IMyPlayerCollection.TryReduceControl(VRage.Game.ModAPI.Interfaces.IMyControllableEntity,VRage.ModAPI.IMyEntity)"/></remarks>
            <remarks>Reducing control only if both entities were controlled by same player</remarks>
        </member>
        <member name="M:VRage.Game.ModAPI.IMyPlayerCollection.RemoveControlledEntity(VRage.ModAPI.IMyEntity)">
            <summary>
            Removes control from entity
            </summary>
            <param name="entity">Entity that should loose control</param>
        </member>
        <member name="M:VRage.Game.ModAPI.IMyPlayerCollection.TryExtendControl(VRage.Game.ModAPI.Interfaces.IMyControllableEntity,VRage.ModAPI.IMyEntity)">
            <summary>
            Control extension and reduction is a mechanism that saves the control of other entities than IMyControllableEntities.
            A typical example is a cockpit inside a cube grid - you control the cockpit, but you want to "extend" the control to
            the cube grid as well. You can extend the control multiple times, but you always have to extend from the "base" entity,
            i.e. the cockpit in our example. The same goes for control reduction: always reduce to the "base" entity
            </summary>
            <param name="entityWithControl">Entity that already control. Example: cockpit</param>
            <param name="entityGettingControl">Entity that would get control. Example: grid</param>
            <remarks>Same as <see cref="M:VRage.Game.ModAPI.IMyPlayerCollection.ExtendControl(VRage.Game.ModAPI.Interfaces.IMyControllableEntity,VRage.ModAPI.IMyEntity)"/></remarks>
        </member>
        <member name="M:VRage.Game.ModAPI.IMyPlayerCollection.TryReduceControl(VRage.Game.ModAPI.Interfaces.IMyControllableEntity,VRage.ModAPI.IMyEntity)">
            <summary>
            Control extension and reduction is a mechanism that saves the control of other entities than IMyControllableEntities.
            A typical example is a cockpit inside a cube grid - you control the cockpit, but you want to "extend" the control to
            the cube grid as well. You can extend the control multiple times, but you always have to extend from the "base" entity,
            i.e. the cockpit in our example. The same goes for control reduction: always reduce to the "base" entity
            </summary>
            <param name="entityWhichKeepsControl"></param>
            <param name="entityWhichLoosesControl"></param>
            <returns>True if control was reduced</returns>
            <remarks>Same as <see cref="M:VRage.Game.ModAPI.IMyPlayerCollection.ReduceControl(VRage.Game.ModAPI.Interfaces.IMyControllableEntity,VRage.ModAPI.IMyEntity)"/></remarks>
            <remarks>Reducing control only if both entities were controlled by same player</remarks>
        </member>
        <member name="M:VRage.Game.ModAPI.IMyPlayerCollection.SetControlledEntity(System.UInt64,VRage.ModAPI.IMyEntity)">
            <summary>
            Set entity controlled by player. Functions <see cref="M:VRage.Game.ModAPI.IMyPlayerCollection.ExtendControl(VRage.Game.ModAPI.Interfaces.IMyControllableEntity,VRage.ModAPI.IMyEntity)"/> and <see cref="M:VRage.Game.ModAPI.IMyPlayerCollection.TryExtendControl(VRage.Game.ModAPI.Interfaces.IMyControllableEntity,VRage.ModAPI.IMyEntity)"/> using this function.
            </summary>
            <param name="steamUserId">Player steam user id</param>
            <param name="entity">Entity that should gain control</param>
        </member>
        <member name="P:VRage.Game.ModAPI.IMyPlayerCollection.Count">
            <summary>
            Gets amount of players online
            </summary>
        </member>
        <member name="M:VRage.Game.ModAPI.IMyPlayerCollection.GetPlayerControllingEntity(VRage.ModAPI.IMyEntity)">
            <summary>
            Gets player that controls entity
            </summary>
            <param name="entity">Entity to test</param>
            <returns>Player that controls <paramref name="entity"/></returns>
        </member>
        <member name="M:VRage.Game.ModAPI.IMyPlayerCollection.GetAllIdentites(System.Collections.Generic.List{VRage.Game.ModAPI.IMyIdentity},System.Func{VRage.Game.ModAPI.IMyIdentity,System.Boolean})">
            <summary>
            Get all registered identities: players that at least once visited server, bots, and online players
            </summary>
            <param name="identities">List that would receive results</param>
            <param name="collect">When null, or returns true, list would add identity</param>
        </member>
        <member name="M:VRage.Game.ModAPI.IMyPlayerCollection.TryGetIdentityId(System.UInt64)">
            <summary>
            Gets identity for steamId
            </summary>
            <param name="steamId">Player steam id</param>
            <returns>IdentityId, or 0</returns>
        </member>
        <member name="M:VRage.Game.ModAPI.IMyPlayerCollection.TryGetIdentityId(System.Int64)">
            <summary>
            Gets player for identity
            </summary>
            <param name="identity">Identity id of player</param>
            <returns>Player, or null</returns>
        </member>
        <member name="M:VRage.Game.ModAPI.IMyPlayerCollection.TryGetSteamId(System.Int64)">
            <summary>
            Gets steamId for passed identityId
            </summary>
            <param name="identityId"><see cref="P:VRage.Game.ModAPI.IMyPlayer.Identity"/> or <see cref="P:VRage.Game.ModAPI.IMyIdentity.IdentityId"/></param>
            <returns>Steam Id</returns>
        </member>
        <member name="M:VRage.Game.ModAPI.IMyPlayerCollection.RequestChangeBalance(System.Int64,System.Int64)">
            <summary>
            Requests change of the balance (money) for specific identity id
            </summary>
            <param name="identityId">identity id</param>
            <param name="amount">amount to be added/subtracted</param>
        </member>
        <member name="E:VRage.Game.ModAPI.IMyPlayerCollection.ItemConsumed">
            <summary>
            Called when consumable item was consumed
            </summary>
        </member>
        <member name="F:VRage.Game.ModAPI.SpawningOptions.RotateFirstCockpitTowardsDirection">
            <summary>
            Makes first found cockpit to look at provided forward and up vector 
            </summary>
        </member>
        <member name="F:VRage.Game.ModAPI.SpawningOptions.SpawnRandomCargo">
            <summary>
            Spawns random cargo, depending on cargo container type. 
            </summary>
        </member>
        <member name="F:VRage.Game.ModAPI.SpawningOptions.DisableDampeners">
            <summary>
            Disables dampeners on spawned grids
            </summary>
        </member>
        <member name="F:VRage.Game.ModAPI.SpawningOptions.SetNeutralOwner">
            <summary>
            Sets as owner random NPC faction founder, or random NPC
            </summary>
        </member>
        <member name="F:VRage.Game.ModAPI.SpawningOptions.TurnOffReactors">
            <summary>
            Disables all reactors on grids
            </summary>
        </member>
        <member name="F:VRage.Game.ModAPI.SpawningOptions.DisableSave">
            <summary>
            Disables save for created grids
            </summary>
        </member>
        <member name="F:VRage.Game.ModAPI.SpawningOptions.UseGridOrigin">
            <summary>
            Use saved prefab spawning
            </summary>
        </member>
        <member name="F:VRage.Game.ModAPI.SpawningOptions.SetAuthorship">
            <summary>
            Sets BuiltBy for blocks
            </summary>
        </member>
        <member name="F:VRage.Game.ModAPI.SpawningOptions.ReplaceColor">
            <summary>
            Replaces mask color (Vector3(1f, 0.2f, 0.55f)), with provided color
            </summary>
        </member>
        <member name="F:VRage.Game.ModAPI.SpawningOptions.UseOnlyWorldMatrix">
            <summary>
            
            </summary>
        </member>
        <member name="F:VRage.Game.ModAPI.SpawningOptions.RandomizeColor">
            <summary>
            Replaces mask color (Vector3(1f, 0.2f, 0.55f)), random color
            </summary>
        </member>
        <member name="F:VRage.Game.ModAPI.SpawningOptions.SetNpcSpawnedGrid">
            <summary>
            Sets NPC spawned grid to true for the spawned grids
            </summary>
        </member>
        <member name="F:VRage.Game.ModAPI.SpawningOptions.SetOwnerNobody">
            <summary>
            Sets ownership to nobody
            </summary>
        </member>
        <member name="T:VRage.Game.ModAPI.IMyPrefabManager">
            <summary>
            ModAPI interface giving ability for modders to spawn prefabs
            </summary>
        </member>
        <member name="M:VRage.Game.ModAPI.IMyPrefabManager.SpawnPrefab(System.Collections.Generic.List{VRage.Game.ModAPI.IMyCubeGrid},System.String,VRageMath.Vector3D,VRageMath.Vector3,VRageMath.Vector3,VRageMath.Vector3,VRageMath.Vector3,System.String,VRage.Game.ModAPI.SpawningOptions,System.Boolean,System.Action)">
            <summary>
            Spawns prefab
            </summary>
            <param name="resultList">List of grids were created</param>
            <param name="prefabName">Name of prefab</param>
            <param name="position">Place to spawn. See: <see cref="M:VRage.ModAPI.IMyEntities.FindFreePlace(VRageMath.Vector3D,System.Single,System.Int32,System.Int32,System.Single)"/></param>
            <param name="forward">Forward direction</param>
            <param name="up">Up direction</param>
            <param name="initialLinearVelocity">When spawned, would it would have this linear speed</param>
            <param name="initialAngularVelocity">When spawned, would it would have this angular speed</param>
            <param name="beaconName">Sets name to all beacons</param>
            <param name="spawningOptions">Special spawning options</param>
            <param name="updateSync">Random seed depends on this</param>
            <param name="callback">Called when prefab created</param>
        </member>
        <member name="M:VRage.Game.ModAPI.IMyPrefabManager.SpawnPrefab(System.Collections.Generic.List{VRage.Game.ModAPI.IMyCubeGrid},System.String,VRageMath.Vector3D,VRageMath.Vector3,VRageMath.Vector3,VRageMath.Vector3,VRageMath.Vector3,System.String,VRage.Game.ModAPI.SpawningOptions,System.Int64,System.Boolean,System.Action)">
            <summary>
            Spawns prefab
            </summary>
            <param name="resultList">List of grids were created</param>
            <param name="prefabName">Name of prefab</param>
            <param name="position">Place to spawn. See: <see cref="M:VRage.ModAPI.IMyEntities.FindFreePlace(VRageMath.Vector3D,System.Single,System.Int32,System.Int32,System.Single)"/></param>
            <param name="forward">Forward direction</param>
            <param name="up">Up direction</param>
            <param name="initialLinearVelocity">When spawned, would it would have this linear speed</param>
            <param name="initialAngularVelocity">When spawned, would it would have this angular speed</param>
            <param name="beaconName">Sets name to all beacons</param>
            <param name="spawningOptions">Special spawning options</param>
            <param name="ownerId"></param>
            <param name="updateSync">Random seed depends on this</param>
            <param name="callback">Called when prefab created</param>
        </member>
        <member name="M:VRage.Game.ModAPI.IMyPrefabManager.IsPathClear(VRageMath.Vector3D,VRageMath.Vector3D)">
            <summary>
            Checks if there is noting between 2 points. Raycasts inside
            </summary>
            <param name="from">World position 1</param>
            <param name="to">World position 2</param>
            <returns>True, if there is nothing between 2 points</returns>
        </member>
        <member name="M:VRage.Game.ModAPI.IMyPrefabManager.IsPathClear(VRageMath.Vector3D,VRageMath.Vector3D,System.Double)">
            <summary>
            Checks if there is noting between 2 points, in cylinder shape. Does 4 Raycasts inside
            </summary>
            <param name="from">World position 1</param>
            <param name="to">World position 2</param>
            <param name="halfSize">Cylinder radius</param>
            <returns>True, if there is nothing between 2 points</returns>
        </member>
        <member name="T:VRage.Game.ModAPI.IMyReflection">
            <summary>
            ModAPI interface giving some reflection tools
            </summary>
        </member>
        <member name="M:VRage.Game.ModAPI.IMyReflection.BaseTypeOf(System.Type)">
            <summary>
            <see cref="P:System.Type.BaseType"/>
            </summary>
        </member>
        <member name="M:VRage.Game.ModAPI.IMyReflection.GetInterfaces(System.Type)">
            <summary>
            <see cref="M:System.Type.GetInterfaces"/>
            </summary>
        </member>
        <member name="M:VRage.Game.ModAPI.IMyReflection.IsInstanceOfType(System.Type,System.Object)">
            <summary>
            <see cref="M:System.Type.IsInstanceOfType(System.Object)"/>
            </summary>
        </member>
        <member name="M:VRage.Game.ModAPI.IMyReflection.IsAssignableFrom(System.Type,System.Type)">
            <summary>
            <see cref="M:System.Type.IsAssignableFrom(System.Type)"/>
            </summary>
        </member>
        <member name="T:VRage.Game.ModAPI.IMyResourceDistributorComponent">
            <summary>
            ModAPI interface giving access to resource distributor
            </summary>
        </member>
        <member name="M:VRage.Game.ModAPI.IMyResourceDistributorComponent.MaxAvailableResourceByType(VRage.Game.MyDefinitionId,VRage.Game.ModAPI.IMyCubeGrid)">
            <summary>
            Gets maximum resource available by resource type 
            </summary>
            <param name="resourceTypeId">Resource type. Ex: MyResourceDistributorComponent.ElectricityId</param>
            <param name="grid">Should be not null for electricity</param>
            <returns>Available resource, or 0</returns>
        </member>
        <member name="M:VRage.Game.ModAPI.IMyResourceDistributorComponent.TotalRequiredInputByType(VRage.Game.MyDefinitionId,VRage.Game.ModAPI.IMyCubeGrid)">
            <summary>
            Gets currently needed resource by resource type 
            </summary>
            <param name="resourceTypeId">Resource type. Ex: MyResourceDistributorComponent.ElectricityId</param>
            <param name="grid">Should be not null for electricity</param>
            <returns>Available resource, or 0</returns>
        </member>
        <member name="P:VRage.Game.ModAPI.IMyResourceDistributorComponent.ResourceState">
            <summary>
            Gets current resource state
            </summary>
        </member>
        <member name="P:VRage.Game.ModAPI.IMyResourceDistributorComponent.SourcesEnabled">
            <summary>
            Gets if first found resources has enabled ResourceSource 
            </summary>
        </member>
        <member name="E:VRage.Game.ModAPI.IMyResourceDistributorComponent.OnPowerGenerationChanged">
            <summary>
            Called when power generation status changed
            </summary>
        </member>
        <member name="T:VRage.Game.ModAPI.IMySession">
            <summary>
            ModAPI giving access to MySession functions and properties for modders  
            </summary>
        </member>
        <member name="P:VRage.Game.ModAPI.IMySession.AssemblerEfficiencyMultiplier">
            <summary>
            Gets game session global assembler efficiency multiplier
            </summary>
        </member>
        <member name="P:VRage.Game.ModAPI.IMySession.AssemblerSpeedMultiplier">
            <summary>
            Gets game session global assembler speed multiplier
            </summary>
        </member>
        <member name="P:VRage.Game.ModAPI.IMySession.AutoHealing">
            <summary>
            Gets if game settings allows auto healing
            </summary>
        </member>
        <member name="P:VRage.Game.ModAPI.IMySession.AutoSaveInMinutes">
            <summary>
            Gets auto save game setting
            </summary>
        </member>
        <member name="M:VRage.Game.ModAPI.IMySession.BeforeStartComponents">
            <summary>
            Triggers BeforeStart for each game session component, resets game timer.
            </summary>
            <remarks>You should avoid calling this method, as it can crash the game</remarks>
        </member>
        <member name="P:VRage.Game.ModAPI.IMySession.CameraController">
            <summary>
            Gets current camera controller
            </summary>
        </member>
        <member name="P:VRage.Game.ModAPI.IMySession.CargoShipsEnabled">
            <summary>
            Gets if game settings allows auto healing
            </summary>
        </member>
        <member name="P:VRage.Game.ModAPI.IMySession.CreativeMode">
            <summary>
            Gets whether current create game is in creative mode
            </summary>
        </member>
        <member name="P:VRage.Game.ModAPI.IMySession.CurrentPath">
            <summary>
            Gets current game save path
            </summary>
        </member>
        <member name="P:VRage.Game.ModAPI.IMySession.Description">
            <summary>
            Gets or sets current game description (used in MOTD)
            </summary>
        </member>
        <member name="P:VRage.Game.ModAPI.IMySession.Camera">
            <summary>
            Gets current camera
            </summary>
        </member>
        <member name="P:VRage.Game.ModAPI.IMySession.CameraTargetDistance">
            <summary>
            Gets or sets the third person camera distance.
            </summary>
        </member>
        <member name="P:VRage.Game.ModAPI.IMySession.LocalHumanPlayer">
            <summary>
            Gets player that playing on this game window. Always null, when called on dedicated server instance, and not null in any other cases 
            </summary>
        </member>
        <member name="P:VRage.Game.ModAPI.IMySession.WeatherEffects">
            <summary>
            Gets MySectorWeatherComponent ModAPI interface
            </summary>
        </member>
        <member name="P:VRage.Game.ModAPI.IMySession.Config">
            <summary>
            Obtaining values from config is slow and can allocate memory!
            Do it only when necessary.
            </summary>
        </member>
        <member name="M:VRage.Game.ModAPI.IMySession.Draw">
            <summary>
            Calls Draw on all game session components
            </summary>
        </member>
        <member name="P:VRage.Game.ModAPI.IMySession.ElapsedPlayTime">
            <summary>
            Gets time elapsed since the start of current session
            </summary>
        </member>
        <member name="P:VRage.Game.ModAPI.IMySession.EnableCopyPaste">
            <summary>
            Get whether current player can copy/paste grids.
            </summary>
        </member>
        <member name="P:VRage.Game.ModAPI.IMySession.EnvironmentHostility">
            <summary>
            Gets current game environment hostility setting
            </summary>
        </member>
        <member name="P:VRage.Game.ModAPI.IMySession.GameDateTime">
            <summary>
            Gets and sets game date time, that is a sum of 2081 Jan 1 at 0:00:00 and <see cref="P:VRage.Game.ModAPI.IMySession.ElapsedPlayTime"/>
            Note using setter, would change <see cref="P:VRage.Game.ModAPI.IMySession.ElapsedPlayTime"/> as well
            </summary>
        </member>
        <member name="M:VRage.Game.ModAPI.IMySession.GameOver">
            <summary>
            Does nothing
            </summary>
        </member>
        <member name="M:VRage.Game.ModAPI.IMySession.GameOver(System.Nullable{VRage.Utils.MyStringId})">
            <summary>
            Does nothing
            </summary>
        </member>
        <member name="M:VRage.Game.ModAPI.IMySession.GetCheckpoint(System.String)">
            <summary>
            Gets current game save. Game is saved in several files. This function returns object builder for file: Sandbox.sbc
            </summary>
            <param name="saveName">Name of save</param>
            <returns>One of game save parts</returns>
            <seealso cref="M:VRage.Game.ModAPI.IMySession.GetSector"/>
        </member>
        <member name="M:VRage.Game.ModAPI.IMySession.GetSector">
            <summary>
            Gets current game save. Game is saved in several files. This function returns object builder for file: SANDBOX_0_0_0_.sbs
            </summary>
            <returns>One of game save parts</returns>
            <seealso cref="M:VRage.Game.ModAPI.IMySession.GetCheckpoint(System.String)"/>
        </member>
        <member name="M:VRage.Game.ModAPI.IMySession.GetWorld">
            <summary>
            Gets information what receives client when connecting to server
            </summary>
            <returns>Object builder of world</returns>
            <remarks>Entities are not streamed to client. Also some information maybe not sent to server</remarks>
        </member>
        <member name="P:VRage.Game.ModAPI.IMySession.GrinderSpeedMultiplier">
            <summary>
            Gets game session global grinder speed multiplier
            </summary>
        </member>
        <member name="P:VRage.Game.ModAPI.IMySession.HackSpeedMultiplier">
            <summary>
            Gets game session global hacking speed multiplier
            </summary>
        </member>
        <member name="P:VRage.Game.ModAPI.IMySession.InventoryMultiplier">
            <summary>
            Not used
            </summary>
        </member>
        <member name="P:VRage.Game.ModAPI.IMySession.CharactersInventoryMultiplier">
            <summary>
            Gets game session global characters inventory size multiplier
            </summary>
        </member>
        <member name="P:VRage.Game.ModAPI.IMySession.BlocksInventorySizeMultiplier">
            <summary>
            Gets game session global block inventory size multiplier
            </summary>
        </member>
        <member name="P:VRage.Game.ModAPI.IMySession.IsCameraAwaitingEntity">
            <summary>
            Not used
            </summary>
        </member>
        <member name="P:VRage.Game.ModAPI.IMySession.Mods">
            <summary>
            Gets or sets mods added to current game
            </summary>
            <remarks>Setting mods won't add them to current game, but will save them in game save</remarks>
        </member>
        <member name="P:VRage.Game.ModAPI.IMySession.IsCameraControlledObject">
            <summary>
            Gets if the current camera is the current controlled object (not spectator)
            </summary>
            <returns></returns>
        </member>
        <member name="P:VRage.Game.ModAPI.IMySession.IsCameraUserControlledSpectator">
            <summary>
            Gets if the current camera is the user controlled spectator
            </summary>
            <returns></returns>
        </member>
        <member name="M:VRage.Game.ModAPI.IMySession.IsPausable">
            <summary>
            Get whether game is pauseable (not multiplayer)
            </summary>
            <returns>True if game is pauseable</returns>
        </member>
        <member name="P:VRage.Game.ModAPI.IMySession.IsServer">
            <summary>
            Gets whether this game instance is server. (Not if game is multiplayer) 
            </summary>
        </member>
        <member name="P:VRage.Game.ModAPI.IMySession.MaxFloatingObjects">
            <summary>
            Gets maximum floating objects allowed in game settings
            </summary>
        </member>
        <member name="P:VRage.Game.ModAPI.IMySession.MaxBackupSaves">
            <summary>
            Gets maximum backups allowed in game settings
            </summary>
        </member>
        <member name="P:VRage.Game.ModAPI.IMySession.MaxPlayers">
            <summary>
            Gets maximum players allowed in game settings
            </summary>
        </member>
        <member name="P:VRage.Game.ModAPI.IMySession.MultiplayerAlive">
            <summary>
            Gets or sets whether there is connection with server. When it is false, a warning would appear. 
            </summary>
        </member>
        <member name="P:VRage.Game.ModAPI.IMySession.MultiplayerLastMsg">
            <summary>
            Gets or sets time in seconds, from last message from server
            </summary>
        </member>
        <member name="P:VRage.Game.ModAPI.IMySession.Name">
            <summary>
            Gets or sets name of the game
            </summary>
        </member>
        <member name="P:VRage.Game.ModAPI.IMySession.NegativeIntegrityTotal">
            <summary>
            Gets or sets amount of damage applied to blocks
            </summary>
        </member>
        <member name="P:VRage.Game.ModAPI.IMySession.OnlineMode">
            <summary>
            Gets current session online mode
            </summary>
        </member>
        <member name="P:VRage.Game.ModAPI.IMySession.Password">
            <summary>
            Gets or sets password, that player must enter to join server
            </summary>
        </member>
        <member name="P:VRage.Game.ModAPI.IMySession.PositiveIntegrityTotal">
            <summary>
            Gets or sets amount of integrity added to blocks
            </summary>
        </member>
        <member name="P:VRage.Game.ModAPI.IMySession.RefinerySpeedMultiplier">
            <summary>
            Gets or sets global refinery speed multiplier
            </summary>
        </member>
        <member name="M:VRage.Game.ModAPI.IMySession.RegisterComponent(VRage.Game.Components.MySessionComponentBase,VRage.Game.Components.MyUpdateOrder,System.Int32)">
            <summary>
            Registers game session component for updates. 
            </summary>
            <param name="component">Game session that should receive updates</param>
            <param name="updateOrder">Defines which update methods should be called</param>
            <param name="priority">Ignored</param>
        </member>
        <member name="M:VRage.Game.ModAPI.IMySession.GetComponentByInterfaceType``1">
            <summary>
            Gets session component of interface type T
            </summary>
            <typeparam name="T">interface type of the session component</typeparam>
            <returns>session component</returns>
        </member>
        <member name="M:VRage.Game.ModAPI.IMySession.Save(System.String)">
            <summary>
            Saves game
            </summary>
            <param name="customSaveName">Name of game save folder</param>
            <returns></returns>
        </member>
        <member name="M:VRage.Game.ModAPI.IMySession.SetCameraController(VRage.Game.MyCameraControllerEnum,VRage.ModAPI.IMyEntity,System.Nullable{VRageMath.Vector3D})">
            <summary>
            Sets mode of camera controller
            </summary>
            <param name="cameraControllerEnum">Mode of work</param>
            <param name="cameraEntity">Entity that camera should follow</param>
            <param name="position">Position of camera</param>
        </member>
        <member name="M:VRage.Game.ModAPI.IMySession.SetAsNotReady">
            <summary>
            Making game "not ready", preventing joining server for EOS server
            </summary>
        </member>
        <member name="P:VRage.Game.ModAPI.IMySession.ShowPlayerNamesOnHud">
            <summary>
            Gets whether player names should be drawn on hud
            </summary>
        </member>
        <member name="P:VRage.Game.ModAPI.IMySession.SurvivalMode">
            <summary>
            Gets whether current create game is in creative mode
            </summary>
        </member>
        <member name="P:VRage.Game.ModAPI.IMySession.ThrusterDamage">
            <summary>
            Gets whether thruster damage setting is enable
            </summary>
        </member>
        <member name="P:VRage.Game.ModAPI.IMySession.ThumbPath">
            <summary>
            Gets current game path to thumbnail
            </summary>
        </member>
        <member name="P:VRage.Game.ModAPI.IMySession.TimeOnBigShip">
            <summary>
            Gets time spent on controlling large grid
            </summary>
        </member>
        <member name="P:VRage.Game.ModAPI.IMySession.TimeOnFoot">
            <summary>
            Gets time spent on foot
            </summary>
        </member>
        <member name="P:VRage.Game.ModAPI.IMySession.TimeOnJetpack">
            <summary>
            Gets time spent flying on jetpack
            </summary>
        </member>
        <member name="P:VRage.Game.ModAPI.IMySession.TimeOnSmallShip">
            <summary>
            Gets time spent on controlling small ship
            </summary>
        </member>
        <member name="M:VRage.Game.ModAPI.IMySession.Unload">
            <summary>
            Unloads current game session. Calls <see cref="M:VRage.Game.ModAPI.IMySession.UnloadDataComponents"/>, <see cref="M:VRage.Game.ModAPI.IMySession.UnloadMultiplayer"/>
            </summary>
        </member>
        <member name="M:VRage.Game.ModAPI.IMySession.UnloadDataComponents">
            <summary>
            Unloads data components. Shouldn't be called directly. Use <see cref="M:VRage.Game.ModAPI.IMySession.Unload"/> instead
            </summary>
        </member>
        <member name="M:VRage.Game.ModAPI.IMySession.UnloadMultiplayer">
            <summary>
            Unloads data components. Shouldn't be called directly. Use <see cref="M:VRage.Game.ModAPI.IMySession.Unload"/> instead
            </summary>
        </member>
        <member name="M:VRage.Game.ModAPI.IMySession.UnregisterComponent(VRage.Game.Components.MySessionComponentBase)">
            <summary>
            Unregisters components from updates and calls.
            </summary>
            <param name="component">Component that should no longer work</param>
        </member>
        <member name="M:VRage.Game.ModAPI.IMySession.Update(VRage.Library.Utils.MyTimeSpan)">
            <summary>
            Updates games. Does 1 simulation tick
            </summary>
            <param name="time">Used in counting whether game save is required. Usually it is 16.67ms</param>
        </member>
        <member name="M:VRage.Game.ModAPI.IMySession.UpdateComponents">
            <summary>
            Updates games. Does 1 simulation tick, but without any other logic, that is executed in <see cref="M:VRage.Game.ModAPI.IMySession.Update(VRage.Library.Utils.MyTimeSpan)"/>
            </summary>
        </member>
        <member name="P:VRage.Game.ModAPI.IMySession.WeaponsEnabled">
            <summary>
            Gets whether weapons are enabled in current game 
            </summary>
        </member>
        <member name="P:VRage.Game.ModAPI.IMySession.WelderSpeedMultiplier">
            <summary>
            Gets current game welder speed global multiplier 
            </summary>
        </member>
        <member name="P:VRage.Game.ModAPI.IMySession.WorkshopId">
            <summary>
            Gets current game scenario workshop id
            </summary>
        </member>
        <member name="P:VRage.Game.ModAPI.IMySession.VoxelMaps">
            <summary>
            Gets ModAPI interface providing control over voxel maps
            </summary>
        </member>
        <member name="P:VRage.Game.ModAPI.IMySession.Factions">
            <summary>
            Gets ModAPI interface providing control over faction
            </summary>
        </member>
        <member name="P:VRage.Game.ModAPI.IMySession.DamageSystem">
            <summary>
            Gets ModAPI interface providing control over damage system
            </summary>
        </member>
        <member name="P:VRage.Game.ModAPI.IMySession.GPS">
            <summary>
            Gets ModAPI interface providing control over gps coordinates
            </summary>
        </member>
        <member name="E:VRage.Game.ModAPI.IMySession.OnSessionReady">
            <summary>
            Called when session is ready
            </summary>
        </member>
        <member name="E:VRage.Game.ModAPI.IMySession.OnSessionLoading">
            <summary>
            Called when session started loading
            </summary>
        </member>
        <member name="P:VRage.Game.ModAPI.IMySession.WorldBoundaries">
            <summary>
            Gets world boundaries. Not letting character leaving them
            </summary>
        </member>
        <member name="P:VRage.Game.ModAPI.IMySession.PromoteLevel">
            <summary>
            Gets the local player's promote level.
            </summary>
        </member>
        <member name="M:VRage.Game.ModAPI.IMySession.GetUserPromoteLevel(System.UInt64)">
            <summary>
            Gets a remote player's promote level.
            </summary>
            <param name="steamId">Player steamId</param>
            <returns>Player access level</returns>
        </member>
        <member name="P:VRage.Game.ModAPI.IMySession.HasCreativeRights">
            <summary>
            Checks if the local player is an admin or is promoted to space master (or higher).
            </summary>
        </member>
        <member name="M:VRage.Game.ModAPI.IMySession.IsUserAdmin(System.UInt64)">
            <summary>
            Checks if a given player is an admin (or higher).
            </summary>
            <param name="steamId"></param>
            <returns></returns>
        </member>
        <member name="M:VRage.Game.ModAPI.IMySession.SetComponentUpdateOrder(VRage.Game.Components.MySessionComponentBase,VRage.Game.Components.MyUpdateOrder)">
            <summary>
            Change the update order of a session component.
            
            There is a proxy for this method in the session component itself.
            </summary>
            <param name="component">The component to set the update order for</param>
            <param name="order">The update order</param>
        </member>
        <member name="P:VRage.Game.ModAPI.IMySession.Version">
            <summary>
            Get version of Space Engineers
            </summary>
        </member>
        <member name="P:VRage.Game.ModAPI.IMySession.OxygenProviderSystem">
            <summary>
            Gets ModAPI interface providing control oxygen system
            </summary>
        </member>
        <member name="P:VRage.Game.ModAPI.IMySession.GameplayFrameCounter">
            <summary>
            Gets current game amounts of ticks passed from start.
            Only gets updated when the game is not paused
            </summary>
        </member>
        <member name="P:VRage.Game.ModAPI.IMySession.TotalBotLimit">
            <summary>
            Gets limitation on maximum bot amount
            </summary>
        </member>
        <member name="M:VRage.Game.ModAPI.IMySession.TryGetAdminSettings(System.UInt64,VRage.Game.ModAPI.MyAdminSettingsEnum@)">
            <summary>
            Gets enabled admins settings
            </summary>
            <param name="steamId">Player steam id</param>
            <param name="adminSettings">Admin settings that is enabled for player</param>
            <returns>True when player found</returns>
        </member>
        <member name="M:VRage.Game.ModAPI.IMySession.IsUserInvulnerable(System.UInt64)">
            <summary>
            Gets whether user is invulnerable
            </summary>
            <param name="steamId">Player steamId</param>
            <returns>True if player is invulnerable</returns>
        </member>
        <member name="M:VRage.Game.ModAPI.IMySession.IsUserShowAllPlayers(System.UInt64)">
            <summary>
            Gets whether user can see all players
            </summary>
            <param name="steamId">Player steamId</param>
            <returns>True if player can see all players</returns>
        </member>
        <member name="M:VRage.Game.ModAPI.IMySession.IsUserUseAllTerminals(System.UInt64)">
            <summary>
            Gets whether user can see use all terminals
            </summary>
            <param name="steamId">Player steamId</param>
            <returns>True if player can use all terminals</returns>
        </member>
        <member name="M:VRage.Game.ModAPI.IMySession.IsUserUntargetable(System.UInt64)">
            <summary>
            Gets whether user can't be targeted by turrets
            </summary>
            <param name="steamId">Player steamId</param>
            <returns>True if player can't be targeted by turrets</returns>
        </member>
        <member name="M:VRage.Game.ModAPI.IMySession.IsUserKeepOriginalOwnershipOnPaste(System.UInt64)">
            <summary>
            Gets whether user can keep original BuiltBy of blocks when pasting grid
            </summary>
            <param name="steamId">Player steamId</param>
            <returns>True if player can keep original BuiltBy of blocks when pasting grid</returns>
        </member>
        <member name="M:VRage.Game.ModAPI.IMySession.IsUserIgnoreSafeZones(System.UInt64)">
            <summary>
            Gets whether user can ignore safezone settings
            </summary>
            <param name="steamId">Player steamId</param>
            <returns>True if player can ignore safezone settings</returns>
        </member>
        <member name="M:VRage.Game.ModAPI.IMySession.IsUserIgnorePCULimit(System.UInt64)">
            <summary>
            Gets whether user can ignore pcu and block limits
            </summary>
            <param name="steamId">Player steamId</param>
            <returns>True if player can ignore pcu and block limits</returns>
        </member>
        <member name="T:VRage.Game.ModAPI.IMySlimBlock">
            <summary>
            Basic block interface (Mod api interface)
            </summary>
        </member>
        <member name="M:VRage.Game.ModAPI.IMySlimBlock.AddNeighbours">
            <summary>
            Calls function that adds neighbours to block
            </summary>
        </member>
        <member name="M:VRage.Game.ModAPI.IMySlimBlock.ApplyAccumulatedDamage(System.Boolean)">
            <summary>
            When damage is less than threshold, applies not
            </summary>
            <param name="addDirtyParts"></param>
        </member>
        <member name="M:VRage.Game.ModAPI.IMySlimBlock.CalculateCurrentModel(VRageMath.Matrix@)">
            <summary>
            Get current model for block. When block is not functional, it would return current construction model
            </summary>
            <param name="orientation">Gets local orientation matrix</param>
            <returns>Path to model</returns>
        </member>
        <member name="M:VRage.Game.ModAPI.IMySlimBlock.ComputeScaledCenter(VRageMath.Vector3D@)">
            <summary>
            Gets the block center as a Vector3D, relative to grid WorldMatrix
            </summary>
            <param name="scaledCenter"></param>
        </member>
        <member name="M:VRage.Game.ModAPI.IMySlimBlock.ComputeScaledHalfExtents(VRageMath.Vector3@)">
            <summary>
            Gets the half extents for the block
            </summary>
            <param name="scaledHalfExtents"></param>
        </member>
        <member name="M:VRage.Game.ModAPI.IMySlimBlock.ComputeWorldCenter(VRageMath.Vector3D@)">
            <summary>
            Gets the world position for the center of the block
            </summary>
            <param name="worldCenter">Center of block in world coordinates</param>
        </member>
        <member name="P:VRage.Game.ModAPI.IMySlimBlock.BlockGeneralDamageModifier">
            <summary>
            Allows you to get or set the damage modifier of a block.
            </summary>
        </member>
        <member name="P:VRage.Game.ModAPI.IMySlimBlock.FatBlock">
            <summary>
            Gets the fatblock if there is one
            </summary>
        </member>
        <member name="M:VRage.Game.ModAPI.IMySlimBlock.FixBones(System.Single,System.Single)">
            <summary>
            Repair block deformation
            </summary>
            <param name="oldDamage">Integrity of block before repairing block. Less value, gives bigger fix bone result</param>
            <param name="maxAllowedBoneMovement">Limit of bone fix</param>
        </member>
        <member name="M:VRage.Game.ModAPI.IMySlimBlock.FullyDismount(VRage.Game.ModAPI.IMyInventory)">
            <summary>
            Reset built level to 0
            </summary>
            <param name="outputInventory">Inventory that would receive items from block</param>
        </member>
        <member name="M:VRage.Game.ModAPI.IMySlimBlock.GetObjectBuilder(System.Boolean)">
            <summary>
            Gets the object builder for the slimblock
            </summary>
            <param name="copy"><b>true</b> to return a copy</param>
            <returns></returns>
        </member>
        <member name="M:VRage.Game.ModAPI.IMySlimBlock.InitOrientation(VRageMath.Vector3I@,VRageMath.Vector3I@)">
            <summary>
            Sets orientation of block
            </summary>
            <param name="forward">Forward vector</param>
            <param name="up">Up vector</param>
        </member>
        <member name="M:VRage.Game.ModAPI.IMySlimBlock.InitOrientation(VRageMath.Base6Directions.Direction,VRageMath.Base6Directions.Direction)">
            <summary>
            Sets orientation of block
            </summary>
            <param name="Forward">Forward direction</param>
            <param name="Up">Up direction</param>
        </member>
        <member name="M:VRage.Game.ModAPI.IMySlimBlock.InitOrientation(VRageMath.MyBlockOrientation)">
            <summary>
            Sets orientation of block
            </summary>
            <param name="orientation">Block orientation</param>
        </member>
        <member name="M:VRage.Game.ModAPI.IMySlimBlock.MoveItemsFromConstructionStockpile(VRage.Game.ModAPI.IMyInventory,VRage.Game.MyItemFlags)">
            <summary>
            Transfer construction components from inventory to stockpile
            </summary>
            <param name="toInventory">Inventory that would get items</param>
            <param name="flags">Use only <see cref="F:VRage.Game.MyItemFlags.None"/></param>
        </member>
        <member name="M:VRage.Game.ModAPI.IMySlimBlock.RemoveNeighbours">
            <summary>
            Removes block neighbours
            </summary>
        </member>
        <member name="M:VRage.Game.ModAPI.IMySlimBlock.SetToConstructionSite">
            <summary>
            Resets welded integrity to minimal value
            </summary>
        </member>
        <member name="M:VRage.Game.ModAPI.IMySlimBlock.SpawnConstructionStockpile">
            <summary>
            Spawn contents of construction stockpile
            </summary>
        </member>
        <member name="M:VRage.Game.ModAPI.IMySlimBlock.SpawnFirstItemInConstructionStockpile">
            <summary>
            Adds the first component to the stockpile
            </summary>
        </member>
        <member name="M:VRage.Game.ModAPI.IMySlimBlock.UpdateVisual">
            <summary>
            Drops visual cache. May fix some render problems.
            </summary>
        </member>
        <member name="P:VRage.Game.ModAPI.IMySlimBlock.CubeGrid">
            <summary>
            Gets the grid the slimblock is on
            </summary>
        </member>
        <member name="M:VRage.Game.ModAPI.IMySlimBlock.GetColorMask">
            <summary>
            Gets block color
            </summary>
            <returns>Color</returns>
        </member>
        <member name="M:VRage.Game.ModAPI.IMySlimBlock.DecreaseMountLevel(System.Single,VRage.Game.ModAPI.IMyInventory,System.Boolean)">
            ---
            <summary>
            Decreases the build level of a block
            </summary>
            <param name="grinderAmount">The integrity amount of change</param>
            <param name="outputInventory">The inventory where output components will be sent to</param>
            <param name="useDefaultDeconstructEfficiency"></param>
        </member>
        <member name="M:VRage.Game.ModAPI.IMySlimBlock.IncreaseMountLevel(System.Single,System.Int64,VRage.Game.ModAPI.IMyInventory,System.Single,System.Boolean,VRage.Game.MyOwnershipShareModeEnum)">
            <summary>
            Increases the build level of a block
            </summary>
            <param name="welderMountAmount">The integrity amount of change</param>
            <param name="welderOwnerPlayerId">The player id of the entity increasing the mount level</param>
            <param name="outputInventory">The inventory where components are taken from</param>
            <param name="maxAllowedBoneMovement">Maximum movement of bones</param>
            <param name="isHelping">Is this increase helping another player</param>
            <param name="share">ShareMode used when block becomes functional</param>
        </member>
        <member name="M:VRage.Game.ModAPI.IMySlimBlock.GetConstructionStockpileItemAmount(VRage.Game.MyDefinitionId)">
            <summary>
            Get the amount of items in the construction stockpile
            </summary>
            <param name="id">Definition of component in stockpile to check</param>
            <returns>Amount of components in the stockpile of this type</returns>
        </member>
        <member name="M:VRage.Game.ModAPI.IMySlimBlock.MoveItemsToConstructionStockpile(VRage.Game.ModAPI.IMyInventory)">
            <summary>
            Move items missing from an inventory into the construction stockpile
            </summary>
            <param name="fromInventory">The inventory where the components are being taken from</param>
        </member>
        <member name="M:VRage.Game.ModAPI.IMySlimBlock.ClearConstructionStockpile(VRage.Game.ModAPI.IMyInventory)">
            <summary>
            Clears out the construction stockpile and moves the components into a destination inventory
            </summary>
            <param name="outputInventory">The inventory where the components are moved into</param>
        </member>
        <member name="M:VRage.Game.ModAPI.IMySlimBlock.PlayConstructionSound(VRage.Game.ModAPI.MyIntegrityChangeEnum,System.Boolean)">
            <summary>
            Play the construction sound associated with the integrity change
            </summary>
            <param name="integrityChangeType">Type of integrity change</param>
            <param name="deconstruction">Is this deconstruction?</param>
        </member>
        <member name="M:VRage.Game.ModAPI.IMySlimBlock.CanContinueBuild(VRage.Game.ModAPI.IMyInventory)">
            <summary>
            Can we continue to weld this block?
            </summary>
            <param name="sourceInventory">Source inventory that is used for components</param>
            <returns>True if block integrity not full</returns>
        </member>
        <member name="P:VRage.Game.ModAPI.IMySlimBlock.BlockDefinition">
            <summary>
            The blocks definition (cast to MyCubeBlockDefinition)
            </summary>
        </member>
        <member name="P:VRage.Game.ModAPI.IMySlimBlock.Max">
            <summary>
            Largest part of block
            </summary>
        </member>
        <member name="P:VRage.Game.ModAPI.IMySlimBlock.Min">
            <summary>
            Min position in the grid
            </summary>
        </member>
        <member name="P:VRage.Game.ModAPI.IMySlimBlock.Orientation">
            <summary>
            Blocks orientation
            </summary>
        </member>
        <member name="P:VRage.Game.ModAPI.IMySlimBlock.Neighbours">
            <summary>
            OBSOLETE:  allocates memory use GetNeighbours function. The blocks that neighbour this block
            </summary>
        </member>
        <member name="M:VRage.Game.ModAPI.IMySlimBlock.GetNeighbours(System.Collections.Generic.ICollection{VRage.Game.ModAPI.IMySlimBlock})">
            <summary>
             The blocks that neighbour this block. Doesn't allocate memory
            </summary>
        </member>
        <member name="M:VRage.Game.ModAPI.IMySlimBlock.GetWorldBoundingBox(VRageMath.BoundingBoxD@,System.Boolean)">
            <summary>
            The AABB of this block
            </summary>
            <param name="aabb"></param>
            <param name="useAABBFromBlockCubes"></param>
        </member>
        <member name="P:VRage.Game.ModAPI.IMySlimBlock.Dithering">
            <summary>
            Sets the transparency of the block.
            </summary>
            <remarks>Not synced.</remarks>
        </member>
        <member name="P:VRage.Game.ModAPI.IMySlimBlock.BuiltBy">
            <summary>
            Identity ID of the builder of this block.
            </summary>
        </member>
        <member name="P:VRage.Game.ModAPI.IMySlimBlock.ComponentStack">
            <summary>
            Gets the component stack of the block
            </summary>
        </member>
        <member name="P:VRage.Game.ModAPI.IMySlimBlock.IsMovedBySplit">
            <summary>
            Gets if the block is in process of being moved from one grid to the other. Happens when grid splits to two.
            </summary>
        </member>
        <member name="T:VRage.Game.ModAPI.MyCameraMode">
            <summary>
            Represents camera work mode
            </summary>
        </member>
        <member name="T:VRage.Game.ModAPI.MyLockEntityState">
            <summary>
            Represents camera locked entity 
            </summary>
        </member>
        <member name="F:VRage.Game.ModAPI.MyLockEntityState.LocalMatrix">
            <summary>
            Local matrix 
            </summary>
        </member>
        <member name="F:VRage.Game.ModAPI.MyLockEntityState.LocalVector">
            <summary>
            Difference between camera position and character head matrix translation or entity world volume center 
            </summary>
        </member>
        <member name="F:VRage.Game.ModAPI.MyLockEntityState.LocalDistance">
            <summary>
            <see cref="M:VRageMath.Vector3D.Length"/> of Local vector
            </summary>
        </member>
        <member name="F:VRage.Game.ModAPI.MyLockEntityState.LastKnownPosition">
            <summary>
            Last position of tracked entity
            </summary>
        </member>
        <member name="F:VRage.Game.ModAPI.MyLockEntityState.LockEntityID">
            <summary>
            EntityId of locked entity
            </summary>
        </member>
        <member name="F:VRage.Game.ModAPI.MyLockEntityState.LockEntityDisplayName">
            <summary>
            Name of locked entity
            </summary>
        </member>
        <member name="T:VRage.Game.ModAPI.IMySpectatorTools">
            <summary>
            ModAPI interface giving access to spector control
            </summary>
        </member>
        <member name="M:VRage.Game.ModAPI.IMySpectatorTools.SetTarget(VRage.ModAPI.IMyEntity)">
            <summary>
            Set tracked target
            </summary>
            <param name="ent">Entity to follow</param>
        </member>
        <member name="M:VRage.Game.ModAPI.IMySpectatorTools.GetTarget">
            <summary>
            Gets current tracked entity
            </summary>
            <returns>Entity</returns>
        </member>
        <member name="M:VRage.Game.ModAPI.IMySpectatorTools.SetMode(VRage.Game.ModAPI.MyCameraMode)">
            <summary>
            Set camera work mode
            </summary>
            <param name="mode">Mode of work</param>
        </member>
        <member name="M:VRage.Game.ModAPI.IMySpectatorTools.GetMode">
            <summary>
            Gets current camera work
            </summary>
            <returns>Mode of work</returns>
        </member>
        <member name="M:VRage.Game.ModAPI.IMySpectatorTools.LockHitEntity">
            <summary>
            Lock entity that you look at
            </summary>
        </member>
        <member name="P:VRage.Game.ModAPI.IMySpectatorTools.TrackedSlots">
            <summary>
            Get tracked entities
            </summary>
        </member>
        <member name="M:VRage.Game.ModAPI.IMySpectatorTools.ClearTrackedSlot(System.Int32)">
            <summary>
            Removes tracking entity at slot
            </summary>
            <param name="slotIndex">Slot to remove</param>
        </member>
        <member name="M:VRage.Game.ModAPI.IMySpectatorTools.SaveTrackedSlot(System.Int32)">
            <summary>
            Save current camera and track settings at slot
            </summary>
            <param name="slotIndex">Index to save at</param>
        </member>
        <member name="M:VRage.Game.ModAPI.IMySpectatorTools.SelectTrackedSlot(System.Int32)">
            <summary>
            Switch to selected
            </summary>
            <param name="slotIndex"></param>
        </member>
        <member name="M:VRage.Game.ModAPI.IMySpectatorTools.NextPlayer">
            <summary>
            Switching camera to next player
            </summary>
        </member>
        <member name="M:VRage.Game.ModAPI.IMySpectatorTools.PreviousPlayer">
            <summary>
            Switching camera to previous player
            </summary>
        </member>
        <member name="P:VRage.Game.ModAPI.IMyStoreItem.Id">
            <summary>
            The entity id of the store item
            </summary>
        </member>
        <member name="P:VRage.Game.ModAPI.IMyStoreItem.Item">
            <summary>
            Definition Id of the item
            </summary>
        </member>
        <member name="P:VRage.Game.ModAPI.IMyStoreItem.ItemType">
            <summary>
            The type of item. eg: PhysicalItem, Grid, etc 
            </summary>
        </member>
        <member name="P:VRage.Game.ModAPI.IMyStoreItem.Amount">
            <summary>
            The amount of the item that is available for purchase in the store
            </summary>
        </member>
        <member name="P:VRage.Game.ModAPI.IMyStoreItem.RemovedAmount">
            <summary>
            The amount that has been removed from the item through purchases (ie: Purchased Amount)
            </summary>
        </member>
        <member name="P:VRage.Game.ModAPI.IMyStoreItem.PricePerUnit">
            <summary>
            The individual cost of a single item.
            </summary>
        </member>
        <member name="P:VRage.Game.ModAPI.IMyStoreItem.StoreItemType">
            <summary>
            Defines whether the item is an Offer (store is selling to you) or an Order (store is buying from you)
            </summary>
        </member>
        <member name="P:VRage.Game.ModAPI.IMyStoreItem.IsActive">
            <summary>
            Determines if Amount is greater than 0
            </summary>
        </member>
        <member name="P:VRage.Game.ModAPI.IMyStoreItem.PrefabName">
            <summary>
            The name of the Prefab Definition SubtypeId if the item is a Grid
            </summary>
        </member>
        <member name="P:VRage.Game.ModAPI.IMyStoreItem.PrefabTotalPcu">
            <summary>
            The PCU value of a Grid item
            </summary>
        </member>
        <member name="P:VRage.Game.ModAPI.IMyStoreItem.PricePerUnitDiscount">
            <summary>
            This governs the tooltip that appears when you hover your cursor over the price in the store (eg: 0.5 for 50% discount). This doesn't actually affect the price, use Amount to adjust that.
            </summary>
        </member>
        <member name="P:VRage.Game.ModAPI.IMyStoreItem.IsCustomStoreItem">
            <summary>
            Determines if the item should behave similar to how store items in Vanilla Economy Stations work (eg: doesn't require physical inventory). This is required when adding Gas / Grid items to a store.
            </summary>
        </member>
        <member name="E:VRage.Game.ModAPI.IMyStoreItem.OnTransaction">
            <summary>
            When player makes an transaction regarding this item
            
            int - amount sold
            int - amount remaining
            int - price of transaction
            long - owner of block
            long - buyer/seller
            </summary>
        </member>
        <member name="E:VRage.Game.ModAPI.IMyStoreItem.OnCancel">
            <summary>
            When owner of store block cancels order/offer regarding this item
            </summary>
        </member>
        <member name="T:VRage.Game.ModAPI.IMyTriangleVertexIndices">
            <summary>
            Interface used to read the mesh
            </summary>
        </member>
        <member name="P:VRage.Game.ModAPI.IMyTriangleVertexIndices.I0">
            <summary>
            1 Vertex index
            </summary>
        </member>
        <member name="P:VRage.Game.ModAPI.IMyTriangleVertexIndices.I1">
            <summary>
            2 Vertex index
            </summary>
        </member>
        <member name="P:VRage.Game.ModAPI.IMyTriangleVertexIndices.I2">
            <summary>
            3 Vertex index
            </summary>
        </member>
        <member name="T:VRage.Game.ModAPI.IMyUtilities">
            <summary>
            ModAPI interface giving access to utility functions 
            </summary>
        </member>
        <member name="P:VRage.Game.ModAPI.IMyUtilities.ConfigDedicated">
            <summary>
            Gets config of dedicated server
            </summary>
        </member>
        <member name="M:VRage.Game.ModAPI.IMyUtilities.GetTypeName(System.Type)">
            <summary>
            Gets name of type
            </summary>
            <param name="type">Type</param>
            <returns>Name</returns>
            <seealso cref="T:VRage.Game.ModAPI.IMyReflection"/>
        </member>
        <member name="M:VRage.Game.ModAPI.IMyUtilities.ShowNotification(System.String,System.Int32,System.String)">
            <summary>
            Shows notification
            </summary>
            <param name="message">Message text</param>
            <param name="disappearTimeMs">How long notification would stay (in milliseconds)</param>
            <param name="font">Font (color).</param>
            <seealso cref="T:VRage.Game.MyFontEnum"/>
        </member>
        <member name="M:VRage.Game.ModAPI.IMyUtilities.CreateNotification(System.String,System.Int32,System.String)">
            <summary>
            Create a notification object.
            The object needs to have Show() called on it to be shown.
            On top of that you can dynamically change the text, font and adjust the time to live.
            </summary>
            <param name="message">Message text</param>
            <param name="disappearTimeMs">How long notification would stay (in milliseconds)</param>
            <param name="font">Font (color).</param>
            <returns>The notification object.</returns>
            <seealso cref="T:VRage.Game.MyFontEnum"/>
        </member>
        <member name="M:VRage.Game.ModAPI.IMyUtilities.ShowMessage(System.String,System.String)">
            <summary>
            Shows message for local player without sending it to other players
            </summary>
            <param name="sender">Who is sender. Example: Good.bot</param>
            <param name="messageText">Text of message</param>
        </member>
        <member name="M:VRage.Game.ModAPI.IMyUtilities.SendMessage(System.String)">
            <summary>
            Send message to other players
            </summary>
            <param name="messageText">Text of message</param>
        </member>
        <member name="E:VRage.Game.ModAPI.IMyUtilities.MessageEntered">
            <summary>
            Old handler. Use <see cref="E:VRage.Game.ModAPI.IMyUtilities.MessageEnteredSender"/> instead
            </summary>
        </member>
        <member name="E:VRage.Game.ModAPI.IMyUtilities.MessageEnteredSender">
            <summary>
            Called when player sending message. If you change <b>SendMessageToOthers</b> to false, message won't be sent to other players and server
            It may be used to handle local commands like /wave
            </summary>
        </member>
        <member name="E:VRage.Game.ModAPI.IMyUtilities.MessageRecieved">
            <summary>
            Called when message arrived from server (other player). Arguments - Player SteamId and message text. 
            </summary>
        </member>
        <member name="M:VRage.Game.ModAPI.IMyUtilities.FileExistsInModLocation(System.String,VRage.Game.MyObjectBuilder_Checkpoint.ModItem)">
            <summary>
            Checks if file exists in other mod folder
            </summary>
            <param name="file">Relative path to file</param>
            <param name="modItem">Mod to test</param>
            <returns>True if file exists</returns>
        </member>
        <member name="M:VRage.Game.ModAPI.IMyUtilities.FileExistsInGameContent(System.String)">
            <summary>
            Checks if file exists in game content folder. (Folder where SE is installed)
            </summary>
            <param name="file">Relative file path</param>
            <returns>True if file exists</returns>
        </member>
        <member name="M:VRage.Game.ModAPI.IMyUtilities.FileExistsInGlobalStorage(System.String)">
            <summary>
            Checks if file exists in %APPDATA%/Roaming/SpaceEngineers/Storage folder. (Folder where SE is installed)
            </summary>
            <param name="file">Relative file path</param>
            <returns>True if file exists</returns>
        </member>
        <member name="M:VRage.Game.ModAPI.IMyUtilities.FileExistsInLocalStorage(System.String,System.Type)">
            <summary>
            Checks if file exists in %APPDATA%/Roaming/SpaceEngineers/Storage/{Assembly Scope}
            Where {Assembly Scope} - callingType.Assembly.ManifestModule.ScopeName
            </summary>
            <param name="file">Relative file path</param>
            <param name="callingType">Use any of your mod classes</param>
            <returns>True if file exists</returns>
        </member>
        <member name="M:VRage.Game.ModAPI.IMyUtilities.FileExistsInWorldStorage(System.String,System.Type)">
            <summary>
            Checks if file exists in world save %APPDATA%/Roaming/SpaceEngineers/Save/{SteamId}/{WorldName}/Storage/{Assembly Scope}
            Where {Assembly Scope} - callingType.Assembly.ManifestModule.ScopeName
            </summary>
            <param name="file">Relative file path</param>
            <param name="callingType">Use any of your mod classes</param>
            <returns>True if file exists</returns>
        </member>
        <member name="M:VRage.Game.ModAPI.IMyUtilities.DeleteFileInGlobalStorage(System.String)">
            <summary>
            Deletes file in global storage %APPDATA%/Roaming/SpaceEngineers/Storage
            </summary>
            <param name="file">Relative path</param>
        </member>
        <member name="M:VRage.Game.ModAPI.IMyUtilities.DeleteFileInLocalStorage(System.String,System.Type)">
            <summary>
            Deletes file in local storage %APPDATA%/Roaming/SpaceEngineers/Storage/{Assembly Scope}
            Where {Assembly Scope} - callingType.Assembly.ManifestModule.ScopeName
            </summary>
            <param name="file">Relative file path</param>
            <param name="callingType">Use any of your mod classes</param>
        </member>
        <member name="M:VRage.Game.ModAPI.IMyUtilities.DeleteFileInWorldStorage(System.String,System.Type)">
            <summary>
            Deletes file in world storage %APPDATA%/Roaming/SpaceEngineers/Save/{SteamId}/{WorldName}/Storage/{Assembly Scope}
            Where {Assembly Scope} - callingType.Assembly.ManifestModule.ScopeName
            </summary>
            <param name="file">Relative file path</param>
            <param name="callingType">Use any of your mod classes</param>
        </member>
        <member name="M:VRage.Game.ModAPI.IMyUtilities.ReadFileInModLocation(System.String,VRage.Game.MyObjectBuilder_Checkpoint.ModItem)">
             <summary>
             Reads text file from the specified mod's directory.
             </summary>
             <param name="file">Relative file path</param>
             <param name="modItem">The mod to read from. This can be acquired from <see cref="T:VRage.Game.ModAPI.IMySession"/> or <see cref="P:VRage.Game.MyModContext.ModItem"/>.</param>
            <returns>Text reader</returns>
        </member>
        <member name="M:VRage.Game.ModAPI.IMyUtilities.ReadFileInGameContent(System.String)">
            <summary>
            Reads text file from game content folder. (Folder where SE is installed)
            </summary>
            <param name="file">Relative file path</param>
            <returns>Text reader</returns>
        </member>
        <member name="M:VRage.Game.ModAPI.IMyUtilities.ReadFileInGlobalStorage(System.String)">
            <summary>
            Reads text file from global storage %APPDATA%/Roaming/SpaceEngineers/Storage
            </summary>
            <param name="file">Relative file path</param>
            <returns>Text reader</returns>
        </member>
        <member name="M:VRage.Game.ModAPI.IMyUtilities.ReadFileInLocalStorage(System.String,System.Type)">
            <summary>
            Reads text file from local storage %APPDATA%/Roaming/SpaceEngineers/Storage/{Assembly Scope}
            </summary>
            <param name="file">Relative file path</param>
            <param name="callingType">Use any of your mod classes</param>
            <returns>Text reader</returns>
        </member>
        <member name="M:VRage.Game.ModAPI.IMyUtilities.ReadFileInWorldStorage(System.String,System.Type)">
            <summary>
            Read text file from world storage %APPDATA%/Roaming/SpaceEngineers/Save/{SteamId}/{WorldName}/Storage/{Assembly Scope}
            </summary>
            <param name="file">Relative file path</param>
            <param name="callingType">Use any of your mod classes</param>
            <returns>Text reader</returns>
        </member>
        <member name="M:VRage.Game.ModAPI.IMyUtilities.WriteFileInGlobalStorage(System.String)">
            <summary>
            Write text to file from local storage %APPDATA%/Roaming/SpaceEngineers/Storage/{Assembly Scope}
            </summary>
            <param name="file">Relative file path</param>
            <returns>Text writer</returns>
        </member>
        <member name="M:VRage.Game.ModAPI.IMyUtilities.WriteFileInLocalStorage(System.String,System.Type)">
            <summary>
            Write text to file from local storage %APPDATA%/Roaming/SpaceEngineers/Storage/{Assembly Scope}
            </summary>
            <param name="file">Relative file path</param>
            <param name="callingType">Use any of your mod classes</param>
            <returns>Text writer</returns>
        </member>
        <member name="M:VRage.Game.ModAPI.IMyUtilities.WriteFileInWorldStorage(System.String,System.Type)">
            <summary>
            Write text to file from current world's storage directory. %APPDATA%/Roaming/SpaceEngineers/Save/{SteamId}/{WorldName}/Storage/{Assembly Scope}
            </summary>
            <param name="file">Relative file path</param>
            <param name="callingType">Use any of your mod classes</param>
            <returns>Text writer</returns>
        </member>
        <member name="P:VRage.Game.ModAPI.IMyUtilities.GamePaths">
            <summary>
            Gets ModAPI interface that, giving you information about most important game paths 
            </summary>
        </member>
        <member name="P:VRage.Game.ModAPI.IMyUtilities.IsDedicated">
            <summary>
            Gets if this game instance is dedicated server
            </summary>
        </member>
        <member name="M:VRage.Game.ModAPI.IMyUtilities.SerializeToXML``1(``0)">
            <summary>
            Serializing object to xml. See https://docs.microsoft.com/en-us/dotnet/standard/serialization/controlling-xml-serialization-using-attributes
            </summary>
            <param name="objToSerialize">Object to save</param>
            <typeparam name="T">Type of object to save</typeparam>
            <returns>Xml</returns>
            <remarks>Serialization is slow. You should prefer <see cref="M:VRage.Game.ModAPI.IMyUtilities.SerializeToBinary``1(``0)"/></remarks>
        </member>
        <member name="M:VRage.Game.ModAPI.IMyUtilities.SerializeFromXML``1(System.String)">
            <summary>
            Deserializing object to xml. See https://docs.microsoft.com/en-us/dotnet/standard/serialization/controlling-xml-serialization-using-attributes
            </summary>
            <param name="buffer">Xml</param>
            <typeparam name="T">Type of object you have been serializing to</typeparam>
            <returns>Object of desired T</returns>
            <remarks>Deserialization is slow. You should prefer <see cref="M:VRage.Game.ModAPI.IMyUtilities.SerializeFromBinary``1(System.Byte[])"/>
            Use VRage.Serialization.SerializableDictionary instead of <see cref="T:System.Collections.Generic.Dictionary`2"/></remarks>
        </member>
        <member name="M:VRage.Game.ModAPI.IMyUtilities.SerializeToBinary``1(``0)">
            <summary>
            Uses ProtoBuf to serialize an object into a byte array.
            You need mark class with <b>[ProtoContract]</b> and each member that you wish to serialize with <b>[ProtoMember(uniqId)]</b>
            </summary>
            <param name="obj">Object to serialize</param>
            <returns>Object serialized as bytes</returns>
        </member>
        <member name="M:VRage.Game.ModAPI.IMyUtilities.SerializeFromBinary``1(System.Byte[])">
            <summary>
            Uses ProtoBuf to deserialize an object from a byte array.
            </summary>
            <param name="data">Object serialized as bytes</param>
            <returns>Deserialized object</returns>
        </member>
        <member name="M:VRage.Game.ModAPI.IMyUtilities.InvokeOnGameThread(System.Action,System.String,System.Int32,System.Int32)">
            <summary>
            Invokes action on simulation thread
            </summary>
            <param name="action">Method to call</param>
            <param name="invokerName">Description of caller</param>
            <param name="StartAt">Target frame when this action should be called (<see cref="P:VRage.Game.ModAPI.IMySession.GameplayFrameCounter"/>)</param>
            <param name="RepeatTimes">How many times this action should be invoked</param>
        </member>
        <member name="M:VRage.Game.ModAPI.IMyUtilities.ShowMissionScreen(System.String,System.String,System.String,System.String,System.Action{VRage.Game.ModAPI.ResultEnum},System.String)">
            <summary>
            Shows mission screen
            </summary>
            <param name="screenTitle">Screen title</param>
            <param name="currentObjectivePrefix">Subtitle prefix</param>
            <param name="currentObjective">Subtitle</param>
            <param name="screenDescription">Description</param>
            <param name="callback">Called when player press ok button or close window</param>
            <param name="okButtonCaption">Ok button text</param>
        </member>
        <member name="M:VRage.Game.ModAPI.IMyUtilities.GetObjectiveLine">
            <summary>
            Gets objectives interface
            </summary>
            <returns>Interface to work with objectives</returns>
        </member>
        <member name="M:VRage.Game.ModAPI.IMyUtilities.ReadBinaryFileInModLocation(System.String,VRage.Game.MyObjectBuilder_Checkpoint.ModItem)">
             <summary>
             Reads text file from the specified mod's directory.
             </summary>
             <param name="file">Relative file path</param>
             <param name="modItem">The mod to read from. This can be acquired from <see cref="T:VRage.Game.ModAPI.IMySession"/> or <see cref="P:VRage.Game.MyModContext.ModItem"/>.</param>
            <returns>Text reader</returns>
        </member>
        <member name="M:VRage.Game.ModAPI.IMyUtilities.ReadBinaryFileInGameContent(System.String)">
            <summary>
            Reads text file from game content folder. (Folder where SE is installed)
            </summary>
            <param name="file">Relative file path</param>
            <returns>Text reader</returns>
        </member>
        <member name="M:VRage.Game.ModAPI.IMyUtilities.ReadBinaryFileInGlobalStorage(System.String)">
            <summary>
            Reads text file from global storage %APPDATA%/Roaming/SpaceEngineers/Storage
            </summary>
            <param name="file">Relative file path</param>
            <returns>Text reader</returns>
        </member>
        <member name="M:VRage.Game.ModAPI.IMyUtilities.ReadBinaryFileInLocalStorage(System.String,System.Type)">
            <summary>
            Reads binary file from local storage %APPDATA%/Roaming/SpaceEngineers/Storage/{Assembly Scope}
            </summary>
            <param name="file">Relative file path</param>
            <param name="callingType">Use any of your mod classes</param>
            <returns>Text reader</returns>
        </member>
        <member name="M:VRage.Game.ModAPI.IMyUtilities.ReadBinaryFileInWorldStorage(System.String,System.Type)">
            <summary>
            Read binary file from world storage %APPDATA%/Roaming/SpaceEngineers/Save/{SteamId}/{WorldName}/Storage/{Assembly Scope}
            </summary>
            <param name="file">Relative file path</param>
            <param name="callingType">Use any of your mod classes</param>
            <returns>Text reader</returns>
        </member>
        <member name="M:VRage.Game.ModAPI.IMyUtilities.WriteBinaryFileInGlobalStorage(System.String)">
            <summary>
            Write bytes to file from local storage %APPDATA%/Roaming/SpaceEngineers/Storage/{Assembly Scope}
            </summary>
            <param name="file">Relative file path</param>
            <returns>Text writer</returns>
        </member>
        <member name="M:VRage.Game.ModAPI.IMyUtilities.WriteBinaryFileInLocalStorage(System.String,System.Type)">
            <summary>
            Write bytes to file from local storage %APPDATA%/Roaming/SpaceEngineers/Storage/{Assembly Scope}
            </summary>
            <param name="file">Relative file path</param>
            <param name="callingType">Use any of your mod classes</param>
            <returns>Text writer</returns>
        </member>
        <member name="M:VRage.Game.ModAPI.IMyUtilities.WriteBinaryFileInWorldStorage(System.String,System.Type)">
            <summary>
            Write file to the current world's Storage directory.
            </summary>
            <param name="file"></param>
            <param name="callingType"></param>
            <returns></returns>
        </member>
        <member name="M:VRage.Game.ModAPI.IMyUtilities.SetVariable``1(System.String,``0)">
            <summary>
            Registers variable in game. It would be saved and loaded through game restarts
            </summary>
            <param name="name">Name of variable</param>
            <param name="value">Value of variable</param>
            <typeparam name="T">Type of variable</typeparam>
        </member>
        <member name="M:VRage.Game.ModAPI.IMyUtilities.GetVariable``1(System.String,``0@)">
            <summary>
            Gets registered variable. 
            </summary>
            <param name="name">Name of variable</param>
            <param name="value">Returned value</param>
            <typeparam name="T">Type of variable</typeparam>
            <returns>True if variable exists</returns>
            <seealso cref="M:VRage.Game.ModAPI.IMyUtilities.SetVariable``1(System.String,``0)"/>
        </member>
        <member name="M:VRage.Game.ModAPI.IMyUtilities.RemoveVariable(System.String)">
            <summary>
            Unregisters variable
            </summary>
            <param name="name">Name of variable</param>
            <returns>True if it existed before this call</returns>
            <seealso cref="M:VRage.Game.ModAPI.IMyUtilities.SetVariable``1(System.String,``0)"/>
        </member>
        <member name="M:VRage.Game.ModAPI.IMyUtilities.RegisterMessageHandler(System.Int64,System.Action{System.Object})">
            <summary>
            Adds a handler to the mod message system.
            </summary>
            <param name="id">Id of handler</param>
            <param name="messageHandler">Function that would be called</param>
            <seealso cref="M:VRage.Game.ModAPI.IMyUtilities.UnregisterMessageHandler(System.Int64,System.Action{System.Object})"/>
            <seealso cref="M:VRage.Game.ModAPI.IMyUtilities.SendModMessage(System.Int64,System.Object)"/>
        </member>
        <member name="M:VRage.Game.ModAPI.IMyUtilities.UnregisterMessageHandler(System.Int64,System.Action{System.Object})">
            <summary>
            Removes a handler from the mod message system.
            </summary>
            <param name="id">Id of handler</param>
            <param name="messageHandler">Function was used as messageHandler</param>
            <seealso cref="M:VRage.Game.ModAPI.IMyUtilities.RegisterMessageHandler(System.Int64,System.Action{System.Object})"/>
            <seealso cref="M:VRage.Game.ModAPI.IMyUtilities.SendModMessage(System.Int64,System.Object)"/>
        </member>
        <member name="M:VRage.Game.ModAPI.IMyUtilities.SendModMessage(System.Int64,System.Object)">
            <summary>
            Allows passing data between mods on the same client.
            </summary>
            <param name="id">Id of handler</param>
            <param name="payload">Message that would be sent. Can be any type</param>
            <seealso cref="M:VRage.Game.ModAPI.IMyUtilities.RegisterMessageHandler(System.Int64,System.Action{System.Object})"/>
            <seealso cref="M:VRage.Game.ModAPI.IMyUtilities.UnregisterMessageHandler(System.Int64,System.Action{System.Object})"/>
        </member>
        <member name="M:VRage.Game.ModAPI.IMyVoxelMaps.Clear">
            <summary>
            Resets all voxels over whole world 
            </summary>
        </member>
        <member name="M:VRage.Game.ModAPI.IMyVoxelMaps.Exist(VRage.ModAPI.IMyVoxelBase)">
            <summary>
            Returns if voxel registered
            </summary>
            <param name="voxelMap">Voxel map</param>
            <returns>True if registered</returns>
        </member>
        <member name="M:VRage.Game.ModAPI.IMyVoxelMaps.GetOverlappingWithSphere(VRageMath.BoundingSphereD@)">
            <summary>
            Get first found <see cref="T:VRage.ModAPI.IMyVoxelBase"/> that intersects with sphere 
            </summary>
            <param name="sphere">Sphere to intersect</param>
            <returns>Null or first found <see cref="T:VRage.ModAPI.IMyVoxelBase"/></returns>
        </member>
        <member name="M:VRage.Game.ModAPI.IMyVoxelMaps.GetVoxelMapWhoseBoundingBoxIntersectsBox(VRageMath.BoundingBoxD@,VRage.ModAPI.IMyVoxelBase)">
            <summary>
            Get first found <see cref="T:VRage.ModAPI.IMyVoxelBase"/> that intersects with bounding box, ordered by distance to box center
            </summary>
            <param name="boundingBox">Box to intersect</param>
            <param name="ignoreVoxelMap">Can't be return value</param>
            <returns><see cref="T:VRage.ModAPI.IMyVoxelBase"/></returns>
        </member>
        <member name="M:VRage.Game.ModAPI.IMyVoxelMaps.GetInstances(System.Collections.Generic.List{VRage.ModAPI.IMyVoxelBase},System.Func{VRage.ModAPI.IMyVoxelBase,System.Boolean})">
            <summary>
            Gets all instances of <see cref="T:VRage.ModAPI.IMyVoxelBase"/>
            </summary>
            <param name="outInstances">List, that would receive results</param>
            <param name="collect">When function is null or returns true, item would be added to list</param>
        </member>
        <member name="M:VRage.Game.ModAPI.IMyVoxelMaps.CreateStorage(VRageMath.Vector3I)">
            <summary>
            Creates voxels storage 
            </summary>
            <param name="size">Size of storage in voxel coordinates</param>
            <returns>Created storage</returns>
        </member>
        <member name="M:VRage.Game.ModAPI.IMyVoxelMaps.CreateStorage(System.Byte[])">
            <summary>
            Creates storage from GZipped bytes. 
            </summary>
            <param name="data">Voxels data</param>
            <returns>Created storage</returns>
        </member>
        <member name="M:VRage.Game.ModAPI.IMyVoxelMaps.CreateVoxelMap(System.String,VRage.ModAPI.IMyStorage,VRageMath.Vector3D,System.Int64)">
            <summary>
            Creates voxels map
            </summary>
            <param name="storageName">Name of storage</param>
            <param name="storage">Voxels storage</param>
            <param name="position">World coordinates</param>
            <param name="voxelMapId">Id of voxel map</param>
            <returns>Voxels map</returns>
        </member>
        <member name="M:VRage.Game.ModAPI.IMyVoxelMaps.CreateVoxelMapFromStorageName(System.String,System.String,VRageMath.Vector3D)">
            <summary>
            Adds a prefab voxel to the game world.
            </summary>
            <param name="storageName">The name of which the voxel storage will be called within the world.</param>
            <param name="prefabVoxelMapName">The prefab voxel to add.</param>
            <param name="position">The Min corner position of the voxel within the world.</param>
            <returns>The newly added voxel map. Returns null if the prefabVoxelMapName does not exist.</returns>
        </member>
        <member name="M:VRage.Game.ModAPI.IMyVoxelMaps.GetBoxVoxelHand">
            <summary>
            Gets box voxel hand. Can be used in <see cref="M:VRage.Game.ModAPI.IMyVoxelMaps.PaintInShape(VRage.ModAPI.IMyVoxelBase,VRage.Game.ModAPI.IMyVoxelShape,System.Byte)"/>, <see cref="M:VRage.Game.ModAPI.IMyVoxelMaps.CutOutShape(VRage.ModAPI.IMyVoxelBase,VRage.Game.ModAPI.IMyVoxelShape)"/>, <see cref="M:VRage.Game.ModAPI.IMyVoxelMaps.FillInShape(VRage.ModAPI.IMyVoxelBase,VRage.Game.ModAPI.IMyVoxelShape,System.Byte)"/>, <see cref="M:VRage.Game.ModAPI.IMyVoxelMaps.RevertShape(VRage.ModAPI.IMyVoxelBase,VRage.Game.ModAPI.IMyVoxelShape)"/>
            </summary>
            <returns>Box voxel hand</returns>
        </member>
        <member name="M:VRage.Game.ModAPI.IMyVoxelMaps.GetCapsuleVoxelHand">
            <summary>
            Gets capsule voxel hand. Can be used in <see cref="M:VRage.Game.ModAPI.IMyVoxelMaps.PaintInShape(VRage.ModAPI.IMyVoxelBase,VRage.Game.ModAPI.IMyVoxelShape,System.Byte)"/>, <see cref="M:VRage.Game.ModAPI.IMyVoxelMaps.CutOutShape(VRage.ModAPI.IMyVoxelBase,VRage.Game.ModAPI.IMyVoxelShape)"/>, <see cref="M:VRage.Game.ModAPI.IMyVoxelMaps.FillInShape(VRage.ModAPI.IMyVoxelBase,VRage.Game.ModAPI.IMyVoxelShape,System.Byte)"/>, <see cref="M:VRage.Game.ModAPI.IMyVoxelMaps.RevertShape(VRage.ModAPI.IMyVoxelBase,VRage.Game.ModAPI.IMyVoxelShape)"/>
            </summary>
            <returns>Capsule voxel hand</returns>
        </member>
        <member name="M:VRage.Game.ModAPI.IMyVoxelMaps.GetSphereVoxelHand">
            <summary>
            Gets sphere voxel hand. Can be used in <see cref="M:VRage.Game.ModAPI.IMyVoxelMaps.PaintInShape(VRage.ModAPI.IMyVoxelBase,VRage.Game.ModAPI.IMyVoxelShape,System.Byte)"/>, <see cref="M:VRage.Game.ModAPI.IMyVoxelMaps.CutOutShape(VRage.ModAPI.IMyVoxelBase,VRage.Game.ModAPI.IMyVoxelShape)"/>, <see cref="M:VRage.Game.ModAPI.IMyVoxelMaps.FillInShape(VRage.ModAPI.IMyVoxelBase,VRage.Game.ModAPI.IMyVoxelShape,System.Byte)"/>, <see cref="M:VRage.Game.ModAPI.IMyVoxelMaps.RevertShape(VRage.ModAPI.IMyVoxelBase,VRage.Game.ModAPI.IMyVoxelShape)"/>
            </summary>
            <returns>Sphere voxel hand</returns>
        </member>
        <member name="M:VRage.Game.ModAPI.IMyVoxelMaps.GetRampVoxelHand">
            <summary>
            Gets ramp voxel hand. Can be used in <see cref="M:VRage.Game.ModAPI.IMyVoxelMaps.PaintInShape(VRage.ModAPI.IMyVoxelBase,VRage.Game.ModAPI.IMyVoxelShape,System.Byte)"/>, <see cref="M:VRage.Game.ModAPI.IMyVoxelMaps.CutOutShape(VRage.ModAPI.IMyVoxelBase,VRage.Game.ModAPI.IMyVoxelShape)"/>, <see cref="M:VRage.Game.ModAPI.IMyVoxelMaps.FillInShape(VRage.ModAPI.IMyVoxelBase,VRage.Game.ModAPI.IMyVoxelShape,System.Byte)"/>, <see cref="M:VRage.Game.ModAPI.IMyVoxelMaps.RevertShape(VRage.ModAPI.IMyVoxelBase,VRage.Game.ModAPI.IMyVoxelShape)"/>
            </summary>
            <returns>Ramp voxel hand</returns>
        </member>
        <member name="M:VRage.Game.ModAPI.IMyVoxelMaps.PaintInShape(VRage.ModAPI.IMyVoxelBase,VRage.Game.ModAPI.IMyVoxelShape,System.Byte)">
            <summary>
            Will paint given material with given shape
            </summary>
            <param name="voxelMap"></param>
            <param name="voxelShape"></param>
            <param name="materialIdx"></param>
        </member>
        <member name="M:VRage.Game.ModAPI.IMyVoxelMaps.CutOutShape(VRage.ModAPI.IMyVoxelBase,VRage.Game.ModAPI.IMyVoxelShape)">
            <summary>
            Will cut out given shape
            </summary>
            <param name="voxelMap"></param>
            <param name="voxelShape"></param>
        </member>
        <member name="M:VRage.Game.ModAPI.IMyVoxelMaps.FillInShape(VRage.ModAPI.IMyVoxelBase,VRage.Game.ModAPI.IMyVoxelShape,System.Byte)">
            <summary>
            Will fill given material with given shape
            </summary>
            <param name="voxelMap"></param>
            <param name="voxelShape"></param>
            <param name="materialIdx"></param>
        </member>
        <member name="M:VRage.Game.ModAPI.IMyVoxelMaps.SpawnPlanet(System.String,System.Single,System.Int32,VRageMath.Vector3D)">
            <summary>
            Creates a Planet Entity
            </summary>
            <param name="planetName">SubtypeId of the Planet (eg: Earthlike, Moon, Mars, etc)</param>
            <param name="size">Diameter (in meters) of the planet</param>
            <param name="seed">Voxel generation seed (similar to the slider you would set in Shift+F10 menu)</param>
            <param name="position">Position of where the planet is placed (placed using PositionLeftBottomCorner)</param>
            <returns>Planet as IMyVoxelBase</returns>
        </member>
        <member name="M:VRage.Game.ModAPI.IMyVoxelMaps.CreatePredefinedVoxelMap(System.String,System.String,VRageMath.MatrixD,System.Boolean)">
            <summary>
            Creates an voxel map with some additional options.
            </summary>
            <param name="storageName">SubtypeId of a VoxelMap Definition</param>
            <param name="voxelMaterial">If provided with a Voxel Material SubtypeId, the entire voxel map will be converted to that material. Otherwise, if this value is Empty or Null, the default materials for the voxel map will be used.</param>
            <param name="matrix">World Matrix used for positioning voxel map</param>
            <param name="useVoxelOffset">If set to true, the voxel will be placed using the center of the voxel bounding box, instead of using PositionLeftBottomCorner</param>
            <returns>A voxel map (eg: asteroid) as IMyVoxelMap</returns>
        </member>
        <member name="T:VRage.Game.ModAPI.IMyVoxelShape">
            <summary>
            Describes voxel shape for filling or excavating 
            </summary>
        </member>
        <member name="P:VRage.Game.ModAPI.IMyVoxelShape.Transform">
            <summary>
            World matrix of voxel shape
            </summary>
        </member>
        <member name="M:VRage.Game.ModAPI.IMyVoxelShape.GetWorldBoundary">
            <summary>
            Gets current world boundaries
            </summary>
            <returns></returns>
        </member>
        <member name="M:VRage.Game.ModAPI.IMyVoxelShape.PeekWorldBoundary(VRageMath.Vector3D@)">
            <summary>
            Peeks world boundaries at given position
            </summary>
            <param name="targetPosition"></param>
            <returns></returns>
        </member>
        <member name="M:VRage.Game.ModAPI.IMyVoxelShape.GetIntersectionVolume(VRageMath.Vector3D@)">
            <summary>
            Gets volume of intersection of shape and voxel
            </summary>
            <param name="voxelPosition">Left bottom point of voxel</param>
            <returns>Normalized volume of intersection</returns>
        </member>
        <member name="T:VRage.Game.ModAPI.IMyVoxelShapeBox">
            <summary>
            Describes box voxel shape for filling or excavating 
            </summary>
        </member>
        <member name="P:VRage.Game.ModAPI.IMyVoxelShapeBox.Boundaries">
            <summary>
            Boundaries are in local space, you need to use transform property to rotate/translate shape 
            </summary>
        </member>
        <member name="T:VRage.Game.ModAPI.IMyVoxelShapeCapsule">
            <summary>
            Describes capsule voxel shape for filling or excavating 
            </summary>
        </member>
        <member name="P:VRage.Game.ModAPI.IMyVoxelShapeCapsule.A">
            <summary>
            In world Coordinates
            </summary>
        </member>
        <member name="P:VRage.Game.ModAPI.IMyVoxelShapeCapsule.B">
            <summary>
            In world Coordinates
            </summary>
        </member>
        <member name="T:VRage.Game.ModAPI.IMyVoxelShapeRamp">
            <summary>
            Describes ramp voxel shape for filling or excavating 
            </summary>
        </member>
        <member name="P:VRage.Game.ModAPI.IMyVoxelShapeRamp.RampNormal">
            <summary>
            normal of the sloped plane
            </summary>
        </member>
        <member name="T:VRage.Game.ModAPI.IMyVoxelShapeSphere">
            <summary>
            Describes sphere voxel shape for filling or excavating 
            </summary>
        </member>
        <member name="P:VRage.Game.ModAPI.IMyVoxelShapeSphere.Center">
            <summary>
            In World Space
            </summary>
        </member>
        <member name="T:VRage.Game.ModAPI.IMyWeatherEffects">
            <summary>
            
            </summary>
        </member>
        <member name="M:VRage.Game.ModAPI.IMyWeatherEffects.GetWeather(VRageMath.Vector3D)">
            <summary>
            Gets weather name at provided position
            </summary>
            <param name="position">World position</param>
            <returns>SubtypeName of weather</returns>
        </member>
        <member name="M:VRage.Game.ModAPI.IMyWeatherEffects.GetWeather(VRageMath.Vector3D,VRage.Game.MyObjectBuilder_WeatherEffect@)">
            <summary>
            Gets object builder of weather at provided position
            </summary>
            <param name="position">World position</param>
            <param name="weatherEffect">Object builder</param>
            <returns>True there is weather in that point</returns>
        </member>
        <member name="M:VRage.Game.ModAPI.IMyWeatherEffects.SetWeather(System.String,System.Single,System.Nullable{VRageMath.Vector3D},System.Boolean,VRageMath.Vector3D,System.Int32,System.Single)">
            <summary>
            Sets weather
            </summary>
            <param name="weatherEffect">SubtypeName of weather</param>
            <param name="radius">Radius of weather</param>
            <param name="weatherPosition">World position of weather center</param>
            <param name="verbose">When true, errors would be typing into the chat</param>
            <param name="velocity">Velocity of weather effect</param>
            <param name="length">Duration of weather effect</param>
            <param name="intensity">Intensity of weather effect</param>
            <returns>True when weather was created</returns>
        </member>
        <member name="M:VRage.Game.ModAPI.IMyWeatherEffects.RemoveWeather(VRageMath.Vector3D)">
            <summary>
            Removes weather at specific location
            </summary>
            <param name="position">World position</param>
            <returns>True if removed weather</returns>
        </member>
        <member name="M:VRage.Game.ModAPI.IMyWeatherEffects.RemoveWeather(VRage.Game.MyObjectBuilder_WeatherEffect)">
            <summary>
            Removes weather by its object builder
            </summary>
            <param name="weatherEffect"></param>
        </member>
        <member name="M:VRage.Game.ModAPI.IMyWeatherEffects.CreateLightning(VRageMath.Vector3D,VRage.Game.MyObjectBuilder_WeatherLightning,System.Boolean)">
            <summary>
            Creates lightning
            </summary>
            <param name="position">World position. Side effect: changing <see cref="F:VRage.Game.MyObjectBuilder_WeatherLightning.Position"/></param>
            <param name="lightning">Settings of lightning</param>
            <param name="doDamage">When false - changing <see cref="F:VRage.Game.MyObjectBuilder_WeatherLightning.ExplosionRadius"/> to zero</param>
        </member>
        <member name="M:VRage.Game.ModAPI.IMyWeatherEffects.GetWeatherIntensity(VRageMath.Vector3D)">
            <summary>
            Gets weather intensity at world coordinates
            </summary>
            <param name="position">World coordinates</param>
            <returns>Weather intensity</returns>
        </member>
        <member name="M:VRage.Game.ModAPI.IMyWeatherEffects.GetWeatherIntensity(VRageMath.Vector3D,VRage.Game.MyObjectBuilder_WeatherEffect)">
            <summary>
            Gets weather intensity in point for provided weather
            </summary>
            <param name="position">World coordinates</param>
            <param name="weatherEffect">Object builder of exact weather</param>
            <returns>Weather intensity</returns>
        </member>
        <member name="M:VRage.Game.ModAPI.IMyWeatherEffects.GetOxygenMultiplier(VRageMath.Vector3D)">
            <summary>
            Gets weather oxygen multiplier at world coordinates
            </summary>
            <param name="position">World coordinates</param>
            <returns>Oxygen multiplier</returns>
        </member>
        <member name="M:VRage.Game.ModAPI.IMyWeatherEffects.GetOxygenMultiplier(VRageMath.Vector3D,VRage.Game.MyObjectBuilder_WeatherEffect)">
            <summary>
            Gets weather oxygen multiplier in point for provided weather
            </summary>
            <param name="position">World coordinates</param>
            <param name="weatherEffect">Object builder of exact weather</param>
            <returns>Oxygen multiplier</returns>
        </member>
        <member name="M:VRage.Game.ModAPI.IMyWeatherEffects.GetSolarMultiplier(VRageMath.Vector3D)">
            <summary>
            Gets solar multiplier at world coordinates
            </summary>
            <param name="position">World coordinates</param>
            <returns>Solar multiplier</returns>
        </member>
        <member name="M:VRage.Game.ModAPI.IMyWeatherEffects.GetSolarMultiplier(VRageMath.Vector3D,VRage.Game.MyObjectBuilder_WeatherEffect)">
            <summary>
            Gets weather solar multiplier in point for provided weather
            </summary>
            <param name="position">World coordinates</param>
            <param name="weatherEffect">Object builder of exact weather</param>
            <returns>Solar multiplier</returns>
        </member>
        <member name="M:VRage.Game.ModAPI.IMyWeatherEffects.GetTemperatureMultiplier(VRageMath.Vector3D)">
            <summary>
            Gets weather temperature multiplier in point for provided weather
            </summary>
            <param name="position">World coordinates</param>
            <returns>Temperature multiplier</returns>
        </member>
        <member name="M:VRage.Game.ModAPI.IMyWeatherEffects.GetTemperatureMultiplier(VRageMath.Vector3D,VRage.Game.MyObjectBuilder_WeatherEffect)">
            <summary>
            Gets weather temperature multiplier in point for provided weather
            </summary>
            <param name="position">World coordinates</param>
            <param name="weatherEffect">Object builder of exact weather</param>
            <returns>Temperature multiplier</returns>
        </member>
        <member name="M:VRage.Game.ModAPI.IMyWeatherEffects.GetWindMultiplier(VRageMath.Vector3D)">
            <summary>
            Gets weather temperature multiplier in point for provided weather
            </summary>
            <param name="position">World coordinates</param>
            <returns>Wind multiplier</returns>
        </member>
        <member name="M:VRage.Game.ModAPI.IMyWeatherEffects.GetWindMultiplier(VRageMath.Vector3D,VRage.Game.MyObjectBuilder_WeatherEffect)">
            <summary>
            Gets weather solar multiplier in point for provided weather
            </summary>
            <param name="position">World coordinates</param>
            <param name="weatherEffect">Object builder of exact weather</param>
            <returns>Wind multiplier</returns>
        </member>
        <member name="P:VRage.Game.ModAPI.IMyWeatherEffects.FogMultiplierOverride">
            <summary>
            Gets or sets sector's FogMultiplier. When value is null, used default sector value
            </summary>
        </member>
        <member name="P:VRage.Game.ModAPI.IMyWeatherEffects.FogDensityOverride">
            <summary>
            Gets or sets sector's FogDensity. When value is null, used default sector value
            </summary>
        </member>
        <member name="P:VRage.Game.ModAPI.IMyWeatherEffects.FogColorOverride">
            <summary>
            Gets or sets sector's FogColor. When value is null, used default sector value
            </summary>
        </member>
        <member name="P:VRage.Game.ModAPI.IMyWeatherEffects.FogSkyboxOverride">
            <summary>
            Gets or sets sector's FogSkybox. When value is null, used default sector value
            </summary>
        </member>
        <member name="P:VRage.Game.ModAPI.IMyWeatherEffects.FogAtmoOverride">
            <summary>
            Gets or sets sector's FogAtmo. When value is null, used default sector value
            </summary>
        </member>
        <member name="P:VRage.Game.ModAPI.IMyWeatherEffects.ParticleDirectionOverride">
            <summary>
            Gets or sets sector's ParticleDirection. When value is null, used default sector value
            </summary>
        </member>
        <member name="P:VRage.Game.ModAPI.IMyWeatherEffects.ParticleVelocityOverride">
            <summary>
            Gets or sets sector's ParticleVelocity. When value is null, used default sector value
            </summary>
        </member>
        <member name="P:VRage.Game.ModAPI.IMyWeatherEffects.SunIntensityOverride">
            <summary>
            Gets or sets sector's SunIntensity. When value is null, used default sector value
            </summary>
        </member>
        <member name="M:VRage.Game.ModAPI.IMyWeatherEffects.GetWeatherPlanetData">
            <summary>
            Gets list (not a copy) of all weathers that are currently running
            </summary>
            <returns>List of weathers</returns>
        </member>
        <member name="T:VRage.Game.ModAPI.Ingame.FleeMode">
            <summary>
            Describes trigger, when bot should flee
            </summary>
        </member>
        <member name="F:VRage.Game.ModAPI.Ingame.FleeMode.AwayFromTarget">
            <summary>
            Should never flee
            </summary>
        </member>
        <member name="F:VRage.Game.ModAPI.Ingame.FleeMode.ToGpsOrBeacon">
            <summary>
            Should flee, when finds enemy
            </summary>
        </member>
        <member name="T:VRage.Game.ModAPI.Ingame.FleeTrigger">
            <summary>
            Describes trigger, when bot should flee
            </summary>
        </member>
        <member name="F:VRage.Game.ModAPI.Ingame.FleeTrigger.Never">
            <summary>
            Should never flee
            </summary>
        </member>
        <member name="F:VRage.Game.ModAPI.Ingame.FleeTrigger.Always">
            <summary>
            Should flee, when finds enemy
            </summary>
        </member>
        <member name="F:VRage.Game.ModAPI.Ingame.FleeTrigger.WhenTargetLocked">
            <summary>
            Should flee, when was target locked
            </summary>
        </member>
        <member name="F:VRage.Game.ModAPI.Ingame.FleeTrigger.WhenTakingDamage">
            <summary>
            Should flee when took damage
            </summary>
        </member>
        <member name="T:VRage.Game.ModAPI.Ingame.IMyCubeBlock">
            <summary>
            Basic cube interface
            </summary>
        </member>
        <member name="P:VRage.Game.ModAPI.Ingame.IMyCubeBlock.BlockDefinition">
            <summary>
            Gets definition.Id assigned to this block
            </summary>
        </member>
        <member name="P:VRage.Game.ModAPI.Ingame.IMyCubeBlock.CubeGrid">
            <summary>
            Grid in which the block is placed
            </summary>
        </member>
        <member name="P:VRage.Game.ModAPI.Ingame.IMyCubeBlock.DefinitionDisplayNameText">
            <summary>
            Definition name
            </summary>
        </member>
        <member name="P:VRage.Game.ModAPI.Ingame.IMyCubeBlock.DisassembleRatio">
            <summary>
            Is set in definition
            Ratio at which is the block disassembled (grinding)
            Bigger values - longer grinding
            </summary>
        </member>
        <member name="P:VRage.Game.ModAPI.Ingame.IMyCubeBlock.DisplayNameText">
            <summary>
            Translated block name
            </summary>
        </member>
        <member name="M:VRage.Game.ModAPI.Ingame.IMyCubeBlock.GetOwnerFactionTag">
            <summary>
            Tag of faction owning block
            </summary>
        </member>
        <member name="M:VRage.Game.ModAPI.Ingame.IMyCubeBlock.GetPlayerRelationToOwner">
            <summary>
            Relation of local player to the block
            Should not be called on Dedicated Server.
            </summary>
            <returns>Relation</returns>
        </member>
        <member name="M:VRage.Game.ModAPI.Ingame.IMyCubeBlock.GetUserRelationToOwner(System.Int64,VRage.Game.MyRelationsBetweenPlayerAndBlock)">
            <summary>
            Gets relation to owner of block
            </summary>
            <param name="playerId">IdentityId of player to check relation with (not steam id!)</param>
            <param name="defaultNoUser"></param>
            <returns>Relation of defined player to the block</returns>
        </member>
        <member name="P:VRage.Game.ModAPI.Ingame.IMyCubeBlock.IsBeingHacked">
            <summary>
            Hacking of the block is in progress
            </summary>
        </member>
        <member name="P:VRage.Game.ModAPI.Ingame.IMyCubeBlock.IsFunctional">
            <summary>
            Gets if integrity is above breaking threshold
            </summary>
        </member>
        <member name="P:VRage.Game.ModAPI.Ingame.IMyCubeBlock.IsWorking">
            <summary>
            True if block is able to do its work depening on block type (is functional, powered, enabled, etc...)
            </summary>
        </member>
        <member name="P:VRage.Game.ModAPI.Ingame.IMyCubeBlock.Max">
            <summary>
            Maximum coordinates of grid cells occupied by this block
            </summary>
        </member>
        <member name="P:VRage.Game.ModAPI.Ingame.IMyCubeBlock.Mass">
            <summary>
            Block mass
            </summary>
        </member>
        <member name="P:VRage.Game.ModAPI.Ingame.IMyCubeBlock.Min">
            <summary>
            Minimum coordinates of grid cells occupied by this block
            </summary>
        </member>
        <member name="P:VRage.Game.ModAPI.Ingame.IMyCubeBlock.NumberInGrid">
            <summary>
            Order in which were the blocks of same type added to grid
            Used in default display name
            </summary>
        </member>
        <member name="P:VRage.Game.ModAPI.Ingame.IMyCubeBlock.Orientation">
            <summary>
            Returns block orientation in base 6 directions
            </summary>
        </member>
        <member name="P:VRage.Game.ModAPI.Ingame.IMyCubeBlock.OwnerId">
            <summary>
            IdentityId of player owning block (not steam Id)
            </summary>
        </member>
        <member name="P:VRage.Game.ModAPI.Ingame.IMyCubeBlock.Position">
            <summary>
            Position in grid coordinates
            </summary>
        </member>
        <member name="M:VRage.Game.ModAPI.Ingame.IMyCubeBlock.UpdateIsWorking">
            <summary>
            Force refresh working state. Call if you change block state that could affect its working status.
            </summary>
        </member>
        <member name="M:VRage.Game.ModAPI.Ingame.IMyCubeBlock.UpdateVisual">
            <summary>
            Updates block visuals (ie. block emissivity)
            </summary>
        </member>
        <member name="T:VRage.Game.ModAPI.Ingame.IMyCubeGrid">
            <summary>
            Grid interface
            </summary>
        </member>
        <member name="P:VRage.Game.ModAPI.Ingame.IMyCubeGrid.CustomName">
            <summary>
            Getter and setter for display name of the grid (as seen in Info terminal tab)
            </summary>
        </member>
        <member name="P:VRage.Game.ModAPI.Ingame.IMyCubeGrid.GridSize">
            <summary>
            Getter of grid size in meters
            </summary>
        </member>
        <member name="P:VRage.Game.ModAPI.Ingame.IMyCubeGrid.GridSizeEnum">
            <summary>
            Getter for grid size enum
            </summary>
        </member>
        <member name="P:VRage.Game.ModAPI.Ingame.IMyCubeGrid.IsStatic">
            <summary>
            Determines if the grid is static (unmoveable)
            </summary>
        </member>
        <member name="P:VRage.Game.ModAPI.Ingame.IMyCubeGrid.Max">
            <summary>
            Maximum coordinates of blocks in grid
            </summary>
        </member>
        <member name="P:VRage.Game.ModAPI.Ingame.IMyCubeGrid.Min">
            <summary>
            Minimum coordinates of blocks in grid
            </summary>
        </member>
        <member name="M:VRage.Game.ModAPI.Ingame.IMyCubeGrid.CubeExists(VRageMath.Vector3I)">
            <summary>
            Returns true if there is any block occupying given position
            </summary>
            <returns>True if block exists</returns>
        </member>
        <member name="M:VRage.Game.ModAPI.Ingame.IMyCubeGrid.GetCubeBlock(VRageMath.Vector3I)">
            <summary>
            Get cube block at given position
            </summary>
            <param name="pos">Block position</param>
            <returns>Block or null if none is present at given position</returns>
        </member>
        <member name="M:VRage.Game.ModAPI.Ingame.IMyCubeGrid.GridIntegerToWorld(VRageMath.Vector3I)">
            <summary>
            Converts grid coordinates to world space
            </summary>
            <returns>Vector in world coordinates</returns>
        </member>
        <member name="M:VRage.Game.ModAPI.Ingame.IMyCubeGrid.WorldToGridInteger(VRageMath.Vector3D)">
            <summary>
            Converts world coordinates to grid space cell coordinates
            </summary>
            <returns>Vector in world grid coordinates</returns>
        </member>
        <member name="M:VRage.Game.ModAPI.Ingame.IMyCubeGrid.IsSameConstructAs(VRage.Game.ModAPI.Ingame.IMyCubeGrid)">
            <summary>
            <para>
            Determines whether this grid is <see cref="F:VRage.Game.ModAPI.GridLinkTypeEnum.Mechanical"/> connected to the other. This is any grid connected
            with rotors or pistons or other mechanical devices, but not things like connectors. This will in most
            cases constitute your complete construct.
            </para>
            <para>
            Be aware that using merge blocks combines grids into one, so this function will not filter out grids
            connected that way. Also be aware that detaching the heads of pistons and rotors will cause this
            connection to change.
            </para>
            </summary>
            <param name="other">Other grid</param>
            <returns>True if grid connected with <see cref="F:VRage.Game.ModAPI.GridLinkTypeEnum.Mechanical"/> linking</returns>
        </member>
        <member name="P:VRage.Game.ModAPI.Ingame.IMyCubeGrid.LinearVelocity">
            <summary>
            Gets linear velocity of the grid
            </summary>
        </member>
        <member name="P:VRage.Game.ModAPI.Ingame.IMyCubeGrid.Speed">
            <summary>
            Gets speed of the grid calculated from Linear Velocity. Rounded to two decimal places.
            </summary>
        </member>
        <member name="T:VRage.Game.ModAPI.Ingame.IMyEntity">
            <summary>
            Interface for all entities. (PB scripting interface)
            </summary>
        </member>
        <member name="P:VRage.Game.ModAPI.Ingame.IMyEntity.Components">
            <summary>
            Gets blocks component logic container
            </summary>
        </member>
        <member name="P:VRage.Game.ModAPI.Ingame.IMyEntity.EntityId">
            <summary>
            Id of entity
            </summary>
        </member>
        <member name="P:VRage.Game.ModAPI.Ingame.IMyEntity.Name">
            <summary>
            Some entities can have uniq name, and game can find them by name <see cref="M:VRage.ModAPI.IMyEntities.TryGetEntityByName(System.String,VRage.ModAPI.IMyEntity@)"/>
            </summary>
        </member>
        <member name="P:VRage.Game.ModAPI.Ingame.IMyEntity.DisplayName">
            <summary>
            Gets user friendly name of entity. May be null
            For block terminal name use <see cref="P:VRage.Game.ModAPI.Ingame.IMyCubeBlock.DisplayNameText"/>
            </summary>
        </member>
        <member name="P:VRage.Game.ModAPI.Ingame.IMyEntity.HasInventory">
            <summary>
            Returns true if this entity has got at least one inventory. 
            Note that one aggregate inventory can contain zero simple inventories => zero will be returned even if GetInventory() != null.
            </summary>
        </member>
        <member name="P:VRage.Game.ModAPI.Ingame.IMyEntity.InventoryCount">
            <summary>
            Returns the count of the number of inventories this entity has.
            </summary>
        </member>
        <member name="M:VRage.Game.ModAPI.Ingame.IMyEntity.GetInventory">
            <summary>
            Simply get the MyInventoryBase component stored in this entity.
            </summary>
            <returns>Inventory</returns>
        </member>
        <member name="M:VRage.Game.ModAPI.Ingame.IMyEntity.GetInventory(System.Int32)">
            <summary>
            Search for inventory component with maching index.
            </summary>
        </member>
        <member name="P:VRage.Game.ModAPI.Ingame.IMyEntity.Closed">
            <summary>
            True if the block has been removed from the world.
            </summary>
        </member>
        <member name="P:VRage.Game.ModAPI.Ingame.IMyEntity.WorldAABB">
            <summary>
            Gets world axis-aligned bounding box
            </summary>
        </member>
        <member name="P:VRage.Game.ModAPI.Ingame.IMyEntity.WorldAABBHr">
            <summary>
            Gets world axis-aligned bounding box
            </summary>
        </member>
        <member name="P:VRage.Game.ModAPI.Ingame.IMyEntity.WorldMatrix">
            <summary>
            Gets world matrix of this entity
            </summary>
        </member>
        <member name="P:VRage.Game.ModAPI.Ingame.IMyEntity.WorldVolume">
            <summary>
            Gets bounding sphere of this entity
            </summary>
        </member>
        <member name="P:VRage.Game.ModAPI.Ingame.IMyEntity.WorldVolumeHr">
            <summary>
            Gets bounding sphere of this entity
            </summary>
        </member>
        <member name="M:VRage.Game.ModAPI.Ingame.IMyEntity.GetPosition">
            <summary>
            Gets position in world coordinates
            </summary>
            <returns>Position</returns>
        </member>
        <member name="T:VRage.Game.ModAPI.Ingame.IMyInventory">
            <summary>
            Describes inventory interface (PB scripting interface)
            </summary>
        </member>
        <member name="P:VRage.Game.ModAPI.Ingame.IMyInventory.Owner">
            <summary>
            Returns entity this inventory belongs to.
            </summary>
        </member>
        <member name="P:VRage.Game.ModAPI.Ingame.IMyInventory.IsFull">
            <summary>
            Determines if inventory is absolutely full.
            </summary>
        </member>
        <member name="P:VRage.Game.ModAPI.Ingame.IMyInventory.CurrentMass">
            <summary>
            Returns total mass of items inside this inventory in Kg.
            </summary>
        </member>
        <member name="P:VRage.Game.ModAPI.Ingame.IMyInventory.MaxVolume">
            <summary>
            Sets maximum volume of items this inventory can contain in m^3.
            </summary>
        </member>
        <member name="P:VRage.Game.ModAPI.Ingame.IMyInventory.CurrentVolume">
            <summary>
            Returns total volume of items inside this inventory in m^3.
            </summary>
        </member>
        <member name="P:VRage.Game.ModAPI.Ingame.IMyInventory.ItemCount">
            <summary>
            Returns number of occupied inventory slots.
            </summary>
        </member>
        <member name="P:VRage.Game.ModAPI.Ingame.IMyInventory.VolumeFillFactor">
            <summary>
            Gets the current volume fill factor of the inventory
            </summary>
        </member>
        <member name="M:VRage.Game.ModAPI.Ingame.IMyInventory.IsItemAt(System.Int32)">
            <summary>
            Determines if there is any item on given inventory slot.
            </summary>
            <param name="position">Zero-based index of queried inventory slot</param>
            <returns>True in case given inventory slot is occupied, false otherwise</returns>
        </member>
        <member name="M:VRage.Game.ModAPI.Ingame.IMyInventory.GetItemAmount(VRage.Game.ModAPI.Ingame.MyItemType)">
            <summary>
            Sums up total amount of items of given type contained inside this inventory.
            </summary>
            <param name="itemType">Item type its amount is queried</param>
            <returns>Total amount of given item type contained inside this inventory. Kg or count, based on item type</returns>
        </member>
        <member name="M:VRage.Game.ModAPI.Ingame.IMyInventory.ContainItems(VRage.MyFixedPoint,VRage.Game.ModAPI.Ingame.MyItemType)">
            <summary>
            Determines if there is at least given amount of items of given type contained inside this inventory.
            </summary>
            <param name="amount">Threshold amount. Kg or count, based on item type</param>
            <param name="itemType">Item type its amount is queried</param>
            <returns>True in case there is sufficient amount of items present inside this inventory, false otherwise</returns>
        </member>
        <member name="M:VRage.Game.ModAPI.Ingame.IMyInventory.GetItemAt(System.Int32)">
            <summary>
            Returns info about item at give position.
            </summary>
            <param name="index">Zero-based index of queried inventory slot</param>
            <returns>Info about queried inventory slot, null in case there is no item at given slot</returns>
        </member>
        <member name="M:VRage.Game.ModAPI.Ingame.IMyInventory.GetItemByID(System.UInt32)">
            <summary>
            Returns info about item contained inside this inventory.
            </summary>
            <param name="id">Id of queried item</param>
            <returns>Info about queried item, null in case there is no item with given Id inside this inventory</returns>
        </member>
        <member name="M:VRage.Game.ModAPI.Ingame.IMyInventory.FindItem(VRage.Game.ModAPI.Ingame.MyItemType)">
            <summary>
            Tries to find an item of given type inside this inventory.
            </summary>
            <param name="itemType">Type of item being queried</param>
            <returns>Info about item found, null in case there is no item of given type inside this inventory</returns>
        </member>
        <member name="M:VRage.Game.ModAPI.Ingame.IMyInventory.CanItemsBeAdded(VRage.MyFixedPoint,VRage.Game.ModAPI.Ingame.MyItemType)">
            <summary>
            Determines if given amount of items fits into this inventory on top of existing items.
            </summary>
            <param name="amount">Amount of items being tested</param>
            <param name="itemType">Type of items being tested</param>
            <returns>True if items can fit into this inventory on top of existing items, false otherwise</returns>
        </member>
        <member name="M:VRage.Game.ModAPI.Ingame.IMyInventory.GetItems(System.Collections.Generic.List{VRage.Game.ModAPI.Ingame.MyInventoryItem},System.Func{VRage.Game.ModAPI.Ingame.MyInventoryItem,System.Boolean})">
            <summary>
            Collects all items present inside this inventory and returns snapshot of the current inventory state.
            </summary>
            <param name="items">Collection the item info will be returned to</param>
            <param name="filter">Filter function you can use to decide whether to add item into the items collection or not</param>
        </member>
        <member name="M:VRage.Game.ModAPI.Ingame.IMyInventory.TransferItemTo(VRage.Game.ModAPI.Ingame.IMyInventory,VRage.Game.ModAPI.Ingame.MyInventoryItem,System.Nullable{VRage.MyFixedPoint})">
            <summary>
            Attempts to transfer item from one inventory to another.
            </summary>
            <param name="dstInventory">Inventory to transfer item to</param>
            <param name="item">Item to transfer</param>
            <param name="amount">Amount that should be transferred. Kgs or count, based on item type</param>
            <returns>True in case item was successfully transferred, false otherwise</returns>
        </member>
        <member name="M:VRage.Game.ModAPI.Ingame.IMyInventory.TransferItemFrom(VRage.Game.ModAPI.Ingame.IMyInventory,VRage.Game.ModAPI.Ingame.MyInventoryItem,System.Nullable{VRage.MyFixedPoint})">
            <summary>
            Attempts to transfer item from one inventory to another.
            </summary>
            <param name="sourceInventory">Inventory to transfer item from</param>
            <param name="item">Item to transfer</param>
            <param name="amount">Amount that should be transferred. Kgs or count, based on item type</param>
            <returns>True in case item was successfully transferred, false otherwise</returns>
        </member>
        <member name="M:VRage.Game.ModAPI.Ingame.IMyInventory.TransferItemTo(VRage.Game.ModAPI.Ingame.IMyInventory,System.Int32,System.Nullable{System.Int32},System.Nullable{System.Boolean},System.Nullable{VRage.MyFixedPoint})">
            <summary>
            Attempts to transfer item from one inventory to another.
            </summary>
            <param name="dst">Inventory to transfer item to</param>
            <param name="sourceItemIndex">Zero-based index of inventory slot to transfer item from</param>
            <param name="targetItemIndex">Zero-based index of inventory slot to transfer item to</param>
            <param name="stackIfPossible">If true, engine will attempt to stack items at destination inventory</param>
            <param name="amount">Amount that should be transferred. Kgs or count, based on item type</param>
            <returns>True in case item was successfully transferred, false otherwise</returns>
        </member>
        <member name="M:VRage.Game.ModAPI.Ingame.IMyInventory.TransferItemFrom(VRage.Game.ModAPI.Ingame.IMyInventory,System.Int32,System.Nullable{System.Int32},System.Nullable{System.Boolean},System.Nullable{VRage.MyFixedPoint})">
            <summary>
            Attempts to transfer item from one inventory to another.
            </summary>
            <param name="sourceInventory">Inventory to transfer item from</param>
            <param name="sourceItemIndex">Zero-based index of inventory slot to transfer item from</param>
            <param name="targetItemIndex">Zero-based index of inventory slot to transfer item to</param>
            <param name="stackIfPossible">If true, engine will attempt to stack items at destination inventory</param>
            <param name="amount">Amount that should be transferred. Kgs or count, based on item type</param>
            <returns>True in case item was successfully transferred, false otherwise</returns>
        </member>
        <member name="M:VRage.Game.ModAPI.Ingame.IMyInventory.IsConnectedTo(VRage.Game.ModAPI.Ingame.IMyInventory)">
            <summary>
            Checks if two inventories are connected.
            </summary>
            <param name="otherInventory">Inventory to check the connection to</param>
            <returns>True if there is working conveyor connection between inventories, false otherwise</returns>
        </member>
        <member name="M:VRage.Game.ModAPI.Ingame.IMyInventory.CanTransferItemTo(VRage.Game.ModAPI.Ingame.IMyInventory,VRage.Game.ModAPI.Ingame.MyItemType)">
            <summary>
            Determines if there is working conveyor connection for item of give type to be transferred to other inventory.
            </summary>
            <param name="otherInventory">Inventory to check the connection to</param>
            <param name="itemType">Type of item to check the connection for</param>
            <returns>True if there is working conveyor connection between inventories so that item of give type can by transferred, false otherwise</returns>
        </member>
        <member name="M:VRage.Game.ModAPI.Ingame.IMyInventory.GetAcceptedItems(System.Collections.Generic.List{VRage.Game.ModAPI.Ingame.MyItemType},System.Func{VRage.Game.ModAPI.Ingame.MyItemType,System.Boolean})">
            <summary>
            Returns all items this inventory accepts.
            </summary>
            <param name="itemsTypes">Collection the item types info will be returned to</param>
            <param name="filter">Filter function you can use to decide whether to add item type into the itemsTypes collection or not</param>
        </member>
        <member name="P:VRage.Game.ModAPI.Ingame.IMyInventory.CanPutItems">
            <summary>
            Gets if inventory can receive items or not.
            </summary>
        </member>
        <member name="T:VRage.Game.ModAPI.Ingame.IMyInventoryItem">
            <summary>
            Describes item stack in inventory (program block interface)
            </summary>
        </member>
        <member name="P:VRage.Game.ModAPI.Ingame.IMyInventoryItem.Amount">
            <summary>
            Gets or sets amount of items
            </summary>
        </member>
        <member name="P:VRage.Game.ModAPI.Ingame.IMyInventoryItem.Scale">
            <summary>
            Gets or sets scale of Floating object
            </summary>
        </member>
        <member name="P:VRage.Game.ModAPI.Ingame.IMyInventoryItem.Content">
            <summary>
            Gets or sets content of inventory item. Cast it to <see cref="T:VRage.Game.MyObjectBuilder_PhysicalObject"/>
            </summary>
        </member>
        <member name="P:VRage.Game.ModAPI.Ingame.IMyInventoryItem.ItemId">
            <summary>
            Item Id. Used to determine exact stack 
            </summary>
        </member>
        <member name="T:VRage.Game.ModAPI.Ingame.IMyInventoryOwner">
            <summary>
            Describes interface of object that has inventory (PB scripting interface)
            </summary>
        </member>
        <member name="P:VRage.Game.ModAPI.Ingame.IMyInventoryOwner.InventoryCount">
            <summary>
            Gets amount of inventories
            </summary>
        </member>
        <member name="M:VRage.Game.ModAPI.Ingame.IMyInventoryOwner.GetInventory(System.Int32)">
            <summary>
            Gets inventory by index
            </summary>
            <param name="index">Index of inventory, should be less than <see cref="P:VRage.Game.ModAPI.Ingame.IMyInventoryOwner.InventoryCount"/></param>
            <returns></returns>
        </member>
        <member name="P:VRage.Game.ModAPI.Ingame.IMyInventoryOwner.EntityId">
            <summary>
            Gets EntityId, which it belongs to
            </summary>
        </member>
        <member name="P:VRage.Game.ModAPI.Ingame.IMyInventoryOwner.UseConveyorSystem">
            <summary>
            Gets or sets if that inventory can interact with 
            </summary>
        </member>
        <member name="P:VRage.Game.ModAPI.Ingame.IMyInventoryOwner.HasInventory">
            <summary>
            Gets whether has inventory
            </summary>
        </member>
        <member name="T:VRage.Game.ModAPI.Ingame.IMySlimBlock">
            <summary>
            Basic block interface (PB scripting interface)
            </summary>
        </member>
        <member name="P:VRage.Game.ModAPI.Ingame.IMySlimBlock.BlockDefinition">
            <summary>
            Block definition ID
            </summary>
        </member>
        <member name="P:VRage.Game.ModAPI.Ingame.IMySlimBlock.AccumulatedDamage">
            <summary>
            Current accumlated damage, pending application
            </summary>
        </member>
        <member name="P:VRage.Game.ModAPI.Ingame.IMySlimBlock.BuildIntegrity">
            <summary>
            Build integrity (of components)
            </summary>
        </member>
        <member name="P:VRage.Game.ModAPI.Ingame.IMySlimBlock.BuildLevelRatio">
            <summary>
            Ratio of BuildIntegrity and MaxIntegrity
            </summary>
        </member>
        <member name="P:VRage.Game.ModAPI.Ingame.IMySlimBlock.CurrentDamage">
            <summary>
            BuildIntegrity - Integrity
            </summary>
        </member>
        <member name="P:VRage.Game.ModAPI.Ingame.IMySlimBlock.DamageRatio">
            <summary>
            
            </summary>
        </member>
        <member name="P:VRage.Game.ModAPI.Ingame.IMySlimBlock.FatBlock">
            <summary>
            Gets the fatblock if there is one
            </summary>
        </member>
        <member name="M:VRage.Game.ModAPI.Ingame.IMySlimBlock.GetMissingComponents(System.Collections.Generic.Dictionary{System.String,System.Int32})">
            <summary>
            Gets the list of missing components for this block
            </summary>
            <param name="addToDictionary"></param>
        </member>
        <member name="P:VRage.Game.ModAPI.Ingame.IMySlimBlock.HasDeformation">
            <summary>
            If this block is deformed (bones deformed)
            </summary>
        </member>
        <member name="P:VRage.Game.ModAPI.Ingame.IMySlimBlock.IsDestroyed">
            <summary>
            Gets if component stack is empty
            </summary>
        </member>
        <member name="P:VRage.Game.ModAPI.Ingame.IMySlimBlock.IsFullIntegrity">
            <summary>
            Integrity is at maximum
            </summary>
        </member>
        <member name="P:VRage.Game.ModAPI.Ingame.IMySlimBlock.IsFullyDismounted">
            <summary>
            Gets if component stack is empty
            </summary>
        </member>
        <member name="P:VRage.Game.ModAPI.Ingame.IMySlimBlock.MaxDeformation">
            <summary>
            Maximum deformation of block
            </summary>
        </member>
        <member name="P:VRage.Game.ModAPI.Ingame.IMySlimBlock.MaxIntegrity">
            <summary>
            The maximum integrity of block
            </summary>
        </member>
        <member name="P:VRage.Game.ModAPI.Ingame.IMySlimBlock.Mass">
            <summary>
            Block mass
            </summary>
        </member>
        <member name="P:VRage.Game.ModAPI.Ingame.IMySlimBlock.OwnerId">
            <summary>
            Fatblock owner, if present; otherwise grid owner
            </summary>
        </member>
        <member name="P:VRage.Game.ModAPI.Ingame.IMySlimBlock.ShowParts">
            <summary>
            Gets if sub parts are shown
            </summary>
        </member>
        <member name="P:VRage.Game.ModAPI.Ingame.IMySlimBlock.StockpileAllocated">
            <summary>
            A component stockpile has been allocated
            </summary>
        </member>
        <member name="P:VRage.Game.ModAPI.Ingame.IMySlimBlock.StockpileEmpty">
            <summary>
            The component stockpile is empty (no build components)
            </summary>
        </member>
        <member name="P:VRage.Game.ModAPI.Ingame.IMySlimBlock.Position">
            <summary>
            Grid relative position of block
            </summary>
        </member>
        <member name="P:VRage.Game.ModAPI.Ingame.IMySlimBlock.CubeGrid">
            <summary>
            Gets the grid the slimblock is on
            </summary>
        </member>
        <member name="P:VRage.Game.ModAPI.Ingame.IMySlimBlock.ColorMaskHSV">
            <summary>
            Gets the color of the block
            </summary>
        </member>
        <member name="P:VRage.Game.ModAPI.Ingame.IMySlimBlock.SkinSubtypeId">
            <summary>
            Gets the skin of the block
            </summary>
        </member>
        <member name="T:VRage.Game.ModAPI.Ingame.MyInventoryItem">
            <summary>
            Snapshot of inventory item at the moment of query.
            Not updated afterwards!
            </summary>
        </member>
        <member name="F:VRage.Game.ModAPI.Ingame.MyInventoryItem.ItemId">
            <summary>
            Id of item, unique within a single inventory.
            </summary>
        </member>
        <member name="F:VRage.Game.ModAPI.Ingame.MyInventoryItem.Amount">
            <summary>
            Amount of stacked items.
            Kg or count, based on item type.
            </summary>
        </member>
        <member name="F:VRage.Game.ModAPI.Ingame.MyInventoryItem.Type">
            <summary>
            Type of inventory item.
            </summary>
        </member>
        <member name="T:VRage.Game.ModAPI.Ingame.MyItemType">
            <summary>
            Use by <see cref="T:VRage.Game.ModAPI.Ingame.MyInventoryItem"/>
            </summary>
        </member>
        <member name="P:VRage.Game.ModAPI.Ingame.MyItemType.TypeId">
            <summary>
            Gets TypeId of Item
            </summary>
        </member>
        <member name="P:VRage.Game.ModAPI.Ingame.MyItemType.SubtypeId">
            <summary>
            Gets Subtype of Item
            </summary>
        </member>
        <member name="T:VRage.Game.ModAPI.Ingame.MyItemInfo">
            <summary>
            Accessible via `GetItemInfo` extension method on `MyItemType`
            </summary>
        </member>
        <member name="F:VRage.Game.ModAPI.Ingame.MyItemInfo.Mass">
            <summary>
            Mass in Kg
            </summary>
        </member>
        <member name="F:VRage.Game.ModAPI.Ingame.MyItemInfo.Size">
            <summary>
            Size in meters
            </summary>
        </member>
        <member name="F:VRage.Game.ModAPI.Ingame.MyItemInfo.Volume">
            <summary>
            Volume in m^3
            </summary>
        </member>
        <member name="F:VRage.Game.ModAPI.Ingame.MyItemInfo.MaxStackAmount">
            <summary>
            Max possible stacks of item in single inventory slot
            </summary>
        </member>
        <member name="F:VRage.Game.ModAPI.Ingame.MyItemInfo.UsesFractions">
            <summary>
            Ores and ingots are fractional. Ordinary items are not
            </summary>
        </member>
        <member name="F:VRage.Game.ModAPI.Ingame.MyItemInfo.IsOre">
            <summary>
            Gets if item type is Ore
            </summary>
        </member>
        <member name="F:VRage.Game.ModAPI.Ingame.MyItemInfo.IsIngot">
            <summary>
            Gets if item type is Ingot
            </summary>
        </member>
        <member name="F:VRage.Game.ModAPI.Ingame.MyItemInfo.IsComponent">
            <summary>
            Gets if item type is Component
            </summary>
        </member>
        <member name="F:VRage.Game.ModAPI.Ingame.MyItemInfo.IsTool">
            <summary>
            Gets if item type is Tool
            </summary>
        </member>
        <member name="F:VRage.Game.ModAPI.Ingame.MyItemInfo.IsAmmo">
            <summary>
            Gets if item type is Ammo
            </summary>
        </member>
        <member name="P:VRage.Game.ModAPI.Ingame.MyStoreItemDataSimple.ItemId">
            <summary>
            Gets definition id of the item
            </summary>
        </member>
        <member name="P:VRage.Game.ModAPI.Ingame.MyStoreItemDataSimple.Amount">
            <summary>
            Gets amount for buy/sell
            </summary>
        </member>
        <member name="P:VRage.Game.ModAPI.Ingame.MyStoreItemDataSimple.PricePerUnit">
            <summary>
            Gets price per unit
            </summary>
        </member>
        <member name="M:VRage.Game.ModAPI.Ingame.MyStoreItemDataSimple.#ctor(VRage.ObjectBuilders.SerializableDefinitionId,System.Int32,System.Int32)">
            <summary>
            Store Item constructor
            </summary>
            <param name="itemId">definition id of the item</param>
            <param name="amount">amount for buy/sell</param>
            <param name="pricePerUnit">price per unit</param>        
        </member>
        <member name="T:VRage.Game.ModAPI.Ingame.MyTransponderRelationFilter">
            <summary>
            Defines allowed relation between signal sender and signal receiver
            </summary>
        </member>
        <member name="F:VRage.Game.ModAPI.Ingame.MyTransponderRelationFilter.Owner">
            <summary>
            Allow signals from the same owner
            </summary>
        </member>
        <member name="F:VRage.Game.ModAPI.Ingame.MyTransponderRelationFilter.Faction">
            <summary>
            Allow signals from the owning faction
            </summary>
        </member>
        <member name="F:VRage.Game.ModAPI.Ingame.MyTransponderRelationFilter.Everyone">
            <summary>
            Allow any signal
            </summary>
        </member>
        <member name="T:VRage.Game.ModAPI.Ingame.OffensiveCombatTargetPriority">
            <summary>
            Describes offensive combat block attack combat target priority enum
            </summary>
        </member>
        <member name="F:VRage.Game.ModAPI.Ingame.OffensiveCombatTargetPriority.Closest">
            <summary>
            Should target closest grid first
            </summary>
        </member>
        <member name="F:VRage.Game.ModAPI.Ingame.OffensiveCombatTargetPriority.Largest">
            <summary>
            Should target largest grid first
            </summary>
        </member>
        <member name="F:VRage.Game.ModAPI.Ingame.OffensiveCombatTargetPriority.Smallest">
            <summary>
            Should target smallest grid first
            </summary>
        </member>
        <member name="T:VRage.Game.ModAPI.Ingame.Utilities.MyCommandLine">
            <summary>
            A utility class to parse arguments from a command line string. Switches are defined with hyphen (-switch). Quotes can be
            placed around an argument to parse verbatim, but inner quotes will be copied verbatim. For example, "one"two" will result
            in the string one"two.
            </summary>
        </member>
        <member name="M:VRage.Game.ModAPI.Ingame.Utilities.MyCommandLine.#ctor">
            <summary>
            Creates a new instance of <see cref="T:VRage.Game.ModAPI.Ingame.Utilities.MyCommandLine"/>
            </summary>
        </member>
        <member name="P:VRage.Game.ModAPI.Ingame.Utilities.MyCommandLine.Items">
            <summary>
            Contains all items, both arguments and switches
            </summary>
        </member>
        <member name="P:VRage.Game.ModAPI.Ingame.Utilities.MyCommandLine.Switches">
            <summary>
            Contains a list of all detected switches
            </summary>
        </member>
        <member name="M:VRage.Game.ModAPI.Ingame.Utilities.MyCommandLine.TryParse(System.String)">
            <summary>
                Attempts to parse the given string as a command line
            </summary>
            <param name="argument"></param>
            <returns><c>true</c> if there were arguments in the string, <c>false</c> otherwise</returns>
        </member>
        <member name="P:VRage.Game.ModAPI.Ingame.Utilities.MyCommandLine.ArgumentCount">
            <summary>
            Returns the number of non-switch arguments
            </summary>
        </member>
        <member name="M:VRage.Game.ModAPI.Ingame.Utilities.MyCommandLine.Argument(System.Int32)">
            <summary>
            Returns the argument at the given index. Switches are not counted.
            </summary>
            <param name="index"></param>
            <returns></returns>
        </member>
        <member name="M:VRage.Game.ModAPI.Ingame.Utilities.MyCommandLine.Switch(System.String)">
            <summary>
            Determines whether the given switch is set. Switches are specified without their prefixed hyphen.
            </summary>
            <param name="name"></param>
            <returns></returns>
        </member>
        <member name="M:VRage.Game.ModAPI.Ingame.Utilities.MyCommandLine.Switch(System.String,System.Int32)">
            <summary>
            <para>
            Gets an argument of a switch.
            For example, using <c>Switch("key", 0)</c> on the command line <c>someOtherArgument -key value</c> will return <c>value</c>.
            </para>
            </summary>
            <param name="name"></param>
            <param name="relativeArgument"></param>
            <returns></returns>
        </member>
        <member name="M:VRage.Game.ModAPI.Ingame.Utilities.MyCommandLine.Clear">
            <summary>
                Clears all arguments
            </summary>
        </member>
        <member name="T:VRage.Game.ModAPI.Ingame.Utilities.MyCommandLine.ItemCollection">
            <summary>
            A collection of arguments
            </summary>
        </member>
        <member name="M:VRage.Game.ModAPI.Ingame.Utilities.MyCommandLine.ItemCollection.GetEnumerator">
            <summary>
            Gets an enumerator to step through the content of this list
            </summary>
            <returns></returns>
        </member>
        <member name="M:VRage.Game.ModAPI.Ingame.Utilities.MyCommandLine.ItemCollection.System#Collections#Generic#IEnumerable{System#String}#GetEnumerator">
            <internalonly />
        </member>
        <member name="P:VRage.Game.ModAPI.Ingame.Utilities.MyCommandLine.ItemCollection.Count">
            <summary>
            Gets the number of parameters
            </summary>
        </member>
        <member name="P:VRage.Game.ModAPI.Ingame.Utilities.MyCommandLine.ItemCollection.Item(System.Int32)">
            <summary>
            Gets the parameter at the given index
            </summary>
            <param name="index"></param>
            <returns></returns>
        </member>
        <member name="T:VRage.Game.ModAPI.Ingame.Utilities.MyCommandLine.SwitchCollection">
            <summary>
            A collection of set switches
            </summary>
        </member>
        <member name="M:VRage.Game.ModAPI.Ingame.Utilities.MyCommandLine.SwitchCollection.GetEnumerator">
            <summary>
            Gets an enumerator to step through the content of this list
            </summary>
            <returns></returns>
        </member>
        <member name="M:VRage.Game.ModAPI.Ingame.Utilities.MyCommandLine.SwitchCollection.System#Collections#Generic#IEnumerable{System#String}#GetEnumerator">
            <internalonly />
        </member>
        <member name="P:VRage.Game.ModAPI.Ingame.Utilities.MyCommandLine.SwitchCollection.Count">
            <summary>
            Returns the number of set switches
            </summary>
        </member>
        <member name="T:VRage.Game.ModAPI.Ingame.Utilities.MyIni">
            <summary>
                <para>
                    A configuration class to parse and create a text string resembling the old fashioned INI format, but with
                    support for multiline
                    values.
                </para>
                <para>
                    Do not forget that parsing is a time-consuming task. Keep your parsing to a minimum.
                </para>
            </summary>
            <example>
                <para>
                    Using MyIni to deal with CustomData end-user configuration:
                </para>
                <para>
                    The CustomData:
                </para>
                <code>
            [kernel]
            output=DebugTextPanel
            bootText=
            |-- HAL9000 --
            |Good morning, Dave.
            </code>
                <para>
                    The code:
                </para>
                <code>
            MyIni _ini = new MyIni();
            IMyTextPanel _outputTextPanel;
            
            public Program() 
            {
                MyIniParseResult result;
                if (!_ini.TryParse(Me.CustomData, out result) 
                {
                    Echo($"CustomData error:\nLine {result}");
                }
            
                // Get the kernel section's output value. If this value is set, the system attempts
                // to retrieve a text panel with the value set. Otherwise output is ignored.
                var name = _ini.Get("kernel", "output").ToString();
                if (name != null) 
                {
                    _outputTextPanel = GridTerminalSystem.GetBlockWithName&lt;IMyTextPanel&gt;(name);
                    if (_outputTextPanel == null)
                        Echo($"No text panel named {name}");
                }
            
                // Get the kernel section's boottext value. If no value is given, a default value will be returned.
                var bootText = _ini.Get("kernel", "bootText").ToString("Kernel is starting up...");
                _outputTextPanel?.WritePublicText(bootText);
            }
            
            public void Main() {
                // Do your stuff. Only parse the configuration when you have to.
            }
            </code>
                <para>
                    Using MyIni to deal with internal storage:
                </para>
                <code>
            MyIni _storage = new MyIni();
            Vector3D _startupPosition;
            bool _hasTarget;
            Vector3D _currentTarget;
            
            public Program() 
            {
                // You only need to parse here in the constructor.
                if (_ini.TryParse(Storage) 
                {
                    var str = _ini.Get("state", "startupPosition").ToString();
                    Vector3D.TryParse(str, out _startupPosition);
                    str = _ini.Get("state", "currentTarget").ToString();
                    Vector3D.TryParse(str, out _currentTarget);
                    _hasTarget = _ini.Get("state", "hasTarget").ToBoolean();
                } 
                else 
                {
                    // Set up defaults, the storage is nonexistent or corrupt
                    _startupPosition = Me.CubeGrid.Position;
                }
            }
            
            public void Save()
            {
                // You only need to update Storage when the Save method is called.
                _ini.Set("state", "startupPosition", _startupPosition);
                _ini.Set("state", "currentTarget", _currentTarget);
                Storage = _ini.ToString();
            }
            
            public void Main() {
                // Do your stuff
            }
            </code>
            </example>
            <remarks>
                This class is NOT THREAD SAFE as it's optimized for programmable block use.
            </remarks>
        </member>
        <member name="M:VRage.Game.ModAPI.Ingame.Utilities.MyIni.HasSection(System.String,System.String)">
            <summary>
                Determines if the given configuration contains what looks like the given section.
                It does not verify that the content is actually in a valid format, just if there's
                a line starting with [section].
            </summary>
            <param name="config"></param>
            <param name="section"></param>
            <returns></returns>
        </member>
        <member name="P:VRage.Game.ModAPI.Ingame.Utilities.MyIni.EndContent">
            <summary>
            You can terminate a configuration stream by entering "---" on a separate line. This property
            will contain all the content after this line.
            </summary>
        </member>
        <member name="M:VRage.Game.ModAPI.Ingame.Utilities.MyIni.ContainsSection(System.String)">
            <summary>
                Determines whether a section of a given name exists in the currently parsed configuration.
            </summary>
            <param name="section"></param>
            <returns></returns>
        </member>
        <member name="M:VRage.Game.ModAPI.Ingame.Utilities.MyIni.ContainsKey(System.String,System.String)">
            <summary>
                Determines whether a configuration key (section/key) exists in the currently parsed configuration.
            </summary>
            <param name="section"></param>
            <param name="name"></param>
            <returns></returns>
        </member>
        <member name="M:VRage.Game.ModAPI.Ingame.Utilities.MyIni.ContainsKey(VRage.Game.ModAPI.Ingame.Utilities.MyIniKey)">
            <summary>
                Determines whether a configuration key (section/key) exists in the currently parsed configuration.
            </summary>
            <param name="key"></param>
            <returns></returns>
        </member>
        <member name="M:VRage.Game.ModAPI.Ingame.Utilities.MyIni.GetKeys(System.String,System.Collections.Generic.List{VRage.Game.ModAPI.Ingame.Utilities.MyIniKey})">
            <summary>
                Fills the provided list with the configuration keys within the given section.
            </summary>
            <param name="section"></param>
            <param name="keys"></param>
        </member>
        <member name="M:VRage.Game.ModAPI.Ingame.Utilities.MyIni.GetKeys(System.Collections.Generic.List{VRage.Game.ModAPI.Ingame.Utilities.MyIniKey})">
            <summary>
                Fills the provided list with all configuration keys within the currently parsed configuration.
            </summary>
            <param name="keys"></param>
        </member>
        <member name="M:VRage.Game.ModAPI.Ingame.Utilities.MyIni.GetSections(System.Collections.Generic.List{System.String})">
            <summary>
                Fills the provided list with the names of all the sections in the currently parsed configuration.
            </summary>
            <param name="names"></param>
        </member>
        <member name="P:VRage.Game.ModAPI.Ingame.Utilities.MyIni.EndComment">
            <summary>
            Get or set a comment to be placed after the last section or item.
            Is <c>null</c> if the section does not exist or has no comment.
            </summary>
            <returns></returns>
        </member>
        <member name="M:VRage.Game.ModAPI.Ingame.Utilities.MyIni.SetEndComment(System.String)">
            <summary>
            Sets a comment to be placed after the last section or item. Set the comment to <c>null</c> to remove it.
            </summary>
            <param name="comment"></param>
        </member>
        <member name="M:VRage.Game.ModAPI.Ingame.Utilities.MyIni.GetSectionComment(System.String)">
            <summary>
            Get any comment that might be associated with the given section.
            Returns <c>null</c> if the section does not exist or has no comment.
            </summary>
            <param name="section"></param>
            <returns></returns>
        </member>
        <member name="M:VRage.Game.ModAPI.Ingame.Utilities.MyIni.SetSectionComment(System.String,System.String)">
            <summary>
            Sets a comment on a given section. The section must already exist. Set the comment to <c>null</c> to remove it.
            </summary>
            <param name="section"></param>
            <param name="comment"></param>
        </member>
        <member name="M:VRage.Game.ModAPI.Ingame.Utilities.MyIni.GetComment(System.String,System.String)">
            <summary>
            Gets any comment that might be associated with the given key.
            Returns <c>null</c> if the key does not exist or has no comment.
            </summary>
            <param name="section"></param>
            <param name="name"></param>
            <returns></returns>
        </member>
        <member name="M:VRage.Game.ModAPI.Ingame.Utilities.MyIni.GetComment(VRage.Game.ModAPI.Ingame.Utilities.MyIniKey)">
            <summary>
            Gets any comment that might be associated with the given key.
            Returns <c>null</c> if the key does not exist or has no comment.
            </summary>
            <param name="key"></param>
            <returns></returns>
        </member>
        <member name="M:VRage.Game.ModAPI.Ingame.Utilities.MyIni.SetComment(System.String,System.String,System.String)">
            <summary>
            Sets a comment on a given item. The item must already exist. Set the comment to <c>null</c> to remove it.
            </summary>
            <param name="section"></param>
            <param name="name"></param>
            <param name="comment"></param>
        </member>
        <member name="M:VRage.Game.ModAPI.Ingame.Utilities.MyIni.SetComment(VRage.Game.ModAPI.Ingame.Utilities.MyIniKey,System.String)">
            <summary>
            Sets a comment on a given item. The item must already exist. Set the comment to <c>null</c> to remove it.
            </summary>
            <param name="key"></param>
            <param name="comment"></param>
        </member>
        <member name="M:VRage.Game.ModAPI.Ingame.Utilities.MyIni.Get(System.String,System.String)">
            <summary>
                Gets the <see cref="T:VRage.Game.ModAPI.Ingame.Utilities.MyIniValue" /> of the given configuration key.
            </summary>
            <param name="section"></param>
            <param name="name"></param>
            <returns></returns>
        </member>
        <member name="M:VRage.Game.ModAPI.Ingame.Utilities.MyIni.Get(VRage.Game.ModAPI.Ingame.Utilities.MyIniKey)">
            <summary>
                Gets the <see cref="T:VRage.Game.ModAPI.Ingame.Utilities.MyIniValue" /> of the given configuration key.
            </summary>
            <param name="key"></param>
            <returns></returns>
        </member>
        <member name="M:VRage.Game.ModAPI.Ingame.Utilities.MyIni.Delete(System.String,System.String)">
            <summary>
                Deletes the given configuration key.
            </summary>
            <param name="section"></param>
            <param name="name"></param>
        </member>
        <member name="M:VRage.Game.ModAPI.Ingame.Utilities.MyIni.Delete(VRage.Game.ModAPI.Ingame.Utilities.MyIniKey)">
            <summary>
                Deletes the given configuration key.
            </summary>
            <param name="key"></param>
        </member>
        <member name="M:VRage.Game.ModAPI.Ingame.Utilities.MyIni.Set(System.String,System.String,System.String)">
            <summary>
                Sets the value of the given configuration key.
            </summary>
            <param name="section"></param>
            <param name="name"></param>
            <param name="value"></param>
        </member>
        <member name="M:VRage.Game.ModAPI.Ingame.Utilities.MyIni.Set(VRage.Game.ModAPI.Ingame.Utilities.MyIniKey,System.String)">
            <summary>
                Sets the value of the given configuration key.
            </summary>
            <param name="key"></param>
            <param name="value"></param>
        </member>
        <member name="M:VRage.Game.ModAPI.Ingame.Utilities.MyIni.Set(System.String,System.String,System.Boolean)">
            <summary>
                Sets the value of the given configuration key.
            </summary>
            <param name="section"></param>
            <param name="name"></param>
            <param name="value"></param>
        </member>
        <member name="M:VRage.Game.ModAPI.Ingame.Utilities.MyIni.Set(VRage.Game.ModAPI.Ingame.Utilities.MyIniKey,System.Boolean)">
            <summary>
                Sets the value of the given configuration key.
            </summary>
            <param name="key"></param>
            <param name="value"></param>
        </member>
        <member name="M:VRage.Game.ModAPI.Ingame.Utilities.MyIni.Set(System.String,System.String,System.Byte)">
            <summary>
                Sets the value of the given configuration key.
            </summary>
            <param name="section"></param>
            <param name="name"></param>
            <param name="value"></param>
        </member>
        <member name="M:VRage.Game.ModAPI.Ingame.Utilities.MyIni.Set(VRage.Game.ModAPI.Ingame.Utilities.MyIniKey,System.Byte)">
            <summary>
                Sets the value of the given configuration key.
            </summary>
            <param name="key"></param>
            <param name="value"></param>
        </member>
        <member name="M:VRage.Game.ModAPI.Ingame.Utilities.MyIni.Set(System.String,System.String,System.SByte)">
            <summary>
                Sets the value of the given configuration key.
            </summary>
            <param name="section"></param>
            <param name="name"></param>
            <param name="value"></param>
        </member>
        <member name="M:VRage.Game.ModAPI.Ingame.Utilities.MyIni.Set(VRage.Game.ModAPI.Ingame.Utilities.MyIniKey,System.SByte)">
            <summary>
                Sets the value of the given configuration key.
            </summary>
            <param name="key"></param>
            <param name="value"></param>
        </member>
        <member name="M:VRage.Game.ModAPI.Ingame.Utilities.MyIni.Set(System.String,System.String,System.UInt16)">
            <summary>
                Sets the value of the given configuration key.
            </summary>
            <param name="section"></param>
            <param name="name"></param>
            <param name="value"></param>
        </member>
        <member name="M:VRage.Game.ModAPI.Ingame.Utilities.MyIni.Set(VRage.Game.ModAPI.Ingame.Utilities.MyIniKey,System.UInt16)">
            <summary>
                Sets the value of the given configuration key.
            </summary>
            <param name="key"></param>
            <param name="value"></param>
        </member>
        <member name="M:VRage.Game.ModAPI.Ingame.Utilities.MyIni.Set(System.String,System.String,System.Int16)">
            <summary>
                Sets the value of the given configuration key.
            </summary>
            <param name="section"></param>
            <param name="name"></param>
            <param name="value"></param>
        </member>
        <member name="M:VRage.Game.ModAPI.Ingame.Utilities.MyIni.Set(VRage.Game.ModAPI.Ingame.Utilities.MyIniKey,System.Int16)">
            <summary>
                Sets the value of the given configuration key.
            </summary>
            <param name="key"></param>
            <param name="value"></param>
        </member>
        <member name="M:VRage.Game.ModAPI.Ingame.Utilities.MyIni.Set(System.String,System.String,System.UInt32)">
            <summary>
                Sets the value of the given configuration key.
            </summary>
            <param name="section"></param>
            <param name="name"></param>
            <param name="value"></param>
        </member>
        <member name="M:VRage.Game.ModAPI.Ingame.Utilities.MyIni.Set(VRage.Game.ModAPI.Ingame.Utilities.MyIniKey,System.UInt32)">
            <summary>
                Sets the value of the given configuration key.
            </summary>
            <param name="key"></param>
            <param name="value"></param>
        </member>
        <member name="M:VRage.Game.ModAPI.Ingame.Utilities.MyIni.Set(System.String,System.String,System.Int32)">
            <summary>
                Sets the value of the given configuration key.
            </summary>
            <param name="section"></param>
            <param name="name"></param>
            <param name="value"></param>
        </member>
        <member name="M:VRage.Game.ModAPI.Ingame.Utilities.MyIni.Set(VRage.Game.ModAPI.Ingame.Utilities.MyIniKey,System.Int32)">
            <summary>
                Sets the value of the given configuration key.
            </summary>
            <param name="key"></param>
            <param name="value"></param>
        </member>
        <member name="M:VRage.Game.ModAPI.Ingame.Utilities.MyIni.Set(System.String,System.String,System.UInt64)">
            <summary>
                Sets the value of the given configuration key.
            </summary>
            <param name="section"></param>
            <param name="name"></param>
            <param name="value"></param>
        </member>
        <member name="M:VRage.Game.ModAPI.Ingame.Utilities.MyIni.Set(VRage.Game.ModAPI.Ingame.Utilities.MyIniKey,System.UInt64)">
            <summary>
                Sets the value of the given configuration key.
            </summary>
            <param name="key"></param>
            <param name="value"></param>
        </member>
        <member name="M:VRage.Game.ModAPI.Ingame.Utilities.MyIni.Set(System.String,System.String,System.Int64)">
            <summary>
                Sets the value of the given configuration key.
            </summary>
            <param name="section"></param>
            <param name="name"></param>
            <param name="value"></param>
        </member>
        <member name="M:VRage.Game.ModAPI.Ingame.Utilities.MyIni.Set(VRage.Game.ModAPI.Ingame.Utilities.MyIniKey,System.Int64)">
            <summary>
                Sets the value of the given configuration key.
            </summary>
            <param name="key"></param>
            <param name="value"></param>
        </member>
        <member name="M:VRage.Game.ModAPI.Ingame.Utilities.MyIni.Set(System.String,System.String,System.Single)">
            <summary>
                Sets the value of the given configuration key.
            </summary>
            <param name="section"></param>
            <param name="name"></param>
            <param name="value"></param>
        </member>
        <member name="M:VRage.Game.ModAPI.Ingame.Utilities.MyIni.Set(VRage.Game.ModAPI.Ingame.Utilities.MyIniKey,System.Single)">
            <summary>
                Sets the value of the given configuration key.
            </summary>
            <param name="key"></param>
            <param name="value"></param>
        </member>
        <member name="M:VRage.Game.ModAPI.Ingame.Utilities.MyIni.Set(System.String,System.String,System.Double)">
            <summary>
                Sets the value of the given configuration key.
            </summary>
            <param name="section"></param>
            <param name="name"></param>
            <param name="value"></param>
        </member>
        <member name="M:VRage.Game.ModAPI.Ingame.Utilities.MyIni.Set(VRage.Game.ModAPI.Ingame.Utilities.MyIniKey,System.Double)">
            <summary>
                Sets the value of the given configuration key.
            </summary>
            <param name="key"></param>
            <param name="value"></param>
        </member>
        <member name="M:VRage.Game.ModAPI.Ingame.Utilities.MyIni.Set(System.String,System.String,System.Decimal)">
            <summary>
                Sets the value of the given configuration key.
            </summary>
            <param name="section"></param>
            <param name="name"></param>
            <param name="value"></param>
        </member>
        <member name="M:VRage.Game.ModAPI.Ingame.Utilities.MyIni.Set(VRage.Game.ModAPI.Ingame.Utilities.MyIniKey,System.Decimal)">
            <summary>
                Sets the value of the given configuration key.
            </summary>
            <param name="key"></param>
            <param name="value"></param>
        </member>
        <member name="M:VRage.Game.ModAPI.Ingame.Utilities.MyIni.AddSection(System.String)">
            <summary>
            Adds an empty section
            </summary>
            <param name="section"></param>
        </member>
        <member name="M:VRage.Game.ModAPI.Ingame.Utilities.MyIni.DeleteSection(System.String)">
            <summary>
            Deletes an entire selection
            </summary>
            <param name="section"></param>
            <returns><c>true</c> if a section was deleted; <c>false</c> otherwise.</returns>
        </member>
        <member name="M:VRage.Game.ModAPI.Ingame.Utilities.MyIni.Clear">
            <summary>
                Empties this configuration
            </summary>
        </member>
        <member name="M:VRage.Game.ModAPI.Ingame.Utilities.MyIni.TryParse(System.String)">
            <summary>
                Attempts to parse the given content as a configuration file.
            </summary>
            <param name="content"></param>
            <returns><c>true</c> if the parse succeeds, <c>false</c> otherwise</returns>
        </member>
        <member name="M:VRage.Game.ModAPI.Ingame.Utilities.MyIni.TryParse(System.String,VRage.Game.ModAPI.Ingame.Utilities.MyIniParseResult@)">
            <summary>
                Attempts to parse the given content as a configuration file.
            </summary>
            <param name="content"></param>
            <param name="result">If unsuccessful, this value contains information about why the parse failed</param>
            <returns><c>true</c> if the parse succeeds, <c>false</c> otherwise</returns>
        </member>
        <member name="M:VRage.Game.ModAPI.Ingame.Utilities.MyIni.TryParse(System.String,System.String,VRage.Game.ModAPI.Ingame.Utilities.MyIniParseResult@)">
            <summary>
                Attempts to parse the given content as a configuration file. OBSERVE: Use only for read-only operations. 
                If you parse a single section and run <see cref="M:VRage.Game.ModAPI.Ingame.Utilities.MyIni.ToString"/>, you will only get the parsed section, 
                the rest will be discarded. 
            </summary>
            <param name="content"></param>
            <param name="section">The specific section to parse. Any other section in the content will be ignored.</param>
            <param name="result">If unsuccessful, this value contains information about why the parse failed</param>
            <returns><c>true</c> if the parse succeeds, <c>false</c> otherwise</returns>
        </member>
        <member name="M:VRage.Game.ModAPI.Ingame.Utilities.MyIni.TryParse(System.String,System.String)">
            <summary>
                Attempts to parse the given content as a configuration file. OBSERVE: Use only for read-only operations. 
                If you parse a single section and run <see cref="M:VRage.Game.ModAPI.Ingame.Utilities.MyIni.ToString"/>, you will only get the parsed section, 
                the rest will be discarded. 
            </summary>
            <param name="content"></param>
            <param name="section">The specific section to parse. Any other section in the content will be ignored.</param>
            <returns><c>true</c> if the parse succeeds, <c>false</c> otherwise</returns>
        </member>
        <member name="M:VRage.Game.ModAPI.Ingame.Utilities.MyIni.Invalidate">
            <summary>
                Forces regeneration of the ini content. Only really useful if you want to reformat the configuration file.
            </summary>
        </member>
        <member name="M:VRage.Game.ModAPI.Ingame.Utilities.MyIni.ToString">
            <summary>
                Generates a configuration file from the currently parsed configuration
            </summary>
            <returns></returns>
        </member>
        <member name="T:VRage.Game.ModAPI.Ingame.Utilities.MyIniKey">
            <summary>
            Represents the combination of a section and a key in a <see cref="T:VRage.Game.ModAPI.Ingame.Utilities.MyIni"/> structure.
            </summary>
        </member>
        <member name="M:VRage.Game.ModAPI.Ingame.Utilities.MyIniKey.op_Equality(VRage.Game.ModAPI.Ingame.Utilities.MyIniKey,VRage.Game.ModAPI.Ingame.Utilities.MyIniKey)">
            <summary>
            Checks the two given <see cref="T:VRage.Game.ModAPI.Ingame.Utilities.MyIniKey"/>s for equality. Note that this is equality in the sense of a configuration key, which means the comparison is implicitly case insensitive.
            </summary>
            <param name="a"></param>
            <param name="b"></param>
            <returns></returns>
        </member>
        <member name="M:VRage.Game.ModAPI.Ingame.Utilities.MyIniKey.op_Inequality(VRage.Game.ModAPI.Ingame.Utilities.MyIniKey,VRage.Game.ModAPI.Ingame.Utilities.MyIniKey)">
            <summary>
            Checks the two given <see cref="T:VRage.Game.ModAPI.Ingame.Utilities.MyIniKey"/>s for inequality. Note that this is inequality in the sense of a configuration key, which means the comparison is implicitly case insensitive.
            </summary>
            <param name="a"></param>
            <param name="b"></param>
            <returns></returns>
        </member>
        <member name="M:VRage.Game.ModAPI.Ingame.Utilities.MyIniKey.TryParse(System.String,VRage.Game.ModAPI.Ingame.Utilities.MyIniKey@)">
            <summary>
            Parses a string in the form of <c>section/key</c> into a <see cref="T:VRage.Game.ModAPI.Ingame.Utilities.MyIniKey"/> object.
            </summary>
            <param name="input"></param>
            <param name="key"></param>
            <returns></returns>
        </member>
        <member name="M:VRage.Game.ModAPI.Ingame.Utilities.MyIniKey.Parse(System.String)">
            <summary>
            Parses a string in the form of <c>section/key</c> into a <see cref="T:VRage.Game.ModAPI.Ingame.Utilities.MyIniKey"/> object.
            </summary>
            <param name="input"></param>
            <returns></returns>
            <exception cref="T:System.ArgumentException">invalid configuration key format</exception>
        </member>
        <member name="P:VRage.Game.ModAPI.Ingame.Utilities.MyIniKey.Section">
            <summary>
            Gets the Section part of this <see cref="T:VRage.Game.ModAPI.Ingame.Utilities.MyIniKey"/>
            </summary>
        </member>
        <member name="P:VRage.Game.ModAPI.Ingame.Utilities.MyIniKey.Name">
            <summary>
            Gets the Key part of this <see cref="T:VRage.Game.ModAPI.Ingame.Utilities.MyIniKey"/>
            </summary>
        </member>
        <member name="M:VRage.Game.ModAPI.Ingame.Utilities.MyIniKey.#ctor(System.String,System.String)">
            <summary>
            Creates a new instance of <see cref="T:VRage.Game.ModAPI.Ingame.Utilities.MyIniKey"/>
            </summary>
            <param name="section"></param>
            <param name="name"></param>
            <exception cref="T:System.ArgumentException">Section cannot be empty.</exception>
            <exception cref="T:System.ArgumentException">Section contains illegal characters</exception>
            <exception cref="T:System.ArgumentException">Key cannot be empty.</exception>
            <exception cref="T:System.ArgumentException">Key contains illegal characters</exception>
        </member>
        <member name="P:VRage.Game.ModAPI.Ingame.Utilities.MyIniKey.IsEmpty">
            <summary>
            Determines whether this <see cref="T:VRage.Game.ModAPI.Ingame.Utilities.MyIniKey"/> is empty.
            </summary>
        </member>
        <member name="M:VRage.Game.ModAPI.Ingame.Utilities.MyIniKey.Equals(VRage.Game.ModAPI.Ingame.Utilities.MyIniKey)">
            <summary>
            Compares this <see cref="T:VRage.Game.ModAPI.Ingame.Utilities.MyIniKey"/> with another.  Note that this is equality in the sense of a configuration key, which means the comparison is implicitly case insensitive.
            </summary>
            <param name="other"></param>
            <returns></returns>
        </member>
        <member name="M:VRage.Game.ModAPI.Ingame.Utilities.MyIniKey.Equals(System.Object)">
            <summary>
            Compares this <see cref="T:VRage.Game.ModAPI.Ingame.Utilities.MyIniKey"/> with another.  Note that this is equality in the sense of a configuration key, which means the comparison is implicitly case insensitive.
            </summary>
            <param name="obj"></param>
            <returns></returns>
        </member>
        <member name="M:VRage.Game.ModAPI.Ingame.Utilities.MyIniKey.GetHashCode">
            <summary>
            Gets the hash code representing this <see cref="T:VRage.Game.ModAPI.Ingame.Utilities.MyIniKey"/>
            </summary>
            <returns></returns>
        </member>
        <member name="M:VRage.Game.ModAPI.Ingame.Utilities.MyIniKey.ToString">
            <summary>
            Generates a string representing this <see cref="T:VRage.Game.ModAPI.Ingame.Utilities.MyIniKey"/> in the form of <c>section/key</c>.
            </summary>
            <returns></returns>
        </member>
        <member name="T:VRage.Game.ModAPI.Ingame.Utilities.MyIniParseResult">
            <summary>
                Represents the results of a configuration parsing.
            </summary>
        </member>
        <member name="M:VRage.Game.ModAPI.Ingame.Utilities.MyIniParseResult.op_Equality(VRage.Game.ModAPI.Ingame.Utilities.MyIniParseResult,VRage.Game.ModAPI.Ingame.Utilities.MyIniParseResult)">
            <summary>
                Compares the two <see cref="T:VRage.Game.ModAPI.Ingame.Utilities.MyIniParseResult" />s.
            </summary>
            <param name="a"></param>
            <param name="b"></param>
            <returns></returns>
        </member>
        <member name="M:VRage.Game.ModAPI.Ingame.Utilities.MyIniParseResult.op_Inequality(VRage.Game.ModAPI.Ingame.Utilities.MyIniParseResult,VRage.Game.ModAPI.Ingame.Utilities.MyIniParseResult)">
            <summary>
                Compares the two <see cref="T:VRage.Game.ModAPI.Ingame.Utilities.MyIniParseResult" />s.
            </summary>
            <param name="a"></param>
            <param name="b"></param>
            <returns></returns>
        </member>
        <member name="M:VRage.Game.ModAPI.Ingame.Utilities.MyIniParseResult.Equals(VRage.Game.ModAPI.Ingame.Utilities.MyIniParseResult)">
            <summary>
                Compares this <see cref="T:VRage.Game.ModAPI.Ingame.Utilities.MyIniParseResult" /> with another.
            </summary>
            <param name="other"></param>
            <returns></returns>
        </member>
        <member name="M:VRage.Game.ModAPI.Ingame.Utilities.MyIniParseResult.Equals(System.Object)">
            <summary>
                Compares this <see cref="T:VRage.Game.ModAPI.Ingame.Utilities.MyIniParseResult" /> with another.
            </summary>
            <param name="obj"></param>
            <returns></returns>
        </member>
        <member name="M:VRage.Game.ModAPI.Ingame.Utilities.MyIniParseResult.GetHashCode">
            <summary>
                Gets the hash code for this <see cref="T:VRage.Game.ModAPI.Ingame.Utilities.MyIniParseResult" />.
            </summary>
            <returns></returns>
        </member>
        <member name="P:VRage.Game.ModAPI.Ingame.Utilities.MyIniParseResult.LineNo">
            <summary>
                Gets the line number where an error occured.
            </summary>
        </member>
        <member name="F:VRage.Game.ModAPI.Ingame.Utilities.MyIniParseResult.Error">
            <summary>
                Gets a description of the error that occurred during parsing. Will be <c>null</c> if no error occurred.
            </summary>
        </member>
        <member name="P:VRage.Game.ModAPI.Ingame.Utilities.MyIniParseResult.Success">
            <summary>
                Determines the success of the configuration parsing.
            </summary>
        </member>
        <member name="P:VRage.Game.ModAPI.Ingame.Utilities.MyIniParseResult.IsDefined">
            <summary>
            Determines if the value of this result is defined, meaning whether the <see cref="P:VRage.Game.ModAPI.Ingame.Utilities.MyIniParseResult.Success"/> actually holds any meaning.
            </summary>
        </member>
        <member name="M:VRage.Game.ModAPI.Ingame.Utilities.MyIniParseResult.ToString">
            <summary>
                Generates a generic error message in the form of <c>Line N: Error</c>
            </summary>
            <returns></returns>
        </member>
        <member name="T:VRage.Game.ModAPI.Ingame.Utilities.MyIniValue">
            <summary>
            Represents the value of a single configuration item.
            </summary>
        </member>
        <member name="F:VRage.Game.ModAPI.Ingame.Utilities.MyIniValue.EMPTY">
            <summary>
            Represents an empty <see cref="T:VRage.Game.ModAPI.Ingame.Utilities.MyIniValue"/>
            </summary>
        </member>
        <member name="F:VRage.Game.ModAPI.Ingame.Utilities.MyIniValue.Key">
            <summary>
            Gets the <see cref="T:VRage.Game.ModAPI.Ingame.Utilities.MyIniKey"/> this value was retrieved from
            </summary>
        </member>
        <member name="M:VRage.Game.ModAPI.Ingame.Utilities.MyIniValue.#ctor(VRage.Game.ModAPI.Ingame.Utilities.MyIniKey,System.String)">
            <summary>
            Creates a new <see cref="T:VRage.Game.ModAPI.Ingame.Utilities.MyIniValue"/>
            </summary>
            <param name="key"></param>
            <param name="value"></param>
            <exception cref="T:System.ArgumentException">Configuration value cannot use an empty key</exception>
        </member>
        <member name="P:VRage.Game.ModAPI.Ingame.Utilities.MyIniValue.IsEmpty">
            <summary>
            Determines whether this value is empty. Be aware that an empty string is not considered to be an empty value.
            </summary>
        </member>
        <member name="M:VRage.Game.ModAPI.Ingame.Utilities.MyIniValue.ToBoolean(System.Boolean)">
            <summary>
            Attempts to get this value as a <see cref="T:System.Boolean"/>. If the value is empty or cannot be understood as this data type, the defaultValue will be returned instead.
            </summary>
            <param name="defaultValue"></param>
            <returns></returns>
        </member>
        <member name="M:VRage.Game.ModAPI.Ingame.Utilities.MyIniValue.TryGetBoolean(System.Boolean@)">
            <summary>
            Attempts to get this value as a <see cref="T:System.Boolean"/>. Fills the <c>value</c> on success.
            </summary>
            <param name="value"></param>
            <returns><c>true</c> if the value could be understood as this data type; <c>false</c> otherwise</returns>
        </member>
        <member name="M:VRage.Game.ModAPI.Ingame.Utilities.MyIniValue.ToChar(System.Char)">
            <summary>
            Attempts to get this value as a <see cref="T:System.Char"/>. If the value is empty or cannot be understood as this data type, the defaultValue will be returned instead.
            </summary>
            <param name="defaultValue"></param>
            <returns></returns>
        </member>
        <member name="M:VRage.Game.ModAPI.Ingame.Utilities.MyIniValue.TryGetChar(System.Char@)">
            <summary>
            Attempts to get this value as a <see cref="T:System.Char"/>. Fills the <c>value</c> on success.
            </summary>
            <param name="value"></param>
            <returns><c>true</c> if the value could be understood as this data type; <c>false</c> otherwise</returns>
        </member>
        <member name="M:VRage.Game.ModAPI.Ingame.Utilities.MyIniValue.ToSByte(System.SByte)">
            <summary>
            Attempts to get this value as a <see cref="T:System.SByte"/>. If the value is empty or cannot be understood as this data type, the defaultValue will be returned instead.
            </summary>
            <param name="defaultValue"></param>
            <returns></returns>
        </member>
        <member name="M:VRage.Game.ModAPI.Ingame.Utilities.MyIniValue.TryGetSByte(System.SByte@)">
            <summary>
            Attempts to get this value as a <see cref="T:System.SByte"/>. Fills the <c>value</c> on success.
            </summary>
            <param name="value"></param>
            <returns><c>true</c> if the value could be understood as this data type; <c>false</c> otherwise</returns>
        </member>
        <member name="M:VRage.Game.ModAPI.Ingame.Utilities.MyIniValue.ToByte(System.Byte)">
            <summary>
            Attempts to get this value as a <see cref="T:System.Byte"/>. If the value is empty or cannot be understood as this data type, the defaultValue will be returned instead.
            </summary>
            <param name="defaultValue"></param>
            <returns></returns>
        </member>
        <member name="M:VRage.Game.ModAPI.Ingame.Utilities.MyIniValue.TryGetByte(System.Byte@)">
            <summary>
            Attempts to get this value as a <see cref="T:System.Byte"/>. Fills the <c>value</c> on success.
            </summary>
            <param name="value"></param>
            <returns><c>true</c> if the value could be understood as this data type; <c>false</c> otherwise</returns>
        </member>
        <member name="M:VRage.Game.ModAPI.Ingame.Utilities.MyIniValue.ToUInt16(System.UInt16)">
            <summary>
            Attempts to get this value as a <see cref="T:System.UInt16"/>. If the value is empty or cannot be understood as this data type, the defaultValue will be returned instead.
            </summary>
            <param name="defaultValue"></param>
            <returns></returns>
        </member>
        <member name="M:VRage.Game.ModAPI.Ingame.Utilities.MyIniValue.TryGetUInt16(System.UInt16@)">
            <summary>
            Attempts to get this value as a <see cref="T:System.UInt16"/>. Fills the <c>value</c> on success.
            </summary>
            <param name="value"></param>
            <returns><c>true</c> if the value could be understood as this data type; <c>false</c> otherwise</returns>
        </member>
        <member name="M:VRage.Game.ModAPI.Ingame.Utilities.MyIniValue.ToInt16(System.Int16)">
            <summary>
            Attempts to get this value as a <see cref="T:System.Int16"/>. If the value is empty or cannot be understood as this data type, the defaultValue will be returned instead.
            </summary>
            <param name="defaultValue"></param>
            <returns></returns>
        </member>
        <member name="M:VRage.Game.ModAPI.Ingame.Utilities.MyIniValue.TryGetInt16(System.Int16@)">
            <summary>
            Attempts to get this value as a <see cref="T:System.Int16"/>. Fills the <c>value</c> on success.
            </summary>
            <param name="value"></param>
            <returns><c>true</c> if the value could be understood as this data type; <c>false</c> otherwise</returns>
        </member>
        <member name="M:VRage.Game.ModAPI.Ingame.Utilities.MyIniValue.ToUInt32(System.UInt32)">
            <summary>
            Attempts to get this value as a <see cref="T:System.UInt32"/>. If the value is empty or cannot be understood as this data type, the defaultValue will be returned instead.
            </summary>
            <param name="defaultValue"></param>
            <returns></returns>
        </member>
        <member name="M:VRage.Game.ModAPI.Ingame.Utilities.MyIniValue.TryGetUInt32(System.UInt32@)">
            <summary>
            Attempts to get this value as a <see cref="T:System.UInt32"/>. Fills the <c>value</c> on success.
            </summary>
            <param name="value"></param>
            <returns><c>true</c> if the value could be understood as this data type; <c>false</c> otherwise</returns>
        </member>
        <member name="M:VRage.Game.ModAPI.Ingame.Utilities.MyIniValue.ToInt32(System.Int32)">
            <summary>
            Attempts to get this value as a <see cref="T:System.Int32"/>. If the value is empty or cannot be understood as this data type, the defaultValue will be returned instead.
            </summary>
            <param name="defaultValue"></param>
            <returns></returns>
        </member>
        <member name="M:VRage.Game.ModAPI.Ingame.Utilities.MyIniValue.TryGetInt32(System.Int32@)">
            <summary>
            Attempts to get this value as a <see cref="T:System.Int32"/>. Fills the <c>value</c> on success.
            </summary>
            <param name="value"></param>
            <returns><c>true</c> if the value could be understood as this data type; <c>false</c> otherwise</returns>
        </member>
        <member name="M:VRage.Game.ModAPI.Ingame.Utilities.MyIniValue.ToUInt64(System.UInt64)">
            <summary>
            Attempts to get this value as a <see cref="T:System.UInt64"/>. If the value is empty or cannot be understood as this data type, the defaultValue will be returned instead.
            </summary>
            <param name="defaultValue"></param>
            <returns></returns>
        </member>
        <member name="M:VRage.Game.ModAPI.Ingame.Utilities.MyIniValue.TryGetUInt64(System.UInt64@)">
            <summary>
            Attempts to get this value as a <see cref="T:System.UInt64"/>. Fills the <c>value</c> on success.
            </summary>
            <param name="value"></param>
            <returns><c>true</c> if the value could be understood as this data type; <c>false</c> otherwise</returns>
        </member>
        <member name="M:VRage.Game.ModAPI.Ingame.Utilities.MyIniValue.ToInt64(System.Int64)">
            <summary>
            Attempts to get this value as a <see cref="T:System.Int64"/>. If the value is empty or cannot be understood as this data type, the defaultValue will be returned instead.
            </summary>
            <param name="defaultValue"></param>
            <returns></returns>
        </member>
        <member name="M:VRage.Game.ModAPI.Ingame.Utilities.MyIniValue.TryGetInt64(System.Int64@)">
            <summary>
            Attempts to get this value as a <see cref="T:System.Int64"/>. Fills the <c>value</c> on success.
            </summary>
            <param name="value"></param>
            <returns><c>true</c> if the value could be understood as this data type; <c>false</c> otherwise</returns>
        </member>
        <member name="M:VRage.Game.ModAPI.Ingame.Utilities.MyIniValue.ToSingle(System.Single)">
            <summary>
            Attempts to get this value as a <see cref="T:System.Single"/>. If the value is empty or cannot be understood as this data type, the defaultValue will be returned instead.
            </summary>
            <param name="defaultValue"></param>
            <returns></returns>
        </member>
        <member name="M:VRage.Game.ModAPI.Ingame.Utilities.MyIniValue.TryGetSingle(System.Single@)">
            <summary>
            Attempts to get this value as a <see cref="T:System.Single"/>. Fills the <c>value</c> on success.
            </summary>
            <param name="value"></param>
            <returns><c>true</c> if the value could be understood as this data type; <c>false</c> otherwise</returns>
        </member>
        <member name="M:VRage.Game.ModAPI.Ingame.Utilities.MyIniValue.ToDouble(System.Double)">
            <summary>
            Attempts to get this value as a <see cref="T:System.Double"/>. If the value is empty or cannot be understood as this data type, the defaultValue will be returned instead.
            </summary>
            <param name="defaultValue"></param>
            <returns></returns>
        </member>
        <member name="M:VRage.Game.ModAPI.Ingame.Utilities.MyIniValue.TryGetDouble(System.Double@)">
            <summary>
            Attempts to get this value as a <see cref="T:System.Double"/>. Fills the <c>value</c> on success.
            </summary>
            <param name="value"></param>
            <returns><c>true</c> if the value could be understood as this data type; <c>false</c> otherwise</returns>
        </member>
        <member name="M:VRage.Game.ModAPI.Ingame.Utilities.MyIniValue.ToDecimal(System.Decimal)">
            <summary>
            Attempts to get this value as a <see cref="T:System.Decimal"/>. If the value is empty or cannot be understood as this data type, the defaultValue will be returned instead.
            </summary>
            <param name="defaultValue"></param>
            <returns></returns>
        </member>
        <member name="M:VRage.Game.ModAPI.Ingame.Utilities.MyIniValue.TryGetDecimal(System.Decimal@)">
            <summary>
            Attempts to get this value as a <see cref="T:System.Decimal"/>. Fills the <c>value</c> on success.
            </summary>
            <param name="value"></param>
            <returns><c>true</c> if the value could be understood as this data type; <c>false</c> otherwise</returns>
        </member>
        <member name="M:VRage.Game.ModAPI.Ingame.Utilities.MyIniValue.GetLines(System.Collections.Generic.List{System.String})">
            <summary>
            Retrieves each individual line of this value into the provided list.
            </summary>
            <param name="lines"></param>
        </member>
        <member name="M:VRage.Game.ModAPI.Ingame.Utilities.MyIniValue.ToString">
            <summary>
            Attempts to get this value as a <see cref="T:System.String"/>. If the value is empty or cannot be understood as this data type, an empty string will be returned instead.
            </summary>
            <returns></returns>
        </member>
        <member name="M:VRage.Game.ModAPI.Ingame.Utilities.MyIniValue.ToString(System.String)">
            <summary>
            Attempts to get this value as a <see cref="T:System.String"/>. If the value is empty or cannot be understood as this data type, the defaultValue will be returned instead.
            </summary>
            <param name="defaultValue"></param>
            <returns></returns>
        </member>
        <member name="M:VRage.Game.ModAPI.Ingame.Utilities.MyIniValue.TryGetString(System.String@)">
            <summary>
            Attempts to get this value as a <see cref="T:System.String"/>. Fills the <c>value</c> on success.
            </summary>
            <param name="value"></param>
            <returns><c>true</c> if the value could be understood as this data type; <c>false</c> otherwise</returns>
        </member>
        <member name="M:VRage.Game.ModAPI.Ingame.Utilities.MyIniValue.Write(System.Text.StringBuilder)">
            <summary>
            Writes this value as a string to the given string builder.
            </summary>
            <param name="stringBuilder"></param>
        </member>
        <member name="T:VRage.Game.ModAPI.Ingame.Utilities.StringSegment">
            <summary>
            Represents a segment of a string.
            </summary>
        </member>
        <member name="F:VRage.Game.ModAPI.Ingame.Utilities.StringSegment.Text">
            <summary>
            The original text string
            </summary>
        </member>
        <member name="F:VRage.Game.ModAPI.Ingame.Utilities.StringSegment.Start">
            <summary>
            Where the segment starts
            </summary>
        </member>
        <member name="F:VRage.Game.ModAPI.Ingame.Utilities.StringSegment.Length">
            <summary>
            The length of the segment
            </summary>
        </member>
        <member name="M:VRage.Game.ModAPI.Ingame.Utilities.StringSegment.#ctor(System.String)">
            <summary>
            Creates a new <see cref="T:VRage.Game.ModAPI.Ingame.Utilities.StringSegment"/> encompassing an entire string
            </summary>
            <param name="text"></param>
        </member>
        <member name="M:VRage.Game.ModAPI.Ingame.Utilities.StringSegment.#ctor(System.String,System.Int32,System.Int32)">
            <summary>
            Creates a new <see cref="T:VRage.Game.ModAPI.Ingame.Utilities.StringSegment"/> for the given string area
            </summary>
            <param name="text">The original text string</param>
            <param name="start">Where the segment starts</param>
            <param name="length">The length of the segment</param>
        </member>
        <member name="P:VRage.Game.ModAPI.Ingame.Utilities.StringSegment.IsEmpty">
            <summary>
            Determines whether this is an empty/undefined string segment
            </summary>
        </member>
        <member name="P:VRage.Game.ModAPI.Ingame.Utilities.StringSegment.IsCached">
            <summary>
            Determines whether this segment has been pre-cached in such a way that no allocation will occur when using <see cref="M:VRage.Game.ModAPI.Ingame.Utilities.StringSegment.ToString"/>
            </summary>
        </member>
        <member name="M:VRage.Game.ModAPI.Ingame.Utilities.StringSegment.IndexOf(System.Char)">
            <summary>
            Reports the zero-based index of the first occurence of the specified character, relative to <see cref="F:VRage.Game.ModAPI.Ingame.Utilities.StringSegment.Start"/>. Returns -1 if nothing was found.
            </summary>
            <param name="ch"></param>
            <returns></returns>
        </member>
        <member name="M:VRage.Game.ModAPI.Ingame.Utilities.StringSegment.IndexOf(System.Char,System.Int32)">
            <summary>
            Reports the zero-based index of the first occurence of the specified character, relative to <see cref="F:VRage.Game.ModAPI.Ingame.Utilities.StringSegment.Start"/>. Returns -1 if nothing was found.
            </summary>
            <param name="ch"></param>
            <param name="start">Where to start the search (relative to <see cref="F:VRage.Game.ModAPI.Ingame.Utilities.StringSegment.Start"/>)</param>
            <returns></returns>
        </member>
        <member name="M:VRage.Game.ModAPI.Ingame.Utilities.StringSegment.IndexOfAny(System.Char[])">
            <summary>
            Reports the zero-based index of the first occurence of one of the provided characters, relative to <see cref="F:VRage.Game.ModAPI.Ingame.Utilities.StringSegment.Start"/>. Returns -1 if nothing was found.
            </summary>
            <param name="chars"></param>
            <returns></returns>
        </member>
        <member name="M:VRage.Game.ModAPI.Ingame.Utilities.StringSegment.Equals(System.Object)">
            <summary>Indicates whether this instance and a specified object are equal.</summary>
            <param name="obj">The object to compare with the current instance.</param>
            <returns>true if <paramref name="obj">obj</paramref> and this instance are the same type and represent the same value; otherwise, false.</returns>
        </member>
        <member name="M:VRage.Game.ModAPI.Ingame.Utilities.StringSegment.GetHashCode">
            <summary>Returns the hash code for this instance.</summary>
            <returns>A 32-bit signed integer that is the hash code for this instance.</returns>
        </member>
        <member name="M:VRage.Game.ModAPI.Ingame.Utilities.StringSegment.Equals(System.String)">
            <summary>
            Compares this string segment with the given string in a case sensitive manner.
            </summary>
            <param name="other"></param>
            <returns><c>true</c> if the string segment equals the string; <c>false</c> otherwise.</returns>
        </member>
        <member name="M:VRage.Game.ModAPI.Ingame.Utilities.StringSegment.Equals(VRage.Game.ModAPI.Ingame.Utilities.StringSegment)">
            <summary>
            Compares this string segment with another in a case sensitive manner.
            </summary>
            <param name="other"></param>
            <returns><c>true</c> if the string segments are equal; <c>false</c> otherwise.</returns>
        </member>
        <member name="M:VRage.Game.ModAPI.Ingame.Utilities.StringSegment.EqualsIgnoreCase(System.String)">
            <summary>
            Compares this string segment with the given string in a case insensitive manner.
            </summary>
            <param name="other"></param>
            <returns><c>true</c> if the string segment equals the string; <c>false</c> otherwise.</returns>
        </member>
        <member name="M:VRage.Game.ModAPI.Ingame.Utilities.StringSegment.EqualsIgnoreCase(VRage.Game.ModAPI.Ingame.Utilities.StringSegment)">
            <summary>
            Compares this string segment with another in a case insensitive manner.
            </summary>
            <param name="other"></param>
            <returns><c>true</c> if the string segments are equal; <c>false</c> otherwise.</returns>
        </member>
        <member name="M:VRage.Game.ModAPI.Ingame.Utilities.StringSegment.ToString">
            <summary>
            Returns a string containing just this segment.
            </summary>
            <returns></returns>
        </member>
        <member name="P:VRage.Game.ModAPI.Ingame.Utilities.StringSegment.Item(System.Int32)">
            <summary>
            Gets a character at a position relative to <see cref="F:VRage.Game.ModAPI.Ingame.Utilities.StringSegment.Start"/>.
            </summary>
            <param name="i"></param>
            <returns></returns>
        </member>
        <member name="M:VRage.Game.ModAPI.Ingame.Utilities.StringSegment.GetLines(System.Collections.Generic.List{VRage.Game.ModAPI.Ingame.Utilities.StringSegment})">
            <summary>
            Fills a list with individual string segments representing the lines of text within this string segment, separated by newlines.
            </summary>
            <param name="lines"></param>
        </member>
        <member name="M:VRage.Game.ModAPI.Ingame.Utilities.StringSegment.GetLines(System.Collections.Generic.List{System.String})">
            <summary>
            Fills a list with individual strings representing the lines of text within this string segment, separated by newlines.
            </summary>
            <param name="lines"></param>
        </member>
        <member name="T:VRage.Game.ModAPI.Ingame.Utilities.StringSegmentComparer">
            <summary>
            A comparer designed to compare <see cref="T:VRage.Game.ModAPI.Ingame.Utilities.StringSegment"/> instances in a case sensitive manner. Use <see cref="F:VRage.Game.ModAPI.Ingame.Utilities.StringSegmentComparer.DEFAULT"/> for a default instance
            </summary>
        </member>
        <member name="F:VRage.Game.ModAPI.Ingame.Utilities.StringSegmentComparer.DEFAULT">
            <summary>
            A default instance of <see cref="T:VRage.Game.ModAPI.Ingame.Utilities.StringSegmentComparer"/>
            </summary>
        </member>
        <member name="M:VRage.Game.ModAPI.Ingame.Utilities.StringSegmentComparer.Equals(VRage.Game.ModAPI.Ingame.Utilities.StringSegment,VRage.Game.ModAPI.Ingame.Utilities.StringSegment)">
            <summary>Determines whether the specified objects are equal.</summary>
            <param name="x">The first object of type T to compare.</param>
            <param name="y">The second object of type T to compare.</param>
            <returns>true if the specified objects are equal; otherwise, false.</returns>
        </member>
        <member name="M:VRage.Game.ModAPI.Ingame.Utilities.StringSegmentComparer.GetHashCode(VRage.Game.ModAPI.Ingame.Utilities.StringSegment)">
            <summary>Returns a hash code for the specified object.</summary>
            <param name="obj">The <see cref="T:System.Object"></see> for which a hash code is to be returned.</param>
            <returns>A hash code for the specified object.</returns>
            <exception cref="T:System.ArgumentNullException">The type of <paramref name="obj">obj</paramref> is a reference type and <paramref name="obj">obj</paramref> is null.</exception>
        </member>
        <member name="T:VRage.Game.ModAPI.Ingame.Utilities.StringSegmentIgnoreCaseComparer">
            <summary>
            A comparer designed to compare <see cref="T:VRage.Game.ModAPI.Ingame.Utilities.StringSegment"/> instances in a case insensitive manner. Use <see cref="F:VRage.Game.ModAPI.Ingame.Utilities.StringSegmentIgnoreCaseComparer.DEFAULT"/> for a default instance
            </summary>
        </member>
        <member name="F:VRage.Game.ModAPI.Ingame.Utilities.StringSegmentIgnoreCaseComparer.DEFAULT">
            <summary>
            A default instance of <see cref="T:VRage.Game.ModAPI.Ingame.Utilities.StringSegmentIgnoreCaseComparer"/>
            </summary>
        </member>
        <member name="M:VRage.Game.ModAPI.Ingame.Utilities.StringSegmentIgnoreCaseComparer.Equals(VRage.Game.ModAPI.Ingame.Utilities.StringSegment,VRage.Game.ModAPI.Ingame.Utilities.StringSegment)">
            <summary>Determines whether the specified objects are equal.</summary>
            <param name="x">The first object of type T to compare.</param>
            <param name="y">The second object of type T to compare.</param>
            <returns>true if the specified objects are equal; otherwise, false.</returns>
        </member>
        <member name="M:VRage.Game.ModAPI.Ingame.Utilities.StringSegmentIgnoreCaseComparer.GetHashCode(VRage.Game.ModAPI.Ingame.Utilities.StringSegment)">
            <summary>Returns a hash code for the specified object.</summary>
            <param name="obj">The <see cref="T:System.Object"></see> for which a hash code is to be returned.</param>
            <returns>A hash code for the specified object.</returns>
            <exception cref="T:System.ArgumentNullException">The type of <paramref name="obj">obj</paramref> is a reference type and <paramref name="obj">obj</paramref> is null.</exception>
        </member>
        <member name="T:VRage.Game.ModAPI.Ingame.Utilities.TextPtr">
            <summary>
            A parser utility structure representing a pointer to a location within a string.
            </summary>
        </member>
        <member name="M:VRage.Game.ModAPI.Ingame.Utilities.TextPtr.op_Implicit(VRage.Game.ModAPI.Ingame.Utilities.TextPtr)~System.Int32">
            <summary>
            Implicitly return the index into the string
            </summary>
            <param name="ptr"></param>
        </member>
        <member name="M:VRage.Game.ModAPI.Ingame.Utilities.TextPtr.op_Implicit(VRage.Game.ModAPI.Ingame.Utilities.TextPtr)~System.String">
            <summary>
            Implicitly return the original string
            </summary>
            <param name="ptr"></param>
        </member>
        <member name="M:VRage.Game.ModAPI.Ingame.Utilities.TextPtr.op_Addition(VRage.Game.ModAPI.Ingame.Utilities.TextPtr,System.Int32)">
            <summary>
            Add an offset to a pointer
            </summary>
            <param name="ptr"></param>
            <param name="offset"></param>
            <returns></returns>
        </member>
        <member name="M:VRage.Game.ModAPI.Ingame.Utilities.TextPtr.op_Increment(VRage.Game.ModAPI.Ingame.Utilities.TextPtr)">
            <summary>
            Increment a pointer by one
            </summary>
            <param name="ptr"></param>
            <returns></returns>
        </member>
        <member name="M:VRage.Game.ModAPI.Ingame.Utilities.TextPtr.op_Subtraction(VRage.Game.ModAPI.Ingame.Utilities.TextPtr,System.Int32)">
            <summary>
            Subtract an offset from a pointer
            </summary>
            <param name="ptr"></param>
            <param name="offset"></param>
            <returns></returns>
        </member>
        <member name="M:VRage.Game.ModAPI.Ingame.Utilities.TextPtr.op_Decrement(VRage.Game.ModAPI.Ingame.Utilities.TextPtr)">
            <summary>
            Decrement a pointer by one
            </summary>
            <param name="ptr"></param>
            <returns></returns>
        </member>
        <member name="F:VRage.Game.ModAPI.Ingame.Utilities.TextPtr.Content">
            <summary>
            The original content string
            </summary>
        </member>
        <member name="F:VRage.Game.ModAPI.Ingame.Utilities.TextPtr.Index">
            <summary>
            The index being pointed at by this structure
            </summary>
        </member>
        <member name="M:VRage.Game.ModAPI.Ingame.Utilities.TextPtr.#ctor(System.String)">
            <summary>
            Create a new text pointer at the first character in the given string
            </summary>
            <param name="content"></param>
        </member>
        <member name="M:VRage.Game.ModAPI.Ingame.Utilities.TextPtr.#ctor(System.String,System.Int32)">
            <summary>
            Create a new text pointer at the given index of the given string
            </summary>
            <param name="content"></param>
            <param name="index"></param>
        </member>
        <member name="M:VRage.Game.ModAPI.Ingame.Utilities.TextPtr.IsOutOfBounds">
            <summary>
            Determines whether this pointer is currently out of bounds (before or after the string content)
            </summary>
            <returns></returns>
        </member>
        <member name="P:VRage.Game.ModAPI.Ingame.Utilities.TextPtr.Char">
            <summary>
            Returns the character currently being pointed at, or <c>\0</c> if out of bounds
            </summary>
        </member>
        <member name="P:VRage.Game.ModAPI.Ingame.Utilities.TextPtr.IsEmpty">
            <summary>
            Determines whether this pointer is an empty pointer, i.e. not pointing at anything at all.
            </summary>
        </member>
        <member name="M:VRage.Game.ModAPI.Ingame.Utilities.TextPtr.FindLineNo">
            <summary>
            Determines what line number this pointer is currently at.
            </summary>
            <returns></returns>
        </member>
        <member name="M:VRage.Game.ModAPI.Ingame.Utilities.TextPtr.Find(System.String)">
            <summary>
            Finds the given text string
            </summary>
            <param name="str"></param>
            <returns></returns>
        </member>
        <member name="M:VRage.Game.ModAPI.Ingame.Utilities.TextPtr.Find(System.Char)">
            <summary>
            Finds the given character
            </summary>
            <param name="ch"></param>
            <returns></returns>
        </member>
        <member name="M:VRage.Game.ModAPI.Ingame.Utilities.TextPtr.FindAny(System.Char[])">
            <summary>
            Finds one of the given characters
            </summary>
            <param name="chs"></param>
            <returns></returns>
        </member>
        <member name="M:VRage.Game.ModAPI.Ingame.Utilities.TextPtr.FindInLine(System.Char)">
            <summary>
            Finds the given character within the current line
            </summary>
            <param name="ch"></param>
            <returns></returns>
        </member>
        <member name="M:VRage.Game.ModAPI.Ingame.Utilities.TextPtr.FindAnyInLine(System.Char[])">
            <summary>
            Finds one of the given characters within the current line
            </summary>
            <param name="chs"></param>
            <returns></returns>
        </member>
        <member name="M:VRage.Game.ModAPI.Ingame.Utilities.TextPtr.FindEndOfLine(System.Boolean)">
            <summary>
            Finds the end of the current line
            </summary>
            <param name="skipNewline">Whether the actual newline character(s) should also be skipped. Defaults to false</param>
            <returns></returns>
        </member>
        <member name="M:VRage.Game.ModAPI.Ingame.Utilities.TextPtr.StartsWithCaseInsensitive(System.String)">
            <summary>
            Determines if the current pointer location starts with the given string - in a case insensitive manner.
            </summary>
            <param name="what"></param>
            <returns></returns>
        </member>
        <member name="M:VRage.Game.ModAPI.Ingame.Utilities.TextPtr.StartsWith(System.String)">
            <summary>
            Determines if the current pointer location starts with the given string - in a case sensitive manner.
            </summary>
            <param name="what"></param>
            <returns></returns>
        </member>
        <member name="M:VRage.Game.ModAPI.Ingame.Utilities.TextPtr.SkipWhitespace(System.Boolean)">
            <summary>
            Skips whitespace
            </summary>
            <param name="skipNewline">Whether to also skip newlines</param>
            <returns></returns>
        </member>
        <member name="M:VRage.Game.ModAPI.Ingame.Utilities.TextPtr.IsEndOfLine">
            <summary>
            Determines whether the pointer is currently at the end of a line (right before a newline character set or end of the string)
            </summary>
            <returns></returns>
        </member>
        <member name="M:VRage.Game.ModAPI.Ingame.Utilities.TextPtr.IsStartOfLine">
            <summary>
            Determines whether the pointer is currently at the beginning of a line (right after a newline character set or start of the string)
            </summary>
            <returns></returns>
        </member>
        <member name="M:VRage.Game.ModAPI.Ingame.Utilities.TextPtr.IsNewLine">
            <summary>
            Determines whether the pointer is currently at a newline (end of the string is not a newline)
            </summary>
            <returns></returns>
        </member>
        <member name="M:VRage.Game.ModAPI.Ingame.Utilities.TextPtr.TrimStart">
            <summary>
            Advances the pointer location until all whitespace is skipped - does not skip newlines
            </summary>
            <returns></returns>
        </member>
        <member name="M:VRage.Game.ModAPI.Ingame.Utilities.TextPtr.TrimEnd">
            <summary>
            Reverses the pointer location until all whitespace is skipped - does not skip newlines
            </summary>
            <returns></returns>
        </member>
        <member name="T:VRage.Game.ModAPI.Interfaces.MoveInformation">
            <summary>
            Stores information about user input
            </summary>
        </member>
        <member name="F:VRage.Game.ModAPI.Interfaces.MoveInformation.MoveIndicator">
            <summary>
            Gets user input (W/A/S/D Space/C)
            </summary>
        </member>
        <member name="F:VRage.Game.ModAPI.Interfaces.MoveInformation.RotationIndicator">
            <summary>
            Gets user input Mouse (X/Y)
            </summary>
        </member>
        <member name="F:VRage.Game.ModAPI.Interfaces.MoveInformation.RollIndicator">
            <summary>
            Gets user input (Q/E)
            </summary>
        </member>
        <member name="T:VRage.Game.ModAPI.Interfaces.IMyControllableEntity">
            <summary>
            Describes that player can take under control (mods interface)
            </summary>
        </member>
        <member name="P:VRage.Game.ModAPI.Interfaces.IMyControllableEntity.ControllerInfo">
            <summary>
            Gets information about who controls this Entity 
            </summary>
        </member>
        <member name="P:VRage.Game.ModAPI.Interfaces.IMyControllableEntity.Entity">
            <summary>
            Gets information which entity is being controlled
            </summary>
        </member>
        <member name="P:VRage.Game.ModAPI.Interfaces.IMyControllableEntity.ForceFirstPersonCamera">
            <summary>
            Gets or sets if camera should be first person
            </summary>
        </member>
        <member name="M:VRage.Game.ModAPI.Interfaces.IMyControllableEntity.GetHeadMatrix(System.Boolean,System.Boolean,System.Boolean,System.Boolean)">
            <summary>
            Gets head of character that controls this
            </summary>
            <param name="includeY">Should include Y axis rotation</param>
            <param name="includeX">Should include X axis rotation</param>
            <param name="forceHeadAnim">When true - use very accurate head position</param>
            <param name="forceHeadBone"></param>
            <returns></returns>
        </member>
        <member name="P:VRage.Game.ModAPI.Interfaces.IMyControllableEntity.LastMotionIndicator">
            <summary>
            Gets last motion indicator. User input W/A/S/D Space/C
            </summary>
            <remarks>Works only for cockpits and remote control blocks</remarks>
        </member>
        <member name="P:VRage.Game.ModAPI.Interfaces.IMyControllableEntity.LastRotationIndicator">
            <summary>
            Gets last rotation indicator. Z used for RollIndicator
            </summary>
        </member>
        <member name="M:VRage.Game.ModAPI.Interfaces.IMyControllableEntity.MoveAndRotate(VRageMath.Vector3,VRageMath.Vector2,System.Single)">
            <summary>
            Defines user input. Call <see cref="M:VRage.Game.ModAPI.Interfaces.IMyControllableEntity.MoveAndRotateStopped"/> on user input finished
            </summary>
            <param name="moveIndicator"> User input W/A/S/D Space/C</param>
            <param name="rotationIndicator">User mouse input</param>
            <param name="rollIndicator">User input Q/E</param>
        </member>
        <member name="M:VRage.Game.ModAPI.Interfaces.IMyControllableEntity.MoveAndRotateStopped">
            <summary>
            Should be called when input is finished
            </summary>
        </member>
        <member name="M:VRage.Game.ModAPI.Interfaces.IMyControllableEntity.PickUp">
            <summary>
            Forwarding this action to <see cref="M:VRage.Game.Entity.UseObject.IMyUseObject.Use(VRage.Game.Entity.UseObject.UseActionEnum,VRage.ModAPI.IMyEntity)"/> with argument <see cref="F:VRage.Game.Entity.UseObject.UseActionEnum.PickUp"/>
            </summary>
            <remarks>Works only for <see cref="T:VRage.Game.ModAPI.IMyCharacter"/></remarks>
        </member>
        <member name="M:VRage.Game.ModAPI.Interfaces.IMyControllableEntity.PickUpContinues">
            <summary>
            Forwarding this action to <see cref="M:VRage.Game.Entity.UseObject.IMyUseObject.Use(VRage.Game.Entity.UseObject.UseActionEnum,VRage.ModAPI.IMyEntity)"/> with argument <see cref="F:VRage.Game.Entity.UseObject.UseActionEnum.PickUp"/>
            </summary>
            <remarks>Works only for <see cref="T:VRage.Game.ModAPI.IMyCharacter"/>. Method is called after first call of <see cref="M:VRage.Game.ModAPI.Interfaces.IMyControllableEntity.PickUp"/>, and only if target supports <see cref="P:VRage.Game.Entity.UseObject.IMyUseObject.ContinuousUsage"/></remarks>
        </member>
        <member name="M:VRage.Game.ModAPI.Interfaces.IMyControllableEntity.Up">
            <summary>
            Move direction : up. Only <see cref="T:VRage.Game.ModAPI.IMyCharacter"/> has implementation for this method.
            </summary>
        </member>
        <member name="M:VRage.Game.ModAPI.Interfaces.IMyControllableEntity.Down">
            <summary>
            Move direction : down. Only <see cref="T:VRage.Game.ModAPI.IMyCharacter"/> has implementation for this method.
            </summary>
        </member>
        <member name="M:VRage.Game.ModAPI.Interfaces.IMyControllableEntity.Jump(VRageMath.Vector3)">
            <summary>
            Character jump. Only <see cref="T:VRage.Game.ModAPI.IMyCharacter"/> has implementation for this method.
            </summary>
        </member>
        <member name="M:VRage.Game.ModAPI.Interfaces.IMyControllableEntity.SwitchWalk">
            <summary>
            Switch between walk / run mode. Only <see cref="T:VRage.Game.ModAPI.IMyCharacter"/> has implementation for this method.
            </summary>
        </member>
        <member name="M:VRage.Game.ModAPI.Interfaces.IMyControllableEntity.Crouch">
            <summary>
            Only <see cref="T:VRage.Game.ModAPI.IMyCharacter"/> has implementation for this method.
            </summary>
        </member>
        <member name="M:VRage.Game.ModAPI.Interfaces.IMyControllableEntity.ShowInventory">
            <summary>
            Shows inventory gui of controlled Entity
            </summary>
            <remarks>Not all ControllableEntities implements this</remarks>
        </member>
        <member name="M:VRage.Game.ModAPI.Interfaces.IMyControllableEntity.ShowTerminal">
            <summary>
            Shows terminal gui
            </summary>
            <remarks>Not all ControllableEntities implements this</remarks>
        </member>
        <member name="M:VRage.Game.ModAPI.Interfaces.IMyControllableEntity.ShowRemoteAccessMenu">
            <summary>
            Shows remote access menu
            </summary>
            <remarks>Not all ControllableEntities implements this</remarks>
        </member>
        <member name="M:VRage.Game.ModAPI.Interfaces.IMyControllableEntity.SwitchThrusts">
            <summary>
            Turns on jetpack on character
            </summary>
            <remarks>Not all ControllableEntities implements this</remarks>
        </member>
        <member name="M:VRage.Game.ModAPI.Interfaces.IMyControllableEntity.SwitchDamping">
            <summary>
            Switches damping state
            </summary>
            <remarks>Not all ControllableEntities implements this</remarks>
        </member>
        <member name="M:VRage.Game.ModAPI.Interfaces.IMyControllableEntity.SwitchLights">
            <summary>
            Switches lights state
            </summary>
            <remarks>Not all ControllableEntities implements this</remarks>
        </member>
        <member name="M:VRage.Game.ModAPI.Interfaces.IMyControllableEntity.SwitchLandingGears">
            <summary>
            Switches landing gears state
            </summary>
            <remarks>Not all ControllableEntities implements this</remarks>
        </member>
        <member name="M:VRage.Game.ModAPI.Interfaces.IMyControllableEntity.SwitchHandbrake">
            <summary>
            Switches handbrake state
            </summary>
            <remarks>Not all ControllableEntities implements this</remarks>
        </member>
        <member name="M:VRage.Game.ModAPI.Interfaces.IMyControllableEntity.SwitchReactors">
            <summary>
            Switches reactors state
            </summary>
            <remarks>Not all ControllableEntities implements this</remarks>
        </member>
        <member name="M:VRage.Game.ModAPI.Interfaces.IMyControllableEntity.SwitchReactorsLocal">
            <summary>
            Switches handbrake state
            </summary>
            <remarks>Same as <see cref="M:VRage.Game.ModAPI.Interfaces.IMyControllableEntity.SwitchReactors"/></remarks>
        </member>
        <member name="M:VRage.Game.ModAPI.Interfaces.IMyControllableEntity.SwitchHelmet">
            <summary>
            Switches helmet open/closed state
            </summary>
            <remarks>Not all ControllableEntities implements this</remarks>
        </member>
        <member name="P:VRage.Game.ModAPI.Interfaces.IMyControllableEntity.EnabledThrusts">
            <summary>
            Gets if thrusts are enabled
            </summary>
            <remarks>Works only for character</remarks>
        </member>
        <member name="P:VRage.Game.ModAPI.Interfaces.IMyControllableEntity.EnabledDamping">
            <summary>
            Gets if Damping enabled
            </summary>
            <remarks>Works only for character and ship controller</remarks>
        </member>
        <member name="P:VRage.Game.ModAPI.Interfaces.IMyControllableEntity.EnabledLights">
            <summary>
            Gets if lights are enabled
            </summary>
            <remarks>Works only for character and ship controller</remarks>
        </member>
        <member name="P:VRage.Game.ModAPI.Interfaces.IMyControllableEntity.EnabledLeadingGears">
            <summary>
            Gets if at least one leading gear is enabled
            </summary>
            <remarks>Works only for ship controller</remarks>
        </member>
        <member name="P:VRage.Game.ModAPI.Interfaces.IMyControllableEntity.CanSwitchLandingGears">
            <summary>
            Gets if entity can switch landing gears
            </summary>
        </member>
        <member name="P:VRage.Game.ModAPI.Interfaces.IMyControllableEntity.EnabledReactors">
            <summary>
            Gets if grid is powered
            </summary>
            <remarks>Works only for ship controller</remarks>
        </member>
        <member name="P:VRage.Game.ModAPI.Interfaces.IMyControllableEntity.EnabledHelmet">
            <summary>
            Gets if helmet is opened
            </summary>
            <remarks>Works only for character</remarks>
        </member>
        <member name="M:VRage.Game.ModAPI.Interfaces.IMyControllableEntity.DrawHud(VRage.Game.ModAPI.Interfaces.IMyCameraController,System.Int64)">
            <summary>
            Updates hud logic, connected to entity
            </summary>
            <param name="camera">Current camera</param>
            <param name="playerId">IdentityId</param>
        </member>
        <member name="M:VRage.Game.ModAPI.Interfaces.IMyControllableEntity.Die">
            <summary>
            Makes character dead. 
            </summary>
            <remarks>Works only for character</remarks>
        </member>
        <member name="P:VRage.Game.ModAPI.Interfaces.IMyControllableEntity.PrimaryLookaround">
            <summary>
            When false, blocks 3rd view look around
            </summary>
        </member>
        <member name="P:VRage.Game.ModAPI.Interfaces.IMyControllableEntity.RelativeDampeningDistance">
            <summary>
            Allows you to set a custom max distance which relative dampening to another entity will remain active.
            </summary>
        </member>
        <member name="P:VRage.Game.ModAPI.Interfaces.IMyControllableEntity.RelativeDampeningTarget">
            <summary>
            Allows you to get or set the relative dampening entity.
            </summary>
        </member>
        <member name="P:VRage.Game.ModAPI.Interfaces.IMyControllableEntity.IsAutopilotControlled">
            <summary>
            Gets whether the entity is controller by autopilot
            </summary>
        </member>
        <member name="T:VRage.Game.ModAPI.Interfaces.IMyCameraController">
            <summary>
            Interface to control game camera (not block) (mods interface)
            </summary>
        </member>
        <member name="P:VRage.Game.ModAPI.Interfaces.IMyCameraController.IsInFirstPersonView">
            <summary>
            Gets or sets if the current camera view is first person.
            </summary>
        </member>
        <member name="P:VRage.Game.ModAPI.Interfaces.IMyCameraController.ForceFirstPersonCamera">
            <summary>
            Gets or sets if player can use only first person view
            </summary>
        </member>
        <member name="P:VRage.Game.ModAPI.Interfaces.IMyCameraController.EnableFirstPersonView">
            <summary>
            Gets or set if player can use first person view
            </summary>
        </member>
        <member name="P:VRage.Game.ModAPI.Interfaces.IMyCameraController.AllowCubeBuilding">
            <summary>
            Gets if player block building enabled
            </summary>
        </member>
        <member name="P:VRage.Game.ModAPI.Interfaces.IMyCameraController.Entity">
            <summary>
            Gets Entity to which it is attached 
            </summary>
        </member>
        <member name="M:VRage.Game.ModAPI.Interfaces.IMyCameraController.ControlCamera(VRage.Game.Utils.MyCamera)">
            <summary>
            Change camera properties now.
            Communication: from controller to camera.
            </summary>
            <param name="currentCamera"></param>
        </member>
        <member name="M:VRage.Game.ModAPI.Interfaces.IMyCameraController.Rotate(VRageMath.Vector2,System.Single)">
            <summary>
            Rotate camera controller.
            </summary>
        </member>
        <member name="M:VRage.Game.ModAPI.Interfaces.IMyCameraController.RotateStopped">
            <summary>
            Rotation of camera controller stopped.
            </summary>
        </member>
        <member name="M:VRage.Game.ModAPI.Interfaces.IMyCameraController.OnAssumeControl(VRage.Game.ModAPI.Interfaces.IMyCameraController)">
            <summary>
            Called when it is setted as new main camera controller
            </summary>
            <param name="previousCameraController">Previous camera controller</param>
        </member>
        <member name="M:VRage.Game.ModAPI.Interfaces.IMyCameraController.OnReleaseControl(VRage.Game.ModAPI.Interfaces.IMyCameraController)">
            <summary>
            Called when new camera controller setted, and this was main camera controller
            </summary>
            <param name="newCameraController">New main camera controller</param>
        </member>
        <member name="M:VRage.Game.ModAPI.Interfaces.IMyCameraController.HandleUse">
            <summary>
            Used to send "use" commands to camera controller
            </summary>
            <returns>
            Return value indicates if the camera controller handled the use button.
            If not, it should fall to ControlledObject
            </returns>
        </member>
        <member name="M:VRage.Game.ModAPI.Interfaces.IMyCameraController.HandlePickUp">
            <summary>
            Does nothing. 
            </summary>
            <returns>Always returns false</returns>
        </member>
        <member name="M:VRage.Game.ModAPI.Interfaces.IMyCameraController.GetOverridingFocusMatrix">
            <summary>
            Transformation that should be used for target selection while focusing
            </summary>
            <returns></returns>
        </member>
        <member name="M:VRage.Game.ModAPI.Interfaces.IMyDecalProxy.AddDecals(VRage.Game.ModAPI.MyHitInfo@,VRage.Utils.MyStringHash,VRageMath.Vector3,System.Object,VRage.Game.ModAPI.Interfaces.IMyDecalHandler,VRage.Utils.MyStringHash,VRage.Utils.MyStringHash,System.Boolean,VRageRender.MyDecalFlags,System.Int32,System.Collections.Generic.List{System.UInt32})">
            <summary>
            Called from Sandbox.Game.MyDecals
            </summary>
            <param name="hitInfo">Describes where it should be placed</param>
            <param name="source">Decal material</param>
            <param name="forwardDirection">Use for rotation of decal</param>
            <param name="customdata">Custom information about how to position decals</param>
            <param name="decalHandler">Sandbox.Game.MyDecals instance.</param>
            <param name="physicalMaterial">Physical material</param>
            <param name="voxelMaterial">Voxel material</param>
            <param name="isTrail">Is it trail, that wheels are leaving</param>
            <param name="flags"><see cref="T:VRageRender.MyDecalFlags"/></param>
            <param name="aliveUntil">Time in frames. When it is less than <see cref="P:VRage.Game.ModAPI.IMySession.GameplayFrameCounter"/>, it would be removed</param>
            <param name="outids">If not null, generated decal ids would be added to that list</param>
        </member>
        <member name="M:VRage.Game.ModAPI.Interfaces.IMyDecalHandler.AddDecal(VRageRender.MyDecalRenderInfo@,System.Collections.Generic.List{System.UInt32})">
            <summary>
            Adds decal
            </summary>
            <param name="renderInfo">Information about decal </param>
            <param name="ids">If not null, generated decal ids would be added to that list</param>
        </member>
        <member name="M:VRage.Game.ModAPI.Interfaces.IMyDestroyableObject.DoDamage(System.Single,VRage.Utils.MyStringHash,System.Boolean,System.Nullable{VRage.Game.ModAPI.MyHitInfo},System.Int64,System.Int64,System.Boolean,System.Nullable{VRage.Utils.MyStringHash})">
            <summary>
            Applies damage to an object
            </summary>
            <param name="damage"></param>
            <param name="damageSource"></param>
            <param name="sync"></param>
            <param name="hitInfo"></param>
            <param name="attackerId"></param>
            <param name="realHitEntityId"></param>
            <param name="shouldDetonateAmmo"></param>
            <param name="extraInfo"></param>
            <returns></returns>
        </member>
        <member name="P:VRage.Game.ModAPI.Interfaces.IMyDestroyableObject.Integrity">
            <summary>
            Gets the integrity (health) of the object
            </summary>
        </member>
        <member name="P:VRage.Game.ModAPI.Interfaces.IMyDestroyableObject.UseDamageSystem">
            <summary>
            When set to true, it should use MyDamageSystem damage routing.
            </summary>
        </member>
        <member name="T:VRage.Game.ModAPI.Interfaces.IMyEntityCapacitorComponent">
            <summary>
            Describes a component that can charge like a battery and has the ability to lose stored power.
            </summary>
        </member>
        <member name="P:VRage.Game.ModAPI.Interfaces.IMyEntityCapacitorComponent.Capacity">
            <summary>
            Gets or sets maximum capacity in MWh.
            </summary>
        </member>
        <member name="P:VRage.Game.ModAPI.Interfaces.IMyEntityCapacitorComponent.RechargeDraw">
            <summary>
            Gets or sets maximum recharge rate in megawatts. When it is fully charged, it starts using entity default consumption.
            </summary>
        </member>
        <member name="P:VRage.Game.ModAPI.Interfaces.IMyEntityCapacitorComponent.StoredPower">
            <summary>
            Gets or sets the currently stored amount of energy. Setter should be called on server.
            </summary>
        </member>
        <member name="P:VRage.Game.ModAPI.Interfaces.IMyEntityCapacitorComponent.TimeRemaining">
            <summary>
            Gets or sets time in seconds until the block is fully charged. Updated every 100 frames.
            </summary>
        </member>
        <member name="P:VRage.Game.ModAPI.Interfaces.IMyEntityCapacitorComponent.IsCharged">
            <summary>
            Gets whether the capacitor is fully charged.
            </summary>
        </member>
        <member name="E:VRage.Game.ModAPI.Interfaces.IMyEntityCapacitorComponent.OnCharged">
            <summary>
            Called on server and client when capacitor is fully charged.
            </summary>
        </member>
        <member name="T:VRage.Game.ModAPI.MyAdminSettingsEnum">
            <summary>
            Describes administrator settings
            </summary>
        </member>
        <member name="F:VRage.Game.ModAPI.MyAdminSettingsEnum.None">
            <summary>
            No rights or settings enabled
            </summary>
        </member>
        <member name="F:VRage.Game.ModAPI.MyAdminSettingsEnum.Invulnerable">
            <summary>
            Player is invulnerable
            </summary>
        </member>
        <member name="F:VRage.Game.ModAPI.MyAdminSettingsEnum.ShowPlayers">
            <summary>
            Shows all the players
            </summary>
        </member>
        <member name="F:VRage.Game.ModAPI.MyAdminSettingsEnum.UseTerminals">
            <summary>
            Can use any terminal
            </summary>
        </member>
        <member name="F:VRage.Game.ModAPI.MyAdminSettingsEnum.Untargetable">
            <summary>
            Can't be targeted by the AI
            </summary>
        </member>
        <member name="F:VRage.Game.ModAPI.MyAdminSettingsEnum.KeepOriginalOwnershipOnPaste">
            <summary>
            Keeps original owner when pasting grid
            </summary>
        </member>
        <member name="F:VRage.Game.ModAPI.MyAdminSettingsEnum.IgnoreSafeZones">
            <summary>
            Safe zone don't affect player
            </summary>
        </member>
        <member name="F:VRage.Game.ModAPI.MyAdminSettingsEnum.IgnorePcu">
            <summary>
            PCU limits are ignored
            </summary>
        </member>
        <member name="F:VRage.Game.ModAPI.MyAdminSettingsEnum.AdminOnly">
            <summary>
            All settings for the administrator
            </summary>
        </member>
        <member name="T:VRage.Game.ModAPI.MyAiBlockType">
            <summary>
            Defines block type for the AI blocks
            </summary>
        </member>
        <member name="F:VRage.Game.ModAPI.MyAiBlockType.Task">
            <summary>
            Task type for all AI Tasks blocks
            </summary>
        </member>
        <member name="F:VRage.Game.ModAPI.MyAiBlockType.Movement">
            <summary>
            Movement type for all AI Movement blocks
            </summary>
        </member>
        <member name="F:VRage.Game.ModAPI.MyAiBlockType.Combat">
            <summary>
            Combat type for all AI Combat blocks
            </summary>
        </member>
        <member name="F:VRage.Game.ModAPI.MyComponentStackInfo.MountedCount">
            <summary>
            Gets mounted count
            </summary>
        </member>
        <member name="F:VRage.Game.ModAPI.MyComponentStackInfo.TotalCount">
            <summary>
            Gets total count
            </summary>
        </member>
        <member name="F:VRage.Game.ModAPI.MyComponentStackInfo.Integrity">
            <summary>
            Integrity of group, increases when mounting more components
            </summary>
        </member>
        <member name="F:VRage.Game.ModAPI.MyComponentStackInfo.MaxIntegrity">
            <summary>
            Gets max integrity
            </summary>
        </member>
        <member name="F:VRage.Game.ModAPI.MyComponentStackInfo.DefinitionId">
            <summary>
            Gets definition id of the component
            </summary>
        </member>
        <member name="F:VRage.Game.ModAPI.MyComponentStackInfo.ComponentName">
            <summary>
            Gets component name
            </summary>
        </member>
        <member name="F:VRage.Game.ModAPI.MyComponentStackInfo.Icons">
            <summary>
            Gets component icons
            </summary>
        </member>
        <member name="P:VRage.Game.ModAPI.MyContractCustom.DefinitionId">
            <inheritdoc />
        </member>
        <member name="P:VRage.Game.ModAPI.MyContractCustom.EndBlockId">
            <inheritdoc />
        </member>
        <member name="P:VRage.Game.ModAPI.MyContractCustom.Name">
            <inheritdoc />
        </member>
        <member name="P:VRage.Game.ModAPI.MyContractCustom.Description">
            <inheritdoc />
        </member>
        <member name="P:VRage.Game.ModAPI.MyContractCustom.ReputationReward">
            <inheritdoc />
        </member>
        <member name="P:VRage.Game.ModAPI.MyContractCustom.FailReputationPrice">
            <inheritdoc />
        </member>
        <member name="P:VRage.Game.ModAPI.MyContractCustom.StartBlockId">
            <inheritdoc />
        </member>
        <member name="P:VRage.Game.ModAPI.MyContractCustom.MoneyReward">
            <inheritdoc />
        </member>
        <member name="P:VRage.Game.ModAPI.MyContractCustom.Collateral">
            <inheritdoc />
        </member>
        <member name="P:VRage.Game.ModAPI.MyContractCustom.Duration">
            <inheritdoc />
        </member>
        <member name="P:VRage.Game.ModAPI.MyContractCustom.OnContractAcquired">
            <inheritdoc />
        </member>
        <member name="P:VRage.Game.ModAPI.MyContractCustom.OnContractSucceeded">
            <inheritdoc />
        </member>
        <member name="P:VRage.Game.ModAPI.MyContractCustom.OnContractFailed">
            <inheritdoc />
        </member>
        <member name="T:VRage.Game.ModAPI.MyDamageInformation">
            <summary>
            This structure contains all information about damage being done.
            </summary>
        </member>
        <member name="M:VRage.Game.ModAPI.MyDamageInformation.#ctor(System.Boolean,System.Single,VRage.Utils.MyStringHash,System.Int64,System.Nullable{VRage.Utils.MyStringHash})">
            <summary>
            Damage information constructor
            </summary>
            <param name="isDeformation">true if deformation should happen</param>
            <param name="amount">damage amount</param>
            <param name="type">type of the damage</param>
            <param name="attackerId">id of the attacker</param>
            <param name="extraInfo">Extra info about what caused damage. For projectiles and missiles direct damage it is storing ammo SubtypeName that caused damage</param>
        </member>
        <member name="F:VRage.Game.ModAPI.MyDamageInformation.IsDeformation">
            <summary>
            Determines whether deformation is enabled
            </summary>
        </member>
        <member name="F:VRage.Game.ModAPI.MyDamageInformation.Amount">
            <summary>
            Gets or Sets the amount of the damage
            </summary>
        </member>
        <member name="F:VRage.Game.ModAPI.MyDamageInformation.Type">
            <summary>
            Gets or Sets the type of the damage
            </summary>
        </member>
        <member name="F:VRage.Game.ModAPI.MyDamageInformation.AttackerId">
            <summary>
            Gets or Sets the id of the attacker
            </summary>
        </member>
        <member name="F:VRage.Game.ModAPI.MyDamageInformation.ExtraInfo">
            <summary>
            Gets or Sets the type of the damage
            </summary>
        </member>
        <member name="T:VRage.Game.ModAPI.MyDeviceBase">
            <summary>
            Implements base abstract class for device
            </summary>
        </member>
        <member name="P:VRage.Game.ModAPI.MyDeviceBase.InventoryItemId">
            <summary>
            Reference to the inventory item that this device originated from.
            Can be used to update the inventory item (when ammo changes etc...)
            </summary>
        </member>
        <member name="M:VRage.Game.ModAPI.MyDeviceBase.Init(VRage.Game.MyObjectBuilder_DeviceBase)">
            <summary>
            Initialization of the device
            </summary>
            <param name="objectBuilder">device object builder instance</param>
        </member>
        <member name="M:VRage.Game.ModAPI.MyDeviceBase.GetMuzzleLocalPosition">
            <summary>
            Gets the muzzle local position
            </summary>
            <returns>local vector</returns>
        </member>
        <member name="M:VRage.Game.ModAPI.MyDeviceBase.GetMuzzleWorldPosition">
            <summary>
            Gets the muzzle world position
            </summary>
            <returns>world vector</returns>
        </member>
        <member name="M:VRage.Game.ModAPI.MyDeviceBase.CanSwitchAmmoMagazine">
            <summary>
            Determines whether this device can switch ammo
            </summary>
            <returns>true if can</returns>
        </member>
        <member name="M:VRage.Game.ModAPI.MyDeviceBase.SwitchToNextAmmoMagazine">
            <summary>
            Switches to the next ammo magazine
            </summary>
            <returns>true if success</returns>
        </member>
        <member name="M:VRage.Game.ModAPI.MyDeviceBase.SwitchAmmoMagazineToNextAvailable">
            <summary>
            Switches to the next available ammo magazine
            </summary>
            <returns></returns>
        </member>
        <member name="T:VRage.Game.ModAPI.MyGridGroupsDefaultEventHandler">
            <summary>
            Implements abstract base for grid group event handler
            </summary>
        </member>
        <member name="P:VRage.Game.ModAPI.MyGridGroupsDefaultEventHandler.GridGroup">
            <summary>
            Gets the grid group
            </summary>
        </member>
        <member name="P:VRage.Game.ModAPI.MyGridGroupsDefaultEventHandler.IsClosed">
            <summary>
            Determines if it's closed
            </summary>
        </member>
        <member name="M:VRage.Game.ModAPI.MyGridGroupsDefaultEventHandler.GetGuid">
            <summary>
            Gets Guid
            </summary>
            <returns>unique guid</returns>
        </member>
        <member name="M:VRage.Game.ModAPI.MyGridGroupsDefaultEventHandler.#ctor(VRage.Game.ModAPI.IMyGridGroupData)">
            <summary>
            Constructor
            </summary>
            <param name="obj">group data instance</param>
        </member>
        <member name="M:VRage.Game.ModAPI.MyGridGroupsDefaultEventHandler.ToString">
            <inheritdoc />
        </member>
        <member name="T:VRage.Game.ModAPI.MyHitInfo">
            <summary>
            Implements Hit Info data
            </summary>
        </member>
        <member name="F:VRage.Game.ModAPI.MyHitInfo.Position">
            <summary>
            Gets or Sets the Position vector
            </summary>
        </member>
        <member name="F:VRage.Game.ModAPI.MyHitInfo.Normal">
            <summary>
            Gets or Sets the Normal vector
            </summary>
        </member>
        <member name="F:VRage.Game.ModAPI.MyHitInfo.Velocity">
            <summary>
            Gets or Sets the Velocity vector
            </summary>
        </member>
        <member name="F:VRage.Game.ModAPI.MyHitInfo.ShapeKey">
            <summary>
            Gets or Sets the Shape Key of the physical shape
            </summary>
        </member>
        <member name="T:VRage.Game.ModAPI.MyPromoteLevel">
            <summary>
            Describes what permissions a user has
            If you add items, always preserve order from lowest to highest permission
            </summary>
        </member>
        <member name="F:VRage.Game.ModAPI.MyPromoteLevel.None">
            <summary>
            Normal players
            </summary>
        </member>
        <member name="F:VRage.Game.ModAPI.MyPromoteLevel.Scripter">
            <summary>
            Can edit scripts when the scripter role is enabled
            </summary>
        </member>
        <member name="F:VRage.Game.ModAPI.MyPromoteLevel.Moderator">
            <summary>
            Can kick and ban players, has access to 'Show All Players' option in Admin Tools menu
            </summary>
        </member>
        <member name="F:VRage.Game.ModAPI.MyPromoteLevel.SpaceMaster">
            <summary>
            Has access to Space Master tools
            </summary>
        </member>
        <member name="F:VRage.Game.ModAPI.MyPromoteLevel.Admin">
            <summary>
            Has access to Admin tools
            </summary>
        </member>
        <member name="F:VRage.Game.ModAPI.MyPromoteLevel.Owner">
            <summary>
            Admins listed in server config, cannot be demoted
            </summary>
        </member>
        <member name="T:VRage.Game.ModAPI.MyShootActionEnum">
            <summary>
            The type of fire action for a gun.
            </summary>
        </member>
        <member name="F:VRage.Game.ModAPI.MyShootActionEnum.PrimaryAction">
            <summary>
            Primary fire action (eg. left mouse button)
            </summary>
        </member>
        <member name="F:VRage.Game.ModAPI.MyShootActionEnum.SecondaryAction">
            <summary>
            Secondary fire action (eg. right mouse button)
            </summary>
        </member>
        <member name="F:VRage.Game.ModAPI.MyShootActionEnum.TertiaryAction">
            <summary>
            Tertiary fire action
            </summary>
        </member>
        <member name="T:VRage.Game.ModAPI.MyStoreItemData">
            <summary>
            Implements Store Item Data
            </summary>
        </member>
        <member name="P:VRage.Game.ModAPI.MyStoreItemData.ItemId">
            <summary>
            Gets definition id of the item
            </summary>
        </member>
        <member name="P:VRage.Game.ModAPI.MyStoreItemData.Amount">
            <summary>
            Gets amount for buy/sell
            </summary>
        </member>
        <member name="P:VRage.Game.ModAPI.MyStoreItemData.PricePerUnit">
            <summary>
            Gets price per unit
            </summary>
        </member>
        <member name="P:VRage.Game.ModAPI.MyStoreItemData.OnTransaction">
            <summary>        
            When player makes an transaction regarding this item
            
            int - amount sold
            int - amount remaining
            int - price of transaction
            long - owner of block
            long - buyer/seller
            </summary>
        </member>
        <member name="P:VRage.Game.ModAPI.MyStoreItemData.OnCancel">
            <summary>
            When owner of store block cancels order/offer regarding this item
            </summary>
        </member>
        <member name="M:VRage.Game.ModAPI.MyStoreItemData.#ctor(VRage.ObjectBuilders.SerializableDefinitionId,System.Int32,System.Int32,System.Action{System.Int32,System.Int32,System.Int64,System.Int64,System.Int64},System.Action)">
            <summary>
            Store Item constructor
            </summary>
            <param name="itemId">definition id of the item</param>
            <param name="amount">amount for buy/sell</param>
            <param name="pricePerUnit">price per unit</param>
            <param name="onTransactionCallback">on transaction callback</param>
            <param name="onCancelCallback">on cancel callback</param>
        </member>
        <member name="T:VRage.Game.ModAPI.MyUpdateTiersGridPresence">
            <summary>
            Describes tiers of grid presence (if any other grid is nearby)
            </summary>
        </member>
        <member name="F:VRage.Game.ModAPI.MyUpdateTiersGridPresence.Normal">
            <summary>
            There is grid nearby
            </summary>
        </member>
        <member name="F:VRage.Game.ModAPI.MyUpdateTiersGridPresence.Tier1">
            <summary>
            There is not grid nearby, updates can behave differently (slower or not running)
            </summary>
        </member>
        <member name="T:VRage.Game.ModAPI.MyUpdateTiersPlayerPresence">
            <summary>
            Describes tiers of player presence (if any player is nearby and grid is replicated to the client)
            </summary>
        </member>
        <member name="F:VRage.Game.ModAPI.MyUpdateTiersPlayerPresence.Normal">
            <summary>
            Player is nearby, grid is replicated to the client
            </summary>
        </member>
        <member name="F:VRage.Game.ModAPI.MyUpdateTiersPlayerPresence.Tier1">
            <summary>
            Player is not nearby, grid is not replicated to the client. Update time can be slower.
            </summary>
        </member>
        <member name="F:VRage.Game.ModAPI.MyUpdateTiersPlayerPresence.Tier2">
            <summary>
            Player is not nearby, grid is not replicated to the client. Update time can be even more slower.
            </summary>
        </member>
        <member name="T:VRage.Game.ModAPI.Network.MySync`2">
            <summary>
            Implementation of synchronized property value.
            </summary>
            <typeparam name="T">Property type</typeparam>
            <typeparam name="TSyncDirection">Allowed synchronization direction, can be <see cref="T:VRage.Sync.SyncDirection.BothWays"/> or <see cref="T:VRage.Sync.SyncDirection.FromServer"/>.</typeparam>
        </member>
        <member name="P:VRage.Game.ModAPI.Network.MySync`2.Id">
            <summary>
            The unique Id for this Sync object. This is allocated per-entity.
            </summary>
        </member>
        <member name="P:VRage.Game.ModAPI.Network.MySync`2.ValueType">
            <summary>
            The type of the <see cref="P:VRage.Game.ModAPI.Network.MySync`2.Value"/> property.
            </summary>
        </member>
        <member name="E:VRage.Game.ModAPI.Network.MySync`2.ValueChanged">
            <summary>
            ValueChanged event is raised when value is set locally (setting <see cref="P:VRage.Game.ModAPI.Network.MySync`2.Value"/> property) or remotely (through deserialization).
            If validation fails, value is not changed and ValueChanged is not raised.
            </summary>
        </member>
        <member name="P:VRage.Game.ModAPI.Network.MySync`2.Value">
            <summary>
            Value setter/getter. Does not validate.
            </summary>
        </member>
        <member name="P:VRage.Game.ModAPI.Network.MySync`2.Enabled">
            <summary>
            Only synchronizes with server/client if enabled. Default is <see langword="true"/>.
            </summary>
        </member>
        <member name="P:VRage.Game.ModAPI.Network.MySync`2.Validate">
            <summary>
            Validate handler is raised on server after deserialization.
            </summary>
        </member>
        <member name="M:VRage.Game.ModAPI.Network.MySync`2.ValidateAndSet(`0)">
            <summary>
            Validates the value and sets it (when valid).
            </summary>
        </member>
        <member name="M:VRage.Game.ModAPI.Network.MySync`2.SetLocalValue(`0)">
            <summary>
            Sets new value only locally if on client. USE ONLY WITH VALUES YOU GOT FROM THE SERVER VIA OTHER CHANNELS! (e.g. when initializing from object builder)
            Behaves like regular set on the server
            </summary>
        </member>
        <member name="F:VRage.Game.MySunProperties.BaseSunDirectionNormalized">
            <summary>Direction TO sun</summary>
        </member>
        <member name="F:VRage.Game.MySunProperties.SunDirectionNormalized">
            <summary>Direction TO sun</summary>
        </member>
        <member name="T:VRage.Game.MyVisualSettingsDefinition">
            <summary>
            Stripped environment definition with only visual settings
            </summary>
        </member>
        <member name="P:VRage.Game.MyVoxelMaterialDefinition.Index">
            <summary>
            Value generated at runtime to ensure correctness. Do not serialize or deserialize.
            This is what the old cast to int used to result into, but now numbers depend on order in XML file.
            TODO Serialize to XML and ensure upon loading that these values are starting from 0 and continuous.
            </summary>
        </member>
        <member name="T:VRage.Game.Entities.IMySafeZoneComponent">
            <summary>
            Describes entity component for safezone block
            </summary>
        </member>
        <member name="M:VRage.Game.Entities.IMySafeZoneComponent.SaveSafeZoneSettings">
            <summary>
            Saves settings of the safezone
            </summary>
        </member>
        <member name="T:VRage.Game.Entities.IMyTieredUpdateBlock">
            <summary>
            Describes tiered update block
            </summary>
        </member>
        <member name="P:VRage.Game.Entities.IMyTieredUpdateBlock.IsTieredUpdateSupported">
            <summary>
            Gets is tiered update supported value, changing value in runtime is not supported
            </summary>
        </member>
        <member name="M:VRage.Game.Entities.IMyTieredUpdateBlock.ChangeTier">
            <summary>
            Called when block needs to change tier
            </summary>
        </member>
        <member name="T:VRage.Game.Entity.EntityComponents.Interfaces.IMyGameLogicComponent">
            <summary>
            This interface is for internal use only.
            This basically a way to use internal members without the InternalsVisibleTo attribute.
            The members defined here help us hide some internal logic from modders.
            DO NOT WHITELIST THIS!
            </summary>
        </member>
        <member name="P:VRage.Game.Entity.EntityComponents.Interfaces.IMyGameLogicComponent.EntityUpdate">
            <summary>
            Components with this flag will update at the same time as their parent entity.
            When the parent entity stops updating, so does the component.
            This flag basically reverts to the old system.
            </summary>
        </member>
        <member name="P:VRage.Game.Entity.EntityComponents.Interfaces.IMyUpdatingEntityComponent.NeedsUpdateChanged">
            <summary>
            When needs update value is changed, 2nd parameter is old value
            </summary>
        </member>
        <member name="P:VRage.Game.Entity.EntityComponents.Interfaces.IMyUpdatingEntityComponent.UpdateParallelChanged">
            <summary>
            Whend update parallel is changed, 2nd parameter is old value
            </summary>
        </member>
        <member name="F:VRage.Game.Entity.MyInventoryBase.RemoveEntityOnEmpty">
            <summary>
            Setting this flag to true causes to call Close() on the Entity of Container, when the GetItemsCount() == 0.
            This causes to remove entity from the world, when this inventory is empty.
            </summary>
        </member>
        <member name="P:VRage.Game.Entity.MyInventoryBase.InventoryId">
            <summary>
            This is for the purpose of identifying the inventory in aggregates (i.e. "Backpack", "LeftHand", ...)
            </summary>
        </member>
        <member name="E:VRage.Game.Entity.MyInventoryBase.ContentsChanged">
            <summary>
            Called when items were added or removed, or their amount has changed
            </summary>
        </member>
        <member name="E:VRage.Game.Entity.MyInventoryBase.OwnerChanged">
            <summary>
            Called if this inventory changed its owner
            </summary>
        </member>
        <member name="M:VRage.Game.Entity.MyInventoryBase.AddItems(VRage.MyFixedPoint,VRage.ObjectBuilders.MyObjectBuilder_Base)">
            <summary>
            Adds item to inventory
            </summary>
            <param name="amount"></param>
            <param name="objectBuilder"></param>        
            <returns>true if items were added, false if items didn't fit</returns>
        </member>
        <member name="M:VRage.Game.Entity.MyInventoryBase.RemoveItemsOfType(VRage.MyFixedPoint,VRage.Game.MyDefinitionId,VRage.Game.MyItemFlags,System.Boolean)">
            <summary>
            Remove items of a given amount and definition
            </summary>
            <param name="amount">amount ot remove</param>
            <param name="contentId">definition id of items to be removed</param>
            <param name="spawn">Set tru to spawn object in the world, after it was removed</param>
            <param name="flags"></param>
            <returns>Returns the actually removed amount</returns>
        </member>
        <member name="M:VRage.Game.Entity.MyInventoryBase.GetItemsCount">
            <summary>
            Returns the number of items in the inventory. This needs to be overrided, otherwise it returns 0!
            </summary>
            <returns>int - number of items in inventory</returns>
        </member>
        <member name="M:VRage.Game.Entity.MyInventoryBase.GetInventoryCount">
            <summary>
            Returns number of embedded inventories - this inventory can be aggregation of other inventories.
            </summary>
            <returns>Return one for simple inventory, different number when this instance is an aggregation.</returns>
        </member>
        <member name="M:VRage.Game.Entity.MyInventoryBase.IterateInventory(System.Int32,System.Int32)">
            <summary>
            Search for inventory having given search index. 
            Aggregate inventory: Iterates through aggregate inventory until simple inventory with matching index is found.
            Simple inventory: Returns itself if currentIndex == searchIndex.
            
            Usage: searchIndex = index of inventory being searched, leave currentIndex = 0.
            </summary>
        </member>
        <member name="T:VRage.Game.Entity.MyPhysicalInventoryItem">
            <summary>
            Implements physical item data
            </summary>
        </member>
        <member name="P:VRage.Game.Entity.MyPhysicalInventoryItem.VRage#Game#ModAPI#Ingame#IMyInventoryItem#Amount">
            <summary>
            Gets or Sets Amount
            </summary>
        </member>
        <member name="P:VRage.Game.Entity.MyPhysicalInventoryItem.VRage#Game#ModAPI#Ingame#IMyInventoryItem#Scale">
            <summary>
            Gets or Sets Scale
            </summary>
        </member>
        <member name="P:VRage.Game.Entity.MyPhysicalInventoryItem.VRage#Game#ModAPI#Ingame#IMyInventoryItem#Content">
            <summary>
            Gets or Sets Content
            </summary>
        </member>
        <member name="P:VRage.Game.Entity.MyPhysicalInventoryItem.VRage#Game#ModAPI#Ingame#IMyInventoryItem#ItemId">
            <summary>
            Gets or Sets Item Id
            </summary>
        </member>
        <member name="T:VRage.Game.Entity.MyEntitiesInterface">
            <summary>
            Callbacks to various MyEntities methods.
            </summary>
        </member>
        <member name="F:VRage.Game.Entity.MyEntitiesInterface.RegisterUpdate">
            <summary>
            Register entity for updating.
            </summary>
        </member>
        <member name="F:VRage.Game.Entity.MyEntitiesInterface.UnregisterUpdate">
            <summary>
            Unregister entity from updating.
            </summary>
        </member>
        <member name="F:VRage.Game.Entity.MyEntitiesInterface.RegisterDraw">
            <summary>
            Register entity for drawing.
            </summary>
        </member>
        <member name="F:VRage.Game.Entity.MyEntitiesInterface.UnregisterDraw">
            <summary>
            Unregister entity from drawing.
            </summary>
        </member>
        <member name="F:VRage.Game.Entity.MyEntitiesInterface.SetEntityName">
            <summary>
            Callback to public static void MyEntities.SetEntityName(MyEntity myEntity, bool possibleRename = true).
            </summary>
        </member>
        <member name="F:VRage.Game.Entity.MyEntitiesInterface.IsUpdateInProgress">
            <summary>
            Is update of all entities in progress?
            </summary>
        </member>
        <member name="F:VRage.Game.Entity.MyEntitiesInterface.IsCloseAllowed">
            <summary>
            Is closing of objects allowed?
            </summary>
        </member>
        <member name="T:VRage.Game.Entity.MyEntity">
            <summary>
            Implements entity features for ModAPI interface
            </summary>
        </member>
        <member name="P:VRage.Game.Entity.MyEntity.EntityId">
            <summary>
            Entity id, can be set by subclasses (for example when using pool...)
            </summary>
        </member>
        <member name="P:VRage.Game.Entity.MyEntity.Parent">
            <summary>
            Gets or sets the parent.
            </summary>
            <value>
            The parent.
            </value>
        </member>
        <member name="M:VRage.Game.Entity.MyEntity.GetTopMostParent(System.Type)">
            <summary>
            Return top most parent of this entity
            </summary>
            <returns></returns>
        </member>
        <member name="F:VRage.Game.Entity.MyEntity.m_physics">
            Optimized link to physics component.
        </member>
        <member name="P:VRage.Game.Entity.MyEntity.VRage#ModAPI#IMyEntity#Physics">
            Implementing interface IMyEntity - get/set physics component.
        </member>
        <member name="P:VRage.Game.Entity.MyEntity.Physics">
            Gets the physic component of the entity.
        </member>
        <member name="M:VRage.Game.Entity.MyEntity.UpdateBeforeSimulation10">
            <summary>
            Called each 10th frame if registered for update10
            </summary>
        </member>
        <member name="M:VRage.Game.Entity.MyEntity.UpdateBeforeSimulation100">
            <summary>
            Called each 100th frame if registered for update100
            </summary>
        </member>
        <member name="M:VRage.Game.Entity.MyEntity.DebugDrawPhysics">
            <summary>
            Draw physical representation of entity
            </summary>
        </member>
        <member name="M:VRage.Game.Entity.MyEntity.OnAddedToScene(System.Object)">
            <summary>
            Called when [activated] which for entity means that was added to scene.
            </summary>
            <param name="source">The source of activation.</param>
        </member>
        <member name="E:VRage.Game.Entity.MyEntity.OnMarkForClose">
            <summary>
            This event may not be invoked at all, when calling MyEntities.CloseAll, marking is bypassed
            </summary>
        </member>
        <member name="M:VRage.Game.Entity.MyEntity.BeforeGameLogicInit">
            <summary>
            Called right before initializing the GameLogic component, during entity Init.
            </summary>
        </member>
        <member name="M:VRage.Game.Entity.MyEntity.Delete">
            <summary>
            Every object must have this method, but not every phys object must necessarily have something to cleanup
            <remarks>
            </remarks>
            </summary>
        </member>
        <member name="M:VRage.Game.Entity.MyEntity.Close">
            <summary>
            This method marks this entity for close which means, that Close
            will be called after all entities are updated
            </summary>
        </member>
        <member name="M:VRage.Game.Entity.MyEntity.GetObjectBuilder(System.Boolean)">
            <summary>
            Gets object builder from object.
            </summary>
            <returns></returns>
        </member>
        <member name="M:VRage.Game.Entity.MyEntity.BeforeSave">
            <summary>
            Called before method GetObjectBuilder, when saving sector
            </summary>
        </member>
        <member name="M:VRage.Game.Entity.MyEntity.PrepareForDraw">
            <summary>
            Method is called defacto from Update, preparation fo Draw
            </summary>
        </member>
        <member name="M:VRage.Game.Entity.MyEntity.GetInventoryBase(System.Int32)">
            <summary>
            Search for inventory component with maching index.
            </summary>
        </member>
        <member name="M:VRage.Game.Entity.MyEntity.GetInventoryBase">
            <summary>
            Simply get the MyInventoryBase component stored in this entity.
            </summary>
            <returns></returns>
        </member>
        <member name="P:VRage.Game.Entity.MyEntity.InventoryCount">
            <summary>
            Iterate through inventories and return their count.
            </summary>
        </member>
        <member name="P:VRage.Game.Entity.MyEntity.HasInventory">
            <summary>
            Returns true if this entity has got at least one inventory. 
            Note that one aggregate inventory can contain zero simple inventories => zero will be returned even if GetInventoryBase() != null.
            </summary>
        </member>
        <member name="P:VRage.Game.Entity.MyEntity.DisplayNameText">
            <summary>
            Display Name for GUI etc. Override in descendant classes. Usually used to display in terminal or inventory controls.
            </summary>
        </member>
        <member name="P:VRage.Game.Entity.MyEntity.Flags">
            <inheritdoc />
        </member>
        <member name="P:VRage.Game.Entity.MyEntity.VRage#ModAPI#IMyEntity#Parent">
            <inheritdoc />
        </member>
        <member name="M:VRage.Game.Entity.MyEntity.VRage#ModAPI#IMyEntity#GetTopMostParent(System.Type)">
            <inheritdoc />
        </member>
        <member name="M:VRage.Game.Entity.MyEntity.VRage#ModAPI#IMyEntity#GetChildren(System.Collections.Generic.List{VRage.ModAPI.IMyEntity},System.Func{VRage.ModAPI.IMyEntity,System.Boolean})">
            <inheritdoc />
        </member>
        <member name="P:VRage.Game.Entity.MyEntity.VRage#ModAPI#IMyEntity#Name">
            <inheritdoc />
        </member>
        <member name="P:VRage.Game.Entity.MyEntity.VRage#ModAPI#IMyEntity#DebugAsyncLoading">
            <inheritdoc />
        </member>
        <member name="M:VRage.Game.Entity.MyEntity.GetDelegate(System.Action{VRage.ModAPI.IMyEntity})">
            <inheritdoc />
        </member>
        <member name="E:VRage.Game.Entity.MyEntity.VRage#ModAPI#IMyEntity#OnClose">
            <inheritdoc />
        </member>
        <member name="E:VRage.Game.Entity.MyEntity.VRage#ModAPI#IMyEntity#OnClosing">
            <inheritdoc />
        </member>
        <member name="E:VRage.Game.Entity.MyEntity.VRage#ModAPI#IMyEntity#OnMarkForClose">
            <inheritdoc />
        </member>
        <member name="E:VRage.Game.Entity.MyEntity.VRage#ModAPI#IMyEntity#OnPhysicsChanged">
            <inheritdoc />
        </member>
        <member name="P:VRage.Game.Entity.MyEntity.VRage#ModAPI#IMyEntity#DisplayName">
            <inheritdoc />
        </member>
        <member name="M:VRage.Game.Entity.MyEntity.VRage#ModAPI#IMyEntity#GetFriendlyName">
            <inheritdoc />
        </member>
        <member name="M:VRage.Game.Entity.MyEntity.VRage#ModAPI#IMyEntity#Close">
            <inheritdoc />
        </member>
        <member name="P:VRage.Game.Entity.MyEntity.VRage#ModAPI#IMyEntity#MarkedForClose">
            <inheritdoc />
        </member>
        <member name="M:VRage.Game.Entity.MyEntity.VRage#ModAPI#IMyEntity#Delete">
            <inheritdoc />
        </member>
        <member name="P:VRage.Game.Entity.MyEntity.VRage#Game#ModAPI#Ingame#IMyEntity#Closed">
            <inheritdoc />
        </member>
        <member name="P:VRage.Game.Entity.MyEntity.VRage#ModAPI#IMyEntity#Model">
            <inheritdoc />
        </member>
        <member name="P:VRage.Game.Entity.MyEntity.VRage#ModAPI#IMyEntity#GameLogic">
            <inheritdoc />
        </member>
        <member name="P:VRage.Game.Entity.MyEntity.VRage#ModAPI#IMyEntity#NeedsUpdate">
            <inheritdoc />
        </member>
        <member name="P:VRage.Game.Entity.MyEntity.VRage#ModAPI#IMyEntity#NearFlag">
            <inheritdoc />
        </member>
        <member name="P:VRage.Game.Entity.MyEntity.VRage#ModAPI#IMyEntity#CastShadows">
            <inheritdoc />
        </member>
        <member name="P:VRage.Game.Entity.MyEntity.VRage#ModAPI#IMyEntity#FastCastShadowResolve">
            <inheritdoc />
        </member>
        <member name="P:VRage.Game.Entity.MyEntity.VRage#ModAPI#IMyEntity#NeedsResolveCastShadow">
            <inheritdoc />
        </member>
        <member name="M:VRage.Game.Entity.MyEntity.VRage#ModAPI#IMyEntity#GetDiffuseColor">
            <inheritdoc />
        </member>
        <member name="P:VRage.Game.Entity.MyEntity.VRage#ModAPI#IMyEntity#MaxGlassDistSq">
            <inheritdoc />
        </member>
        <member name="P:VRage.Game.Entity.MyEntity.VRage#ModAPI#IMyEntity#NeedsDraw">
            <inheritdoc />
        </member>
        <member name="P:VRage.Game.Entity.MyEntity.VRage#ModAPI#IMyEntity#NeedsDrawFromParent">
            <inheritdoc />
        </member>
        <member name="P:VRage.Game.Entity.MyEntity.VRage#ModAPI#IMyEntity#Transparent">
            <inheritdoc />
        </member>
        <member name="P:VRage.Game.Entity.MyEntity.VRage#ModAPI#IMyEntity#ShadowBoxLod">
            <inheritdoc />
        </member>
        <member name="P:VRage.Game.Entity.MyEntity.VRage#ModAPI#IMyEntity#SkipIfTooSmall">
            <inheritdoc />
        </member>
        <member name="P:VRage.Game.Entity.MyEntity.VRage#ModAPI#IMyEntity#Storage">
            <inheritdoc />
        </member>
        <member name="P:VRage.Game.Entity.MyEntity.VRage#ModAPI#IMyEntity#Visible">
            <inheritdoc />
        </member>
        <member name="M:VRage.Game.Entity.MyEntity.VRage#ModAPI#IMyEntity#GetDistanceBetweenCameraAndBoundingSphere">
            <inheritdoc />
        </member>
        <member name="M:VRage.Game.Entity.MyEntity.VRage#ModAPI#IMyEntity#GetDistanceBetweenCameraAndPosition">
            <inheritdoc />
        </member>
        <member name="M:VRage.Game.Entity.MyEntity.VRage#ModAPI#IMyEntity#GetLargestDistanceBetweenCameraAndBoundingSphere">
            <inheritdoc />
        </member>
        <member name="M:VRage.Game.Entity.MyEntity.VRage#ModAPI#IMyEntity#GetSmallestDistanceBetweenCameraAndBoundingSphere">
            <inheritdoc />
        </member>
        <member name="M:VRage.Game.Entity.MyEntity.VRage#ModAPI#IMyEntity#GetIntersectionWithLineAndBoundingSphere(VRageMath.LineD@,System.Single)">
            <inheritdoc />
        </member>
        <member name="M:VRage.Game.Entity.MyEntity.VRage#ModAPI#IMyEntity#GetIntersectionWithSphere(VRageMath.BoundingSphereD@)">
            <inheritdoc />
        </member>
        <member name="M:VRage.Game.Entity.MyEntity.VRage#ModAPI#IMyEntity#GetInventory">
            <inheritdoc />
        </member>
        <member name="M:VRage.Game.Entity.MyEntity.VRage#ModAPI#IMyEntity#GetInventory(System.Int32)">
            <inheritdoc />
        </member>
        <member name="M:VRage.Game.Entity.MyEntity.VRage#ModAPI#IMyEntity#GetTrianglesIntersectingSphere(VRageMath.BoundingSphere@,System.Nullable{VRageMath.Vector3},System.Nullable{System.Single},System.Collections.Generic.List{VRage.Utils.MyTriangle_Vertex_Normals},System.Int32)">
            <inheritdoc />
        </member>
        <member name="M:VRage.Game.Entity.MyEntity.VRage#ModAPI#IMyEntity#DoOverlapSphereTest(System.Single,VRageMath.Vector3D)">
            <inheritdoc />
        </member>
        <member name="M:VRage.Game.Entity.MyEntity.VRage#ModAPI#IMyEntity#GetObjectBuilder(System.Boolean)">
            <inheritdoc />
        </member>
        <member name="P:VRage.Game.Entity.MyEntity.VRage#ModAPI#IMyEntity#Save">
            <inheritdoc />
        </member>
        <member name="P:VRage.Game.Entity.MyEntity.VRage#ModAPI#IMyEntity#PersistentFlags">
            <inheritdoc />
        </member>
        <member name="P:VRage.Game.Entity.MyEntity.VRage#ModAPI#IMyEntity#InScene">
            <inheritdoc />
        </member>
        <member name="P:VRage.Game.Entity.MyEntity.VRage#ModAPI#IMyEntity#InvalidateOnMove">
            <inheritdoc />
        </member>
        <member name="P:VRage.Game.Entity.MyEntity.VRage#ModAPI#IMyEntity#IsCCDForProjectiles">
            <inheritdoc />
        </member>
        <member name="M:VRage.Game.Entity.MyEntity.VRage#ModAPI#IMyEntity#IsVisible">
            <inheritdoc />
        </member>
        <member name="P:VRage.Game.Entity.MyEntity.VRage#ModAPI#IMyEntity#IsVolumetric">
            <inheritdoc />
        </member>
        <member name="M:VRage.Game.Entity.MyEntity.VRage#ModAPI#IMyEntity#GetViewMatrix">
            <inheritdoc />
        </member>
        <member name="M:VRage.Game.Entity.MyEntity.VRage#ModAPI#IMyEntity#GetWorldMatrixNormalizedInv">
            <inheritdoc />
        </member>
        <member name="P:VRage.Game.Entity.MyEntity.VRage#ModAPI#IMyEntity#LocalAABB">
            <inheritdoc />
        </member>
        <member name="P:VRage.Game.Entity.MyEntity.VRage#ModAPI#IMyEntity#LocalAABBHr">
            <inheritdoc />
        </member>
        <member name="P:VRage.Game.Entity.MyEntity.VRage#ModAPI#IMyEntity#LocalMatrix">
            <inheritdoc />
        </member>
        <member name="P:VRage.Game.Entity.MyEntity.VRage#ModAPI#IMyEntity#LocalVolume">
            <inheritdoc />
        </member>
        <member name="P:VRage.Game.Entity.MyEntity.VRage#ModAPI#IMyEntity#LocalVolumeOffset">
            <inheritdoc />
        </member>
        <member name="P:VRage.Game.Entity.MyEntity.VRage#ModAPI#IMyEntity#LocationForHudMarker">
            <inheritdoc />
        </member>
        <member name="P:VRage.Game.Entity.MyEntity.VRage#ModAPI#IMyEntity#Synchronized">
            <inheritdoc />
        </member>
        <member name="M:VRage.Game.Entity.MyEntity.VRage#ModAPI#IMyEntity#SetLocalMatrix(VRageMath.Matrix,System.Object)">
            <inheritdoc />
        </member>
        <member name="M:VRage.Game.Entity.MyEntity.VRage#ModAPI#IMyEntity#SetWorldMatrix(VRageMath.MatrixD,System.Object)">
            <inheritdoc />
        </member>
        <member name="P:VRage.Game.Entity.MyEntity.VRage#ModAPI#IMyEntity#WorldMatrix">
            <inheritdoc />
        </member>
        <member name="P:VRage.Game.Entity.MyEntity.VRage#ModAPI#IMyEntity#WorldMatrixInvScaled">
            <inheritdoc />
        </member>
        <member name="P:VRage.Game.Entity.MyEntity.VRage#ModAPI#IMyEntity#WorldMatrixNormalizedInv">
            <inheritdoc />
        </member>
        <member name="M:VRage.Game.Entity.MyEntity.VRage#ModAPI#IMyEntity#SetPosition(VRageMath.Vector3D)">
            <inheritdoc />
        </member>
        <member name="M:VRage.Game.Entity.MyEntity.VRage#ModAPI#IMyEntity#EnableColorMaskForSubparts(System.Boolean)">
            <inheritdoc />
        </member>
        <member name="M:VRage.Game.Entity.MyEntity.VRage#ModAPI#IMyEntity#SetColorMaskForSubparts(VRageMath.Vector3)">
            <inheritdoc />
        </member>
        <member name="M:VRage.Game.Entity.MyEntity.VRage#ModAPI#IMyEntity#SetTextureChangesForSubparts(System.Collections.Generic.Dictionary{System.String,VRageRender.Messages.MyTextureChange})">
            <inheritdoc />
        </member>
        <member name="M:VRage.Game.Entity.MyEntity.VRage#ModAPI#IMyEntity#SetEmissiveParts(System.String,VRageMath.Color,System.Single)">
            <inheritdoc />
        </member>
        <member name="M:VRage.Game.Entity.MyEntity.VRage#ModAPI#IMyEntity#SetEmissivePartsForSubparts(System.String,VRageMath.Color,System.Single)">
            <inheritdoc />
        </member>
        <member name="P:VRage.Game.Entity.MyEntity.VRage#ModAPI#IMyEntity#ModelCollision">
            <inheritdoc />
        </member>
        <member name="P:VRage.Game.Entity.MyEntity.VRage#Game#ModAPI#Ingame#IMyEntity#HasInventory">
            <inheritdoc />
        </member>
        <member name="P:VRage.Game.Entity.MyEntity.VRage#Game#ModAPI#Ingame#IMyEntity#InventoryCount">
            <inheritdoc />
        </member>
        <member name="M:VRage.Game.Entity.MyEntity.VRage#Game#ModAPI#Ingame#IMyEntity#GetInventory">
            <inheritdoc />
        </member>
        <member name="M:VRage.Game.Entity.MyEntity.VRage#Game#ModAPI#Ingame#IMyEntity#GetInventory(System.Int32)">
            <inheritdoc />
        </member>
        <member name="P:VRage.Game.Entity.MyEntity.VRage#Game#ModAPI#Ingame#IMyEntity#DisplayName">
            <inheritdoc />
        </member>
        <member name="P:VRage.Game.Entity.MyEntity.VRage#Game#ModAPI#Ingame#IMyEntity#Name">
            <inheritdoc />
        </member>
        <member name="P:VRage.Game.Entity.MyEntity.VRage#Game#ModAPI#Ingame#IMyEntity#WorldAABB">
            <inheritdoc />
        </member>
        <member name="P:VRage.Game.Entity.MyEntity.VRage#Game#ModAPI#Ingame#IMyEntity#WorldAABBHr">
            <inheritdoc />
        </member>
        <member name="P:VRage.Game.Entity.MyEntity.VRage#Game#ModAPI#Ingame#IMyEntity#WorldMatrix">
            <inheritdoc />
        </member>
        <member name="P:VRage.Game.Entity.MyEntity.VRage#Game#ModAPI#Ingame#IMyEntity#WorldVolume">
            <inheritdoc />
        </member>
        <member name="P:VRage.Game.Entity.MyEntity.VRage#Game#ModAPI#Ingame#IMyEntity#WorldVolumeHr">
            <inheritdoc />
        </member>
        <member name="M:VRage.Game.Entity.MyEntity.VRage#Game#ModAPI#Ingame#IMyEntity#GetPosition">
            <inheritdoc />
        </member>
        <member name="T:VRage.Game.Entity.MyGameLogic">
            <summary>
            This is mostly a copy of the updating system present in MyEntities.
            
            The old style of GameLogic component was tied to entity updates. This meant that
            when the entity removed one of its update flags, the component would stop updating 
            with no warning.
            
            Here we update GameLogic components separately from the containing entity.
            </summary>
        </member>
        <member name="M:VRage.Game.Entity.MyGameLogic.RegisterForUpdate(VRage.Game.Components.MyGameLogicComponent)">
            <summary>
            Registers a component to the update system.
            Only use for first-time registration! If changing update flags, use ChangeUpdate!
            </summary>
            <param name="component"></param>
        </member>
        <member name="M:VRage.Game.Entity.MyGameLogic.UnregisterForUpdate(VRage.Game.Components.MyGameLogicComponent)">
            <summary>
            Unregisters a component from the update system.
            Only use when disposing a component! If changing update flags, use ChangeUpdate!
            </summary>
            <param name="component"></param>        
        </member>
        <member name="M:VRage.Game.Entity.MyGameLogic.ChangeUpdate(VRage.Game.Components.MyGameLogicComponent,VRage.ModAPI.MyEntityUpdateEnum,System.Boolean)">
            <summary>
            Modifies a component's update flags without modifying lists the component is already in.
            Much more performant than Unregister/Register pattern!
            </summary>
            <param name="component"></param>
            <param name="newUpdate"></param>
            <param name="immediate"></param>
        </member>
        <member name="P:VRage.Game.Entity.UseObject.IMyUseObject.InteractiveDistance">
            <summary>
            Consider object as being in interactive range only if distance from character is smaller or equal to this value
            </summary>
        </member>
        <member name="P:VRage.Game.Entity.UseObject.IMyUseObject.ActivationMatrix">
            <summary>
            Matrix of object, scale represents size of object
            </summary>
        </member>
        <member name="P:VRage.Game.Entity.UseObject.IMyUseObject.WorldMatrix">
            <summary>
            Matrix of object, scale represents size of object
            </summary>
        </member>
        <member name="P:VRage.Game.Entity.UseObject.IMyUseObject.RenderObjectID">
            <summary>
            Render ID of objects 
            </summary>
        </member>
        <member name="P:VRage.Game.Entity.UseObject.IMyUseObject.InstanceID">
            <summary>
            Instance ID of objects (this should mostly be unused
            </summary>
        </member>
        <member name="P:VRage.Game.Entity.UseObject.IMyUseObject.ShowOverlay">
            <summary>
            Show overlay (semitransparent bounding box)
            </summary>
        </member>
        <member name="P:VRage.Game.Entity.UseObject.IMyUseObject.SupportedActions">
            <summary>
            Returns supported actions
            </summary>
        </member>
        <member name="P:VRage.Game.Entity.UseObject.IMyUseObject.PrimaryAction">
            <summary>
            Main action of this use object
            </summary>
        </member>
        <member name="P:VRage.Game.Entity.UseObject.IMyUseObject.SecondaryAction">
            <summary>
            Secondary action of this use object
            </summary>
        </member>
        <member name="P:VRage.Game.Entity.UseObject.IMyUseObject.ContinuousUsage">
            <summary>
            When true, use will be called every frame
            </summary>
        </member>
        <member name="M:VRage.Game.Entity.UseObject.IMyUseObject.Use(VRage.Game.Entity.UseObject.UseActionEnum,VRage.ModAPI.IMyEntity)">
            <summary>
            Uses object by specified action
            Caller calls this method only on supported actions
            </summary>
        </member>
        <member name="M:VRage.Game.Entity.UseObject.IMyUseObject.GetActionInfo(VRage.Game.Entity.UseObject.UseActionEnum)">
            <summary>
            Gets action text
            Caller calls this method only on supported actions
            </summary>
        </member>
        <member name="T:VRage.Game.MyRelationsBetweenPlayerAndBlock">
            <summary>
            Enum describing relations between player and block
            </summary>
        </member>
        <member name="M:VRage.Game.MyMeshHelper.GenerateSphere(VRageMath.MatrixD@,System.Single,System.Int32,System.Collections.Generic.List{VRageMath.Vector3D})">
            <summary>
            GenerateSphere
            </summary>
            <param name="worldMatrix"></param>
            <param name="radius"></param>
            <param name="steps"></param>
            <param name="vertices"></param>
        </member>
        <member name="M:VRage.Game.MySimpleObjectDraw.DrawTransparentBox(VRageMath.MatrixD@,VRageMath.BoundingBoxD@,VRageMath.Color@,VRageMath.Color@,VRage.Game.MySimpleObjectRasterizer,VRageMath.Vector3I,System.Single,System.Nullable{VRage.Utils.MyStringId},System.Nullable{VRage.Utils.MyStringId},System.Boolean,System.Int32,VRageRender.MyBillboard.BlendTypeEnum,System.Single,System.Collections.Generic.List{VRageRender.MyBillboard})">
            <summary>
            DrawTransparentBox
            </summary>
        </member>
        <member name="M:VRage.Game.MySimpleObjectDraw.DrawTransparentBox(VRageMath.MatrixD@,VRageMath.BoundingBoxD@,VRageMath.Color@,VRageMath.Color@,VRageMath.Color@,VRageMath.Color@,VRageMath.Color@,VRageMath.Color@,VRageMath.Color@,VRage.Game.MySimpleObjectRasterizer,VRageMath.Vector3I,System.Single,System.Nullable{VRage.Utils.MyStringId},System.Nullable{VRage.Utils.MyStringId},System.Boolean,System.Int32,VRageRender.MyBillboard.BlendTypeEnum,System.Single,System.Collections.Generic.List{VRageRender.MyBillboard})">
            <summary>
            Definitely not thread safe due to use shared temporary_faces to avoid reinitializations
            </summary>
            <param name="worldMatrix"></param>
            <param name="localbox"></param>
            <param name="faceX_P"></param>
            <param name="faceY_P"></param>
            <param name="faceZ_P"></param>
            <param name="faceX_N"></param>
            <param name="faceY_N"></param>
            <param name="faceZ_N"></param>
            <param name="wire"></param>
            <param name="rasterization"></param>
            <param name="wireDivideRatio"></param>
            <param name="lineWidth"></param>
            <param name="faceMaterial"></param>
            <param name="lineMaterial"></param>
            <param name="onlyFrontFaces"></param>
            <param name="customViewProjection"></param>
            <param name="blendType"></param>
            <param name="intensity"></param>
            <param name="persistentBillboards"></param>
        </member>
        <member name="M:VRage.Game.MySimpleObjectDraw.DrawWireFramedBox(VRageMath.MatrixD@,VRageMath.BoundingBoxD@,VRageMath.Color@,System.Single,VRageMath.Vector3I,System.Nullable{VRage.Utils.MyStringId},System.Boolean,System.Int32,VRageRender.MyBillboard.BlendTypeEnum,System.Single,System.Collections.Generic.List{VRageRender.MyBillboard})">
            <summary>
            DrawWireFramedBox
            </summary>
            <param name="worldMatrix"></param>
            <param name="localbox"></param>
            <param name="color"></param>
            <param name="fThickRatio"></param>
            <param name="wireDivideRatio"></param>
            <param name="lineMaterial"></param>
            <param name="onlyFrontFaces"></param>
            <param name="customViewProjection"></param>
            <param name="blendType"></param>
            <param name="intensity"></param>
            <param name="persistentBillboards"></param>
        </member>
        <member name="M:VRage.Game.MySimpleObjectDraw.DrawTransparentSphere(VRageMath.MatrixD@,System.Single,VRageMath.Color@,VRage.Game.MySimpleObjectRasterizer,System.Int32,System.Nullable{VRage.Utils.MyStringId},System.Nullable{VRage.Utils.MyStringId},System.Single,System.Int32,System.Collections.Generic.List{VRageRender.MyBillboard},VRageRender.MyBillboard.BlendTypeEnum,System.Single)">
            <summary>
            DrawTransparentSphere
            </summary>
            <param name="worldMatrix"></param>
            <param name="radius"></param>
            <param name="color"></param>
            <param name="rasterization"></param>
            <param name="wireDivideRatio"></param>
            <param name="faceMaterial"></param>
            <param name="lineMaterial"></param>
            <param name="lineThickness"></param>
            <param name="customViewProjectionMatrix"></param>
            <param name="persistentBillboards"></param>
            <param name="blendType"></param>
            <param name="intensity"></param>
        </member>
        <member name="F:VRage.Game.MySimpleObjectDraw.MaxLinesPerDraw">
            <summary>
            Maximum number of lines to draw in a single object.
            </summary>
        </member>
        <member name="M:VRage.Game.MySimpleObjectDraw.GenerateLines(VRageMath.Vector3D,VRageMath.Vector3D,VRageMath.Vector3D@,VRageMath.MatrixD@,System.Collections.Generic.List{VRageMath.LineD}@,System.Int32)">
            <summary>
            GenerateLines
            </summary>
            <param name="vctStart"></param>
            <param name="vctEnd"></param>
            <param name="vctSideStep"></param>
            <param name="worldMatrix"></param>
            <param name="lineBuffer"></param>
            <param name="divideRatio"></param>
        </member>
        <member name="M:VRage.Game.MyTransparentGeometry.AddBillboard(VRageRender.MyBillboard,System.Boolean)">
            <summary>
            Adds billboard to render. 
            Remember, that added persistent billboard you can change ONLY with <see cref="M:VRage.Game.MyTransparentGeometry.ApplyActionOnPersistentBillboards(System.Action{VRageRender.MyBillboard})"/> and <see cref="M:VRage.Game.MyTransparentGeometry.ApplyActionOnPersistentBillboards(System.Action)"/> methods
            FOR MODDERS: If you have more than 100 billboards to remove you should use another <see cref="M:VRage.Game.MyTransparentGeometry.AddBillboards(System.Collections.Generic.IEnumerable{VRageRender.MyBillboard},System.Boolean)"/> function
            </summary>
            <param name="billboard">Billboard to render</param>
            <param name="isPersistent">When true - billboard will continue rendering until <see cref="M:VRage.Game.MyTransparentGeometry.RemovePersistentBillboard(VRageRender.MyBillboard,System.Boolean)"/> or <see cref="M:VRage.Game.MyTransparentGeometry.RemovePersistentBillboards(System.Collections.Generic.IEnumerable{VRageRender.MyBillboard},System.Boolean)"/> is called</param>
        </member>
        <member name="M:VRage.Game.MyTransparentGeometry.AddBillboards(System.Collections.Generic.IEnumerable{VRageRender.MyBillboard},System.Boolean)">
            <summary>
            Adds billboards to render.
            Remember, that added persistent billboards you can change ONLY with <see cref="M:VRage.Game.MyTransparentGeometry.ApplyActionOnPersistentBillboards(System.Action{VRageRender.MyBillboard})"/> and <see cref="M:VRage.Game.MyTransparentGeometry.ApplyActionOnPersistentBillboards(System.Action)"/> methods
            </summary>
            <param name="billboards">Billboards to render</param>
            <param name="isPersistent">When true - billboard will continue rendering until <see cref="M:VRage.Game.MyTransparentGeometry.RemovePersistentBillboard(VRageRender.MyBillboard,System.Boolean)"/> or <see cref="M:VRage.Game.MyTransparentGeometry.RemovePersistentBillboards(System.Collections.Generic.IEnumerable{VRageRender.MyBillboard},System.Boolean)"/> is called</param>
        </member>
        <member name="M:VRage.Game.MyTransparentGeometry.RemovePersistentBillboard(VRageRender.MyBillboard,System.Boolean)">
            <summary>
            Removes one persistent billboard from draw
            FOR MODDERS: If you have more than 100 billboards to remove you should use another <see cref="M:VRage.Game.MyTransparentGeometry.RemovePersistentBillboards(System.Collections.Generic.IEnumerable{VRageRender.MyBillboard},System.Boolean)"/> function
            </summary>
            <param name="billboard">Billboard to remove</param>
            <param name="immediate">When true, instantly removes (causes crash if you call it from render draw thread), when false adds to remove list first</param>
        </member>
        <member name="M:VRage.Game.MyTransparentGeometry.RemovePersistentBillboards(System.Collections.Generic.IEnumerable{VRageRender.MyBillboard},System.Boolean)">
            <summary>
            Removes multiple persistent billboard from draw 
            </summary>
            <param name="billboards">Billboards to remove</param>
            <param name="immediate">When true, instantly removes (causes crash if you call it from render draw thread), when false adds to remove list first</param>
        </member>
        <member name="M:VRage.Game.MyTransparentGeometry.ApplyActionOnPersistentBillboards(System.Action{VRageRender.MyBillboard})">
            <summary>
            Used to update billboards. It iterates over each MyBillBoard. Use <see cref="M:VRage.Game.MyTransparentGeometry.ApplyActionOnPersistentBillboards(System.Action)"/> if you need iterate over specific billboards.
            </summary>
            <param name="action">action, which should be executed</param>
        </member>
        <member name="M:VRage.Game.MyTransparentGeometry.ApplyActionOnPersistentBillboards(System.Action)">
            <summary>
            Used to update billboards. You can change any values of MyBillboard inside of this action call. Used to iterate over your own set of Billboards, instead of all, that currently drawing.
            </summary>
            <param name="action">Action, which should be executed</param>
        </member>
        <member name="M:VRage.Game.MyParticleEffect.Stop(System.Boolean)">
            <summary>
            This method stops and deletes effect completely
            </summary>
        </member>
        <member name="M:VRage.Game.MyParticleEffect.Play">
            <summary>
            This method restores effect
            </summary>
        </member>
        <member name="M:VRage.Game.MyParticleEffect.Pause">
            <summary>
            This methods freezes effect and particles
            </summary>
        </member>
        <member name="M:VRage.Game.MyParticleEffect.StopEmitting(System.Single)">
            <summary>
            This method stops generating any new particles
            </summary>
        </member>
        <member name="M:VRage.Game.MyParticleEffect.StopLights">
            <summary>
            This method stops all lights
            </summary>
        </member>
        <member name="M:VRage.Game.GUI.MyAlphaBlinkBehavior.UpdateBlink">
            <summary>
            Call update to get new current alpha value.
            </summary>
        </member>
        <member name="F:VRage.Game.GUI.TextPanel.MySerializableSprite.Type">
            <summary>
            Type of the render layer
            </summary>
        </member>
        <member name="F:VRage.Game.GUI.TextPanel.MySerializableSprite.Position">
            <summary>
            Render position for this layer. If not set, it will be placed in the center
            </summary>
        </member>
        <member name="F:VRage.Game.GUI.TextPanel.MySerializableSprite.Size">
            <summary>
            Render size for this layer. If not set, it will be sized to take up the whole texture
            </summary>
        </member>
        <member name="F:VRage.Game.GUI.TextPanel.MySerializableSprite.Color">
            <summary>
            Color mask to be used when rendering this layer. If not set, white will be used
            </summary>
        </member>
        <member name="F:VRage.Game.GUI.TextPanel.MySerializableSprite.Data">
            <summary>
            Data to be rendered, depending on what the layer type is. This can be text or a texture path
            </summary>
        </member>
        <member name="F:VRage.Game.GUI.TextPanel.MySerializableSprite.FontId">
            <summary>
            In case we are rendering text, what font to use.
            </summary>
        </member>
        <member name="F:VRage.Game.GUI.TextPanel.MySerializableSprite.Alignment">
            <summary>
            Alignment for the text and sprites.
            </summary>
        </member>
        <member name="F:VRage.Game.GUI.TextPanel.MySerializableSprite.RotationOrScale">
            <summary>
            Rotation of sprite in radians. Used as scale for text.
            </summary>
        </member>
        <member name="F:VRage.Game.GUI.TextPanel.MySprite.Type">
            <summary>
            Type of the render layer
            </summary>
        </member>
        <member name="F:VRage.Game.GUI.TextPanel.MySprite.Position">
            <summary>
            Render position for this layer. If not set, it will be placed in the center
            </summary>
        </member>
        <member name="F:VRage.Game.GUI.TextPanel.MySprite.Size">
            <summary>
            Render size for this layer. If not set, it will be sized to take up the whole texture
            </summary>
        </member>
        <member name="F:VRage.Game.GUI.TextPanel.MySprite.Color">
            <summary>
            Color mask to be used when rendering this layer. If not set, white will be used
            </summary>
        </member>
        <member name="F:VRage.Game.GUI.TextPanel.MySprite.Data">
            <summary>
            Data to be rendered, depending on what the layer type is. This can be text or a texture path
            </summary>
        </member>
        <member name="F:VRage.Game.GUI.TextPanel.MySprite.FontId">
            <summary>
            In case we are rendering text, what font to use.
            </summary>
        </member>
        <member name="F:VRage.Game.GUI.TextPanel.MySprite.Alignment">
            <summary>
            Alignment for the text and sprites.
            </summary>
        </member>
        <member name="F:VRage.Game.GUI.TextPanel.MySprite.RotationOrScale">
            <summary>
            Rotation of sprite in radians. Used as scale for text.
            </summary>
        </member>
        <member name="P:VRage.Game.Gui.MyHudEntityParams.ShouldDraw">
            <summary>
            Function that checks whether indicator should be drawn.
            Useful when reacting to some player settings.
            </summary>
        </member>
        <member name="F:VRage.Game.Localization.MyLocalization.LOCALIZATION_FOLDER">
            <summary>
            Folder within content folder that should contain localization files
            </summary>
        </member>
        <member name="P:VRage.Game.Localization.MyLocalization.PathToContextTranslator">
            <summary>
            When bundle is loaded, all files here are memorized and contexts that they influenced. One context may be influenced by several files. Influenced context may not be present due to disposing. 
            </summary>
        </member>
        <member name="P:VRage.Game.Localization.MyLocalization.Item(VRage.Utils.MyStringId,VRage.Utils.MyStringId)">
            <summary>
            Simplified accessor.
            </summary>
            <param name="contextName">Name id of context.</param>
            <param name="tag">Tag to translate.</param>
            <returns>Localized String builder.</returns>
        </member>
        <member name="P:VRage.Game.Localization.MyLocalization.Item(System.String,System.String)">
            <summary>
            Simplified accessor. Preferably use the string id version.
            </summary>
            <param name="contexName">Name of the context.</param>
            <param name="tag">Name of the tag.</param>
            <returns></returns>
        </member>
        <member name="P:VRage.Game.Localization.MyLocalization.Item(VRage.Utils.MyStringId)">
            <summary>
            Simplified accessor.
            </summary>
            <param name="contextName">Name id of context.</param>
            <returns>Context of given name.</returns>
        </member>
        <member name="P:VRage.Game.Localization.MyLocalization.Item(System.String)">
            <summary>
            Simplified accessor. Preferably use the string id version.
            </summary>
            <param name="contextName">Name id of context.</param>
            <returns>Context of given name.</returns>
        </member>
        <member name="M:VRage.Game.Localization.MyLocalization.Initialize">
            <summary>
            Initializes singleton.
            </summary>
        </member>
        <member name="M:VRage.Game.Localization.MyLocalization.Switch(System.String)">
            <summary>
            Switches all contexts to provided language.
            </summary>
            <param name="language">Language name.</param>
        </member>
        <member name="M:VRage.Game.Localization.MyLocalization.DisposeContext(VRage.Utils.MyStringId)">
            <summary>
            Tries to dispose disposable context.
            </summary>
            <param name="nameId">Name id of context.</param>
        </member>
        <member name="M:VRage.Game.Localization.MyLocalization.DisposeAll">
            <summary>
            Tries to dispose all disposable contexts.
            </summary>
        </member>
        <member name="M:VRage.Game.Localization.MyLocalization.LoadBundle(VRage.Game.Localization.MyLocalization.MyBundle,System.Collections.Generic.HashSet{VRage.Game.Localization.MyLocalizationContext},System.Boolean)">
            <summary>
            Loads bundle of files under bundle id.
            </summary>
            <param name="bundle">Data bundle.</param>
            <param name="influencedContexts">Contexts that got some new data in the process.</param>
            <param name="disposableContexts">Created contexts will be disposable or persistent.</param>
        </member>
        <member name="M:VRage.Game.Localization.MyLocalization.UnloadBundle(VRage.Utils.MyStringId)">
            <summary>
            Unloads bundle of files from the system by given id.
            </summary>
            <param name="bundleId"></param>
        </member>
        <member name="M:VRage.Game.Localization.MyLocalization.Get(VRage.Utils.MyStringId,VRage.Utils.MyStringId)">
            <summary>
            Returns localization for given context and id.
            </summary>
            <param name="contextId">Context name id.</param>
            <param name="id">Message identifier.</param>
            <returns>String builder with localization.</returns>
        </member>
        <member name="T:VRage.Game.Localization.MyLocalizationContext">
            <summary>
            Class designed around an idea of localization contexts.
            Context can be game, gui screen, mission, campaign or a task.
            Consists of a multitude of files stored in content folder.
            Each context can be modded, same way as created.
            </summary>
        </member>
        <member name="P:VRage.Game.Localization.MyLocalizationContext.Languages">
            <summary>
            Defined languages.
            </summary>
        </member>
        <member name="P:VRage.Game.Localization.MyLocalizationContext.Ids">
            <summary>
            All accessible ids from context.
            </summary>
        </member>
        <member name="P:VRage.Game.Localization.MyLocalizationContext.Name">
            <summary>
            Name of this context.
            </summary>
        </member>
        <member name="P:VRage.Game.Localization.MyLocalizationContext.CurrentLanguage">
            <summary>
            Currently selected language.
            </summary>
        </member>
        <member name="P:VRage.Game.Localization.MyLocalizationContext.TwinContext">
            <summary>
            Context of same name. Basically connection between
            non disposable and disposable contexts.
            </summary>
        </member>
        <member name="M:VRage.Game.Localization.MyLocalizationContext.Dispose">
            <summary>
            Clears all data before shutting down context.
            </summary>
        </member>
        <member name="P:VRage.Game.Localization.MyLocalizationContext.Item(VRage.Utils.MyStringId)">
            <summary>
            Simplified accessor.
            </summary>
            <param name="id">Tag to localize.</param>
            <returns>Localized String Builder.</returns>
        </member>
        <member name="P:VRage.Game.Localization.MyLocalizationContext.Item(System.String)">
            <summary>
            Simplified accessor. Preferably use the string id version.
            </summary>
            <param name="nameId">Name identifier. (will be converted to MyStringId)</param>
            <returns>Localized String Builder.</returns>
        </member>
        <member name="M:VRage.Game.Localization.MyLocalizationContext.Switch(System.String)">
            <summary>
            Tries to switch context to provided language.
            </summary>
            <param name="language"></param>
        </member>
        <member name="M:VRage.Game.Localization.MyLocalizationContext.Localize(VRage.Utils.MyStringId)">
            <summary>
            Retrieves the localized content from entry with provided id.
            </summary>
            <param name="id">Unique identifier.</param>
            <returns>Localized builder.</returns>
        </member>
        <member name="P:VRage.Game.Models.MyModel.AssetName">
            <summary>
            File path of the model
            </summary>
        </member>
        <member name="M:VRage.Game.Models.MyModel.#ctor(System.String,System.Boolean)">
            <summary>
            c-tor - this constructor should be used just for max models - not voxels!
            </summary>
        </member>
        <member name="M:VRage.Game.Models.MyModel.Dispose">
            <summary>
            Dispose
            </summary>
        </member>
        <member name="T:VRage.Game.Models.MyTriangleVertexIndices">
            <summary>
            structure used to set up the mesh
            </summary>
        </member>
        <member name="M:VRage.Game.MyRankedServers.DownloadWork.#ctor(System.String,System.Action{VRage.Game.MyRankedServers})">
            <inheritdoc />
        </member>
        <member name="T:VRage.Game.MyVRageConstants">
            <summary>
            All common constants for use in game engine.
            Note: The name is probably temporary - avoiding colision with Sandbox.Engine.Utils during sandbox removement.
                  I guess it can be renamed to MyConstants once we are finished with sandbox deletion.
            </summary>
        </member>
        <member name="T:VRage.Game.ObjectBuilders.MyObjectBuilder_AnimationSMConditionsConjunction">
            <summary>
            Conjunction of several simple conditions. This conjunction is true if all contained conditions are true.
            </summary>
        </member>
        <member name="M:VRage.Game.ObjectBuilders.MyObjectBuilder_AnimationSMConditionsConjunction.DeepCopy">
            <summary>
            Create deep copy of this conjuction of conditions.
            </summary>
            <returns></returns>
        </member>
        <member name="T:VRage.Game.ObjectBuilders.MyObjectBuilder_AnimationTreeNode">
            <summary>
            Base class of all object builders of animation tree nodes.
            </summary>
        </member>
        <member name="F:VRage.Game.ObjectBuilders.MyObjectBuilder_AnimationTreeNode.EdPos">
            <summary>
            Position in editor.
            </summary>
        </member>
        <member name="M:VRage.Game.ObjectBuilders.MyObjectBuilder_AnimationTreeNode.DeepCopyWithMask(System.Collections.Generic.HashSet{VRage.Game.ObjectBuilders.MyObjectBuilder_AnimationTreeNode},VRage.Game.ObjectBuilders.MyObjectBuilder_AnimationTreeNode,System.Collections.Generic.List{VRage.Game.ObjectBuilders.MyObjectBuilder_AnimationTreeNode})">
            <summary>
            Create deep copy of this node and its children.
            </summary>
            <param name="selectedNodes">the mask</param>
            <param name="parentNode">link to the parent node</param>        
            <param name="orphans">link to list of orphaned nodes</param>
            <returns>copied hierarchy</returns>
        </member>
        <member name="M:VRage.Game.ObjectBuilders.MyObjectBuilder_AnimationTreeNode.GetChildren">
            <summary>
            Get the child nodes of this node.
            </summary>
        </member>
        <member name="T:VRage.Game.ObjectBuilders.MyObjectBuilder_AnimationTree">
            <summary>
            Root node of the whole animation tree. Supports storing of orphaned nodes.
            </summary>
        </member>
        <member name="M:VRage.Game.ObjectBuilders.MyObjectBuilder_AnimationTree.DeepCopyWithMask(System.Collections.Generic.HashSet{VRage.Game.ObjectBuilders.MyObjectBuilder_AnimationTreeNode})">
            <summary>
            Create deep copy of this node and its children.
            </summary>
            <param name="selectedNodes">the mask</param>
            <returns>copied hierarchy</returns>
        </member>
        <member name="T:VRage.Game.ObjectBuilders.MyObjectBuilder_AnimationTreeNodeDynamicTrack">
            <summary>
            Track node, playing track given from action
            </summary>
        </member>
        <member name="T:VRage.Game.ObjectBuilders.MyObjectBuilder_AnimationTreeNodeTrack">
            <summary>
            Track node, storing information about track and playing settings.
            </summary>
        </member>
        <member name="F:VRage.Game.ObjectBuilders.MyObjectBuilder_AnimationTreeNodeTrack.PathToModel">
            <summary>
            Path to MWM file.
            </summary>
        </member>
        <member name="F:VRage.Game.ObjectBuilders.MyObjectBuilder_AnimationTreeNodeTrack.AnimationName">
            <summary>
            Name of used track (animation) in MWM file.
            </summary>
        </member>
        <member name="F:VRage.Game.ObjectBuilders.MyObjectBuilder_AnimationTreeNodeTrack.Loop">
            <summary>
            If true, animation will be looped. Default value is true.
            </summary>
        </member>
        <member name="F:VRage.Game.ObjectBuilders.MyObjectBuilder_AnimationTreeNodeTrack.Speed">
            <summary>
            Playing speed multiplier.
            </summary>
        </member>
        <member name="F:VRage.Game.ObjectBuilders.MyObjectBuilder_AnimationTreeNodeTrack.Interpolate">
            <summary>
            Interpolate between keyframes. If false, track will be played frame by frame.
            </summary>
        </member>
        <member name="F:VRage.Game.ObjectBuilders.MyObjectBuilder_AnimationTreeNodeTrack.SynchronizeWithLayer">
            <summary>
            Synchronize time in this track with the specified layer.
            </summary>
        </member>
        <member name="T:VRage.Game.ObjectBuilders.MyParameterAnimTreeNodeMapping">
            <summary>
            Helper struct: parameter mapping.
            </summary>
        </member>
        <member name="T:VRage.Game.ObjectBuilders.MyObjectBuilder_AnimationTreeNodeMix1D">
            <summary>
            Linear mixing node. Maps child nodes on 1D axis, interpolates according to parameter value.
            </summary>
        </member>
        <member name="F:VRage.Game.ObjectBuilders.MyObjectBuilder_AnimationTreeNodeMix1D.ParameterName">
            <summary>
            Name of parameter controlling blending inside this node.
            </summary>
        </member>
        <member name="F:VRage.Game.ObjectBuilders.MyObjectBuilder_AnimationTreeNodeMix1D.Circular">
            <summary>
            True if the value wraps around.
            </summary>
        </member>
        <member name="F:VRage.Game.ObjectBuilders.MyObjectBuilder_AnimationTreeNodeMix1D.Sensitivity">
            <summary>
            Sensitivity to changes of parameter value. 1=immediate change, 0=no sensitivity.
            </summary>
        </member>
        <member name="F:VRage.Game.ObjectBuilders.MyObjectBuilder_AnimationTreeNodeMix1D.MaxChange">
            <summary>
            Threshold: maximum change of variable to take sensitivity in account, if crossed, value is set immediatelly.
            </summary>
        </member>
        <member name="F:VRage.Game.ObjectBuilders.MyObjectBuilder_AnimationTreeNodeMix1D.Children">
            <summary>
            Mapping children to axis. Each child has assigned its value.
            </summary>
        </member>
        <member name="T:VRage.Game.ObjectBuilders.MyObjectBuilder_AnimationTreeNodeAdd">
            <summary>
            Additive node. Child nodes are base node + additive node.
            </summary>
        </member>
        <member name="F:VRage.Game.ObjectBuilders.MyObjectBuilder_AnimationTreeNodeAdd.ParameterName">
            <summary>
            Name of parameter controlling blending inside this node.
            </summary>
        </member>
        <member name="F:VRage.Game.ObjectBuilders.MyObjectBuilder_AnimationTreeNodeAdd.BaseNode">
            <summary>
            Child node, base "layer".
            </summary>
        </member>
        <member name="F:VRage.Game.ObjectBuilders.MyObjectBuilder_AnimationTreeNodeAdd.AddNode">
            <summary>
            Child node, additive "layer".
            </summary>
        </member>
        <member name="T:VRage.Game.ObjectBuilders.MyObjectBuilder_AnimationTreeNodeIkTarget">
            <summary>
            Track node, storing information about track and playing settings.
            </summary>
        </member>
        <member name="F:VRage.Game.ObjectBuilders.MyObjectBuilder_AnimationTreeNodeIkTarget.BoneChain">
            <summary>
            Name of the bones which form the chain.
            </summary>
        </member>
        <member name="F:VRage.Game.ObjectBuilders.MyObjectBuilder_AnimationTreeNodeIkTarget.TargetBoneName">
            <summary>
            Name of the bone which serves as a target for the end effector.
            </summary>
            If both TargetPoint and TargetBoneName are specified, their transforms are combined 
            (target point is then the offset from the target bone).
        </member>
        <member name="F:VRage.Game.ObjectBuilders.MyObjectBuilder_AnimationTreeNodeIkTarget.TargetPoint">
            <summary>
            Target point name. 
            </summary>
            If both TargetPoint and TargetBoneName are specified, their transforms are combined 
            (target point is then the offset from the target bone).
        </member>
        <member name="T:VRage.Game.ObjectBuilders.MyObjectBuilder_AnimationTreeNodeSetter">
            <summary>
            Setter node, storing information about timed variable setting.
            </summary>
        </member>
        <member name="F:VRage.Game.ObjectBuilders.MyObjectBuilder_AnimationTreeNodeSetter.ValueAssignment.Name">
            <summary>
            Name of the variable.
            </summary>
        </member>
        <member name="F:VRage.Game.ObjectBuilders.MyObjectBuilder_AnimationTreeNodeSetter.ValueAssignment.Value">
            <summary>
            Value to be set.
            </summary>
        </member>
        <member name="F:VRage.Game.ObjectBuilders.MyObjectBuilder_AnimationTreeNodeSetter.Child">
            <summary>
            Link to the child node.
            </summary>
        </member>
        <member name="F:VRage.Game.ObjectBuilders.MyObjectBuilder_AnimationTreeNodeSetter.Time">
            <summary>
            Local animation time when the value should be set.
            </summary>
        </member>
        <member name="F:VRage.Game.ObjectBuilders.MyObjectBuilder_AnimationTreeNodeSetter.Value">
            <summary>
            Value that is set to animation storage once time spent in the node exceeds specified time (MyAnimationTreeNodeSetter.Time).
            </summary>
        </member>
        <member name="F:VRage.Game.ObjectBuilders.MyObjectBuilder_AnimationTreeNodeSetter.ResetValueEnabled">
            <summary>
            When the, the automatic resetting is enabled.
            </summary>
        </member>
        <member name="F:VRage.Game.ObjectBuilders.MyObjectBuilder_AnimationTreeNodeSetter.ResetValue">
            <summary>
            Value that is set to animation storage once we leave current animation state.
            </summary>
        </member>
        <member name="F:VRage.Game.ObjectBuilders.Campaign.MyObjectBuilder_Campaign.IsOfflineEnabled">
            <summary>
            If offline mode is enabled for the scenario
            </summary>
        </member>
        <member name="F:VRage.Game.ObjectBuilders.Components.BankingAndCurrency.MyObjectBuilder_Account.OwnerIdentifier">
            <summary>
            Identifier of the owner. Could be anything (player identityId, factionId)
            </summary>
        </member>
        <member name="F:VRage.Game.ObjectBuilders.Components.BankingAndCurrency.MyObjectBuilder_Account.Balance">
            <summary>
            Current balance of the account.
            </summary>
        </member>
        <member name="F:VRage.Game.ObjectBuilders.Components.BankingAndCurrency.MyObjectBuilder_Account.Log">
            <summary>
            Log of changes on the account.
            </summary>
        </member>
        <member name="F:VRage.Game.ObjectBuilders.Definitions.MyObjectBuilder_DlcDefinition.Badge">
            <summary>
            Icon of the DLC, to be displayed in G-screen, blueprints, etc ...
            </summary>
        </member>
        <member name="F:VRage.Game.ObjectBuilders.Definitions.MyObjectBuilder_FactionDefinition.IsDefault">
            <summary>
            This value indicates if fraction should be created by default for every new world and its owner
            will be visible in Ownership dropdown.
            </summary>
        </member>
        <member name="F:VRage.Game.ObjectBuilders.Definitions.MyObjectBuilder_FactionDefinition.DefaultRelation">
            <summary>
            Default faction relation to the other factions. 
            Enemies state is with highest prority and does not care if other faction want to be friend.
            </summary>
        </member>
        <member name="F:VRage.Game.ObjectBuilders.Definitions.MyObjectBuilder_FactionDefinition.StartingBalance">
            <summary>
            Starting balance of the faction.
            </summary>
        </member>
        <member name="F:VRage.Game.ObjectBuilders.Definitions.MyObjectBuilder_FactionDefinition.FactionIcon">
            <summary>
            Path to banner icon.
            </summary>
        </member>
        <member name="T:VRage.Game.ObjectBuilders.Definitions.MyUpgradeModifierType">
            <summary>
            Upgrade modifier type
            </summary>
        </member>
        <member name="F:VRage.Game.ObjectBuilders.Definitions.MyUpgradeModifierType.Multiplicative">
            <summary>
            Multiplies base value of block - to increase value by 50% set <see cref="P:VRage.Game.ObjectBuilders.Definitions.MyUpgradeModuleInfo.Modifier"/> to 1.5
            </summary>
        </member>
        <member name="F:VRage.Game.ObjectBuilders.Definitions.MyUpgradeModifierType.Additive">
            <summary>
            Adds to base value of block - to increase value by 50% set <see cref="P:VRage.Game.ObjectBuilders.Definitions.MyUpgradeModuleInfo.Modifier"/> to 0.5
            </summary>
        </member>
        <member name="T:VRage.Game.ObjectBuilders.Definitions.MyUpgradeModuleInfo">
            <summary>
            Module upgrade information
            </summary>
        </member>
        <member name="P:VRage.Game.ObjectBuilders.Definitions.MyUpgradeModuleInfo.UpgradeType">
            <summary>
            Name of upgrade
            </summary>
        </member>
        <member name="P:VRage.Game.ObjectBuilders.Definitions.MyUpgradeModuleInfo.Modifier">
            <summary>
            Modifier for upgrade (as decimal - 1 = 100%)
            </summary>
        </member>
        <member name="P:VRage.Game.ObjectBuilders.Definitions.MyUpgradeModuleInfo.ModifierType">
            <summary>
            Type of modifier as <see cref="T:VRage.Game.ObjectBuilders.Definitions.MyUpgradeModifierType"/>
            </summary>
        </member>
        <member name="T:VRage.Game.ObjectBuilders.Definitions.MyObjectBuilder_UpgradeModuleDefinition">
            <summary>
            Upgrade module base definition
            </summary>
        </member>
        <member name="F:VRage.Game.ObjectBuilders.Definitions.MyObjectBuilder_UpgradeModuleDefinition.Upgrades">
            <summary>
            List of upgrades provided by block <see cref="T:VRage.Game.ObjectBuilders.Definitions.MyUpgradeModuleInfo"/>
            </summary>
        </member>
        <member name="F:VRage.Game.ObjectBuilders.Definitions.SessionComponents.MyObjectBuilder_BankingSystemDefinition.CurrencyFullName">
            <summary>
            Currency full name.
            </summary>
        </member>
        <member name="F:VRage.Game.ObjectBuilders.Definitions.SessionComponents.MyObjectBuilder_BankingSystemDefinition.CurrencyShortName">
            <summary>
            Currency short name.
            </summary>
        </member>
        <member name="F:VRage.Game.ObjectBuilders.Definitions.SessionComponents.MyObjectBuilder_BankingSystemDefinition.StartingBalance">
            <summary>
            Starting balance when account is created.
            </summary>
        </member>
        <member name="F:VRage.Game.ObjectBuilders.Definitions.SessionComponents.MyObjectBuilder_BankingSystemDefinition.AccountLogLen">
            <summary>
            Max account log entriee.
            </summary>
        </member>
        <member name="F:VRage.Game.ObjectBuilders.Definitions.SessionComponents.MyObjectBuilder_BankingSystemDefinition.PhysicalItemId">
            <summary>
            Definition id of physical item representation of the currency
            </summary>
        </member>
        <member name="F:VRage.Game.ObjectBuilders.Definitions.SessionComponents.MyObjectBuilder_ClipboardDefinition.PastingSettings">
            <summary>
            Defines pasting settings.
            </summary>
        </member>
        <member name="F:VRage.Game.ObjectBuilders.Definitions.SessionComponents.MyObjectBuilder_ContainerDropSystemDefinition.PersonalContainerRatio">
            <summary>
            Chance that the next cache will be personal
            </summary>
        </member>
        <member name="F:VRage.Game.ObjectBuilders.Definitions.SessionComponents.MyObjectBuilder_ContainerDropSystemDefinition.ContainerDropTime">
            <summary>
            Cooldown after cache is retrieved in minutes
            </summary>
        </member>
        <member name="F:VRage.Game.ObjectBuilders.Definitions.SessionComponents.MyObjectBuilder_ContainerDropSystemDefinition.PersonalContainerDistMin">
            <summary>
            Personal cache minimum distance in kilometers
            </summary>
        </member>
        <member name="F:VRage.Game.ObjectBuilders.Definitions.SessionComponents.MyObjectBuilder_ContainerDropSystemDefinition.PersonalContainerDistMax">
            <summary>
            Personal cache maximum distance in kilometers
            </summary>
        </member>
        <member name="F:VRage.Game.ObjectBuilders.Definitions.SessionComponents.MyObjectBuilder_ContainerDropSystemDefinition.CompetetiveContainerDistMin">
            <summary>
            Competetive cache minimum distance in kilometers
            </summary>
        </member>
        <member name="F:VRage.Game.ObjectBuilders.Definitions.SessionComponents.MyObjectBuilder_ContainerDropSystemDefinition.CompetetiveContainerDistMax">
            <summary>
            Competetive cache maximum distance in kilometers
            </summary>
        </member>
        <member name="F:VRage.Game.ObjectBuilders.Definitions.SessionComponents.MyObjectBuilder_ContainerDropSystemDefinition.CompetetiveContainerGPSTimeOut">
            <summary>
            Time in minutes how long will GPS stay after discovery for other players in competetive caches
            </summary>
        </member>
        <member name="F:VRage.Game.ObjectBuilders.Definitions.SessionComponents.MyObjectBuilder_ContainerDropSystemDefinition.CompetetiveContainerGridTimeOut">
            <summary>
            Time in minutes how long will competetive cache exist in the world
            </summary>
        </member>
        <member name="F:VRage.Game.ObjectBuilders.Definitions.SessionComponents.MyObjectBuilder_ContainerDropSystemDefinition.PersonalContainerGridTimeOut">
            <summary>
            Time in minutes how long will Personal cache exist in the world
            </summary>
        </member>
        <member name="F:VRage.Game.ObjectBuilders.Definitions.SessionComponents.MyObjectBuilder_ContainerDropSystemDefinition.CompetetiveContainerGPSColorFree">
            <summary>
            GPS color for competive containers before they are claimed
            </summary>
        </member>
        <member name="F:VRage.Game.ObjectBuilders.Definitions.SessionComponents.MyObjectBuilder_ContainerDropSystemDefinition.CompetetiveContainerGPSColorClaimed">
            <summary>
            GPS color for competive containers after they are claimed
            </summary>
        </member>
        <member name="F:VRage.Game.ObjectBuilders.Definitions.SessionComponents.MyObjectBuilder_ContainerDropSystemDefinition.PersonalContainerGPSColor">
            <summary>
            GPS color for personal containers
            </summary>
        </member>
        <member name="F:VRage.Game.ObjectBuilders.Definitions.SessionComponents.MyObjectBuilder_ContainerDropSystemDefinition.ContainerAudioCue">
            <summary>
            Audio cue that will be looped until claimed
            </summary>
        </member>
        <member name="F:VRage.Game.ObjectBuilders.Definitions.SessionComponents.MyObjectBuilder_CoordinateSystemDefinition.AngleTolerance">
            <summary>
            Angle tolerance (in radians) used for deciding if block is aligned to coord system.
            </summary>
        </member>
        <member name="F:VRage.Game.ObjectBuilders.Definitions.SessionComponents.MyObjectBuilder_CoordinateSystemDefinition.PositionTolerance">
            <summary>
            Position tolerance (in meters) used for deciding if block is aligned to coord system.
            </summary>
        </member>
        <member name="F:VRage.Game.ObjectBuilders.Definitions.SessionComponents.MyObjectBuilder_CoordinateSystemDefinition.CoordSystemSize">
            <summary>
            Local coordinate system size (in meters).
            </summary>
        </member>
        <member name="F:VRage.Game.ObjectBuilders.Definitions.SessionComponents.MyPlacementSettings.StaticGridAlignToCenter">
            <summary>
            Align static grids to corners (false) or centers (true).
            You should always set to corners in new games. Center alignment is only for backwards compatibility so that
            static grids are correctly aligned with already existing saves.
            </summary>
        </member>
        <member name="F:VRage.Game.ObjectBuilders.Definitions.SessionComponents.MyGridPlacementSettings.CanAnchorToStaticGrid">
            <summary>
            When min. allowed penetration is not met, block may still be placed if it is touching static grid and this property is true.
            </summary>
        </member>
        <member name="T:VRage.Game.ObjectBuilders.Definitions.SessionComponents.VoxelPlacementSettings">
            <summary>
            Voxel penetration definition
            </summary>
        </member>
        <member name="F:VRage.Game.ObjectBuilders.Definitions.SessionComponents.VoxelPlacementSettings.MaxAllowed">
            <summary>
            Maximum amount in % of block being inside voxel (where 1 - 100% to 0 - 0%)
            </summary>
        </member>
        <member name="F:VRage.Game.ObjectBuilders.Definitions.SessionComponents.VoxelPlacementSettings.MinAllowed">
            <summary>
            Minimum amount in % of block being inside voxel (where 1 - 100% to 0 - 0%)
            </summary>
        </member>
        <member name="F:VRage.Game.ObjectBuilders.Definitions.SessionComponents.MyObjectBuilder_CubeBuilderDefinition.DefaultBlockBuildingDistance">
            <summary>
            Default block building distance for creative mode.
            </summary>
        </member>
        <member name="F:VRage.Game.ObjectBuilders.Definitions.SessionComponents.MyObjectBuilder_CubeBuilderDefinition.MaxBlockBuildingDistance">
            <summary>
            Max building distance for creative mode.
            </summary>
        </member>
        <member name="F:VRage.Game.ObjectBuilders.Definitions.SessionComponents.MyObjectBuilder_CubeBuilderDefinition.MinBlockBuildingDistance">
            <summary>
            Min building distnace for creative mode.
            </summary>
        </member>
        <member name="F:VRage.Game.ObjectBuilders.Definitions.SessionComponents.MyObjectBuilder_CubeBuilderDefinition.BuildingDistSmallSurvivalCharacter">
            <summary>
            Building distance for small grid in survival mode when controlling character.
            </summary>
        </member>
        <member name="F:VRage.Game.ObjectBuilders.Definitions.SessionComponents.MyObjectBuilder_CubeBuilderDefinition.BuildingDistLargeSurvivalCharacter">
            <summary>
            Building distance for large grid in survival mode when controlling character.
            </summary>
        </member>
        <member name="F:VRage.Game.ObjectBuilders.Definitions.SessionComponents.MyObjectBuilder_CubeBuilderDefinition.BuildingDistSmallSurvivalShip">
            <summary>
            Building distance for small grid in survival mode when controlling ship.
            </summary>
        </member>
        <member name="F:VRage.Game.ObjectBuilders.Definitions.SessionComponents.MyObjectBuilder_CubeBuilderDefinition.BuildingDistLargeSurvivalShip">
            <summary>
            Building distance for large grid in survival mode when controlling ship.
            </summary>
        </member>
        <member name="F:VRage.Game.ObjectBuilders.Definitions.SessionComponents.MyObjectBuilder_CubeBuilderDefinition.BuildingSettings">
            <summary>
            Defines placement settings for building mode.
            </summary>
        </member>
        <member name="F:VRage.Game.ObjectBuilders.Gui.MyHighlightData.EntityId">
            <summary>
            Id of entity that should be highlighted.
            </summary>
        </member>
        <member name="F:VRage.Game.ObjectBuilders.Gui.MyHighlightData.OutlineColor">
            <summary>
            Color of highlight overlay.
            </summary>
        </member>
        <member name="F:VRage.Game.ObjectBuilders.Gui.MyHighlightData.Thickness">
            <summary>
            Overlay thickness.
            </summary>
        </member>
        <member name="F:VRage.Game.ObjectBuilders.Gui.MyHighlightData.PulseTimeInFrames">
            <summary>
            Number of frames between pulses.
            </summary>
        </member>
        <member name="F:VRage.Game.ObjectBuilders.Gui.MyHighlightData.PlayerId">
            <summary>
            Id of player that should do the highlight.
            (For non local players its send to client)
            </summary>
        </member>
        <member name="F:VRage.Game.ObjectBuilders.Gui.MyHighlightData.IgnoreUseObjectData">
            <summary>
            When set to true the system does not use the 
            IMyUseObject logic to process the highlight.
            </summary>
        </member>
        <member name="F:VRage.Game.ObjectBuilders.Gui.MyHighlightData.SubPartNames">
            <summary>
            Specify there the names of the subparts that would be highlighted
            instead of the full model.
            Format: "subpart_1;subpart_2"
            </summary>
        </member>
        <member name="M:VRage.Game.ObjectBuilders.Gui.MyHighlightData.#ctor(System.Int64,System.Int32,System.UInt64,System.Nullable{VRageMath.Color},System.Boolean,System.Int64,System.String)">
            <summary>
            Constructor.
            </summary>
            <param name="entityId">Id of entity that should be highlighted.</param>
            <param name="thickness">Overlay thickness.</param>
            <param name="pulseTimeInFrames">Number of frames between the pulses.</param>
            <param name="outlineColor">Color of overlay.</param>
            <param name="ignoreUseObjectData">Used to ignore IMyUseObject logic for highlighting.</param>
            <param name="playerId">Id of receiving player.</param>
            <param name="subPartNames">Names of subparts that should be highlighted instead of the full model.</param>
        </member>
        <member name="F:VRage.Game.ObjectBuilders.MyComponentBlockEntry.Main">
            <summary>
            Whether the given block should be used when spawning the component which it contains
            </summary>
        </member>
        <member name="F:VRage.Game.BlueprintItem.Amount">
            <summary>
            Amount of item required or produced. For discrete objects this refers to
            pieces. For ingots and ore, this refers to volume in m^3.
            </summary>
        </member>
        <member name="M:VRage.Game.MyContainerDefinition.HasDefaultComponent(System.String)">
            <summary>
            This will search through definitions to find if Default Components contains the searched component either as BuilderType, InstanceType, or ComponentType
            </summary>
            <param name="component">Name of the type to search for in defined default components</param>
            <returns>true if is defined component with the matching BuilderType, InstanceType or ComponentType </returns>
        </member>
        <member name="F:VRage.Game.MyObjectBuilder_BlueprintDefinition.Result">
            <summary>
            THIS IS OBSOLETE
            </summary>
        </member>
        <member name="F:VRage.Game.MyObjectBuilder_BlueprintDefinition.BaseProductionTimeInSeconds">
            <summary>
            Base production time in seconds, which is affected by speed increase of
            refinery or assembler.
            </summary>
        </member>
        <member name="F:VRage.Game.MyObjectBuilder_CharacterDefinition.PhysicalMaterial">
            <summary>
            Physical material of the character.
            </summary>
        </member>
        <member name="F:VRage.Game.MyObjectBuilder_CharacterDefinition.DeadBodyShape">
            <summary>
            Physics shape used after character's death.
            </summary>
        </member>
        <member name="F:VRage.Game.MyObjectBuilder_CharacterDefinition.AnimationController">
            <summary>
            Name of used animation controller.
            </summary>
        </member>
        <member name="F:VRage.Game.MyObjectBuilder_CharacterDefinition.RotationToSupport">
            <summary>
            Align with the support? 
            </summary>
        </member>
        <member name="F:VRage.Game.MyAutorotateMode.OneDirection">
            <summary>
            When block has mount points only on one side, it will autorotate so that side is touching the surface.
            Otherwise, full range of rotations is allowed.
            </summary>
        </member>
        <member name="F:VRage.Game.MyAutorotateMode.OppositeDirections">
            <summary>
            When block has mount points only on two sides and those sides are opposite each other (eg. Top and Bottom),
            it will autorotate so that one of these sides is touching the surface. Otherwise, full range of rotations
            is allowed.
            </summary>
        </member>
        <member name="F:VRage.Game.MyAutorotateMode.FirstDirection">
            <summary>
            When block has mountpoint on at least one side, it will autorotate so that this side is touching the surface.
            Otherwise, full range of rotations is allowed.
            </summary>
        </member>
        <member name="F:VRage.Game.MyObjectBuilder_CubeBlockDefinition.Variant.Color">
            <summary>
            Color is used to get Color(4 bytes) as well as
            MyStringId value for localization.
            </summary>
        </member>
        <member name="F:VRage.Game.MyObjectBuilder_CubeBlockDefinition.AllowInteractionThroughBlock">
            <summary>
            Used when block has see-through parts (like holodisplay) that you want to be able to interact through.
            </summary>
        </member>
        <member name="F:VRage.Game.MyObjectBuilder_CubeBlockDefinition.SimpleUpdateVisualOnSkinChange">
            <summary>
            Set to true if you dont want to reset subpart positions or reload the whole model on skin change 
            </summary>
        </member>
        <member name="F:VRage.Game.MyObjectBuilder_CubeBlockDefinition.YesNoToolbarBackground">
            <summary>
            Toolbars first two items will have yes/no background when empty
            </summary>
        </member>
        <member name="F:VRage.Game.MyObjectBuilder_CubeBlockDefinition.YesNoToolbarYesTooltip">
            <summary>
            Explain what yes action does
            </summary>
        </member>
        <member name="F:VRage.Game.MyObjectBuilder_CubeBlockDefinition.YesNoToolbarNoTooltip">
            <summary>
            Explain what no action does
            </summary>
        </member>
        <member name="T:VRage.Game.MyObjectBuilder_EnvironmentDefinition">
            <summary>
            Global (environment) mergeable definitions
            </summary>
        </member>
        <member name="T:VRage.Game.MyFactionTypes">
            <summary>
            Describes faction type.
            </summary>
        </member>
        <member name="F:VRage.Game.MyFactionTypes.None">
            <summary>
            Backward compatibility. In many cases works like <see cref="F:VRage.Game.MyFactionTypes.PlayerMade"/>, but in some differs.
            </summary>
        </member>
        <member name="F:VRage.Game.MyFactionTypes.PlayerMade">
            <summary>
            Faction that was created by player
            </summary>
        </member>
        <member name="F:VRage.Game.MyFactionTypes.Miner">
            <summary>
            NPC miner faction
            </summary>
        </member>
        <member name="F:VRage.Game.MyFactionTypes.Trader">
            <summary>
            NPC trader faction
            </summary>
        </member>
        <member name="F:VRage.Game.MyFactionTypes.Builder">
            <summary>
            NPC trader faction
            </summary>
        </member>
        <member name="F:VRage.Game.MyFactionTypes.Pirate">
            <summary>
            NPC pirate faction
            </summary>
        </member>
        <member name="F:VRage.Game.MyFactionTypes.Military">
            <summary>
            NPC military faction
            </summary>
        </member>
        <member name="F:VRage.Game.MyFactionTypes.Custom">
            <summary>
            Non-vanilla Custom faction
            </summary>
        </member>
        <member name="T:VRage.Game.MyGlobalEventTypeEnum">
            <summary>
            Defines the event type.
            Each event type has its assigned handler method and data class type.
            Multiple event definitions can have the same event type.
            </summary>
        </member>
        <member name="T:VRage.Game.MyItemPositioningEnum">
            <summary>
            Enumeration defining where to get the weapon transform from.
            This does not include behavior of arms (anim/ik), which is driven separately by variables SimulateLeftHand and SimulateRightHand.
            </summary>
        </member>
        <member name="F:VRage.Game.MyItemPositioningEnum.TransformFromData">
            <summary>
            Weapon is placed according to sbc data file.
            </summary>
        </member>
        <member name="F:VRage.Game.MyItemPositioningEnum.TransformFromAnim">
            <summary>
            Weapon is placed according to animation.
            </summary>
        </member>
        <member name="T:VRage.Game.MyItemWeaponType">
            <summary>
            this type is used for animations
            </summary>
        </member>
        <member name="P:VRage.Game.MyPlanetMaterialDefinition.HasLayers">
            Weather this material has layers.
        </member>
        <member name="T:VRage.Game.MyPlanetMaterialPlacementRule">
            Important!
            
            Due to the geometry in question the slope is stored as the cosine (used in dot product).
            
            Meanwhile the dot product for the latitude yields the cosine of the modulus of the compliment of our angle.
            This means after the maths are done that what we have is the *sine*, so the latitude is stored as the sine.
        </member>
        <member name="M:VRage.Game.MyPlanetMaterialPlacementRule.Check(System.Single,System.Single,System.Single)">
            Check that a rule matches terrain properties.
            
            @param height Height ration to the height map.
            @param latitude Latitude cosine
            @param slope Surface dominant angle sine.
        </member>
        <member name="M:VRage.Game.MyPlanetSurfaceRule.Check(System.Single,System.Single,System.Single,System.Single)">
            Check that a rule matches terrain properties.
            
            @param height Height ration to the height map.
            @param latitude Latitude cosine
            @param slope Surface dominant angle cosine.
        </member>
        <member name="T:VRage.Game.MyPlanetMaterialGroup">
            Rule group defines a material mappable set of surface rules.
        </member>
        <member name="T:VRage.Game.MyPlanetMapType">
            <summary>
            Planet map types.
            </summary>
        </member>
        <member name="T:VRage.Game.MyPlanetMapTypeSet">
            <summary>
            Represents a set of maps.
            </summary>
        </member>
        <member name="T:VRage.Game.MyObjectBuilder_VisualSettingsDefinition">
            <summary>
            Stripped environment definition with only visual settings
            </summary>
        </member>
        <member name="F:VRage.Game.MyObjectBuilder_WeaponDefinition.ShotDelay">
            <summary>
            Working only for MissileLauncher
            </summary>
        </member>
        <member name="F:VRage.Game.MyObjectBuilder_WeaponDefinition.RecoilResetTimeMilliseconds">
            <summary>
            Recoil reset time, 0 is used to calculate default based on rate of fire. Any other value is used as it is.
            </summary>
        </member>
        <member name="F:VRage.Game.MyObjectBuilder_GuiControlRadioButton.CustomVisualStyle">
            <summary>
            Custom visual style. This is check if visual style is set to Custom.
            </summary>
        </member>
        <member name="M:VRage.Game.IMyStackableGunItem.CanStack(VRage.Game.IMyStackableGunItem)">
            <summary>
            When there is GunEntity (AutomaticRifle) in both items
            </summary>
            <param name="other">Other gun</param>
            <returns></returns>
        </member>
        <member name="M:VRage.Game.IMyStackableGunItem.CanStackWithNullGun">
            <summary>
            When there is no GunEntity (AutomaticRifle) in other item
            </summary>
            <returns></returns>
        </member>
        <member name="F:VRage.Game.MyObjectBuilder_Checkpoint.ElapsedGameTime">
            <summary>
            This is long because TimeSpan is not serialized
            </summary>
        </member>
        <member name="P:VRage.Game.MyObjectBuilder_Checkpoint.GameTime">
            <summary>
            Obsolete. Use ElapsedGameTime
            </summary>
        </member>
        <member name="T:VRage.Game.MyObjectBuilder_FactionsVisEntry">
            <summary>
            Entry used to store player to factions visibility
            </summary>
        </member>
        <member name="M:VRage.Game.MyObjectBuilder_FunctionalBlock.GetTextPanelsData">
            <summary>
            Used to get correct TextPanel stored data. v199- using `TextPanels` and v200+ using `TextPanelsNew`.
            LCD data should be saved into `TextPanelsNew`, but readed from TextPanels if it is not null.
            </summary>
            <returns></returns>
        </member>
        <member name="F:VRage.Game.MyObjectBuilder_InventoryItem.Content">
            <summary>
            Obsolete. It is here only to keep backwards compatibility with old saves. Nulls content when unsupported.
            </summary>
        </member>
        <member name="F:VRage.Game.MyObjectBuilder_PhysicalObject.DurabilityHP">
            <summary>
            This is used for GUI to show the amount of health points (durability) of the weapons and tools. This is updated through Durability entity component if entity exists..
            </summary>
        </member>
        <member name="M:VRage.Game.MyObjectBuilder_PhysicalObject.GetInstanceOnStackSplit">
            <summary>
            Since 204 items like gas containers can stack.
            All items that has data, that can change should override this method, and return a clone.
            </summary>
            <returns>This or clone of this object</returns>
        </member>
        <member name="M:VRage.Game.MyObjectBuilder_ProfilerSnapshot.GetProfilerDumpPath(System.Int32)">
            <summary>
            Get the path where a profiler dump with <paramref name="index"/> should be stored.
            </summary>
            <param name="index">The index of the profiler dump.</param>
            <returns>The path where the dump should be stored.</returns>
        </member>
        <member name="F:VRage.Game.MyObjectBuilder_ProjectorBase.ProjectedGrid">
            <summary>
            This property is obsolete. Do not use it any more. Use Projected grids. In case of single projected grid, select index 0.
            </summary>
        </member>
        <member name="F:VRage.Game.MyObjectBuilder_SessionSettings.WorldSizeKm">
            <summary>
            Size of the edge of the world area cube.
            Don't use directly, as it is error-prone (it's km instead of m and edge size instead of half-extent)
            Rather use MyEntities.WorldHalfExtent()
            </summary>
        </member>
        <member name="M:VRage.Game.MyObjectBuilder_SessionSettings.GetInitialPCU(VRage.Game.MyObjectBuilder_SessionSettings)">
            <summary>
            If you are modifying this function, also modify MyBlockLimits.GetInitialPCU 
            (This function cannot be moved into MyBlockLimits as using MyBlockLimits while MySession.Static == null will result in crash during intialization of statics of MyBlockLimits)
            </summary>
            <param name="settings"></param>
            <returns></returns>
        </member>
        <member name="F:VRage.Game.MyToolbarType.Spectator">
            <summary>
            This is character toolbar that allows building everything.
            </summary>
        </member>
        <member name="T:VRage.Game.GameRelationAttribute">
            <summary>
            This class is here only to distinguish fields in SessionSettings
            Will be removed after correct hierarchy and usage of session settings is made
            </summary>
        </member>
        <member name="T:VRage.Game.MyDefinitionXmlSerializer">
            <summary>
            Custom XmlSerializer for definitions that allows to override the definition type
            </summary>
        </member>
        <member name="F:VRage.Game.ObjectBuilder.MyGlobalTypeMetadata.Static">
            <summary>
            Default type metadata manager.
            </summary>
        </member>
        <member name="M:VRage.Game.ObjectBuilder.MyGlobalTypeMetadata.Init(System.Boolean)">
            <summary>
            Initalize the registry with all the defautl game assemblies.
            </summary>
        </member>
        <member name="F:VRage.Game.Utils.MyCamera.CameraShake">
            <summary>
            Member that shakes with the camera.
            Note: If we start to have more cameras in the scene, this should be changed to component, because not every camera needs it.
                  But currently - we use just one camera, so it is a member.
            </summary>
        </member>
        <member name="F:VRage.Game.Utils.MyCamera.CameraSpring">
            <summary>
            Member that implements camera spring.
            Note: If we start to have more cameras in the scene, this should be changed to component, because not every camera needs it.
                  But currently - we use just one camera, so it is a member.
            </summary>
        </member>
        <member name="F:VRage.Game.Utils.MyCamera.m_fovSpring">
            <summary>
            FOV spring, value that is applied on top of current FOV
            </summary>
        </member>
        <member name="F:VRage.Game.Utils.MyCamera.m_fovSpringDampening">
            <summary>
            FOV spring dampening.
            </summary>
        </member>
        <member name="P:VRage.Game.Utils.MyCamera.ViewMatrixAtZero">
            <summary>
            Current view matrix without translation part.
            </summary>
        </member>
        <member name="P:VRage.Game.Utils.MyCamera.ForwardVector">
            <summary>
            Forward vector of camera world matrix ("ahead from camera")
            </summary>
        </member>
        <member name="P:VRage.Game.Utils.MyCamera.LeftVector">
            <summary>
            Left vector of camera world matrix ("to the left from camera")
            </summary>
        </member>
        <member name="P:VRage.Game.Utils.MyCamera.UpVector">
            <summary>
            Up vector of camera world matrix ("up from camera")
            </summary>
        </member>
        <member name="P:VRage.Game.Utils.MyCamera.FieldOfViewDegrees">
            <summary>
            Field of view in degrees.
            </summary>
        </member>
        <member name="P:VRage.Game.Utils.MyCamera.FovWithZoom">
            <summary>
            Gets current fov with considering if zoom is enabled. Also add current fov spring value.
            </summary>
        </member>
        <member name="P:VRage.Game.Utils.MyCamera.Position">
            <summary>
            Get position of the camera.
            </summary>
        </member>
        <member name="M:VRage.Game.Utils.MyCamera.WorldToScreen(VRageMath.Vector3D@)">
            <summary>
            Gets screen coordinates of 3d world pos in 0 - 1 distance where 1.0 is screen width(for X) or height(for Y).
            WARNING: Y is from bottom to top.
            </summary>
            <param name="worldPos">World position.</param>
            <returns>Screen coordinate in 0-1 distance.</returns>
        </member>
        <member name="M:VRage.Game.Utils.MyCamera.ScreenToWorld(VRageMath.Vector3D@)">
            <summary>
            Gets world coordinates from screen position in 0 - 1 distance where 1.0 is screen width(for X) or height(for Y).
            WARNING: Y is from bottom to top.
            </summary>
            <param name="screenPos">Screen coordinate in 0-1 distance.</param>
            <returns>World position.</returns>
        </member>
        <member name="M:VRage.Game.Utils.MyCamera.WorldLineFromScreen(VRageMath.Vector2)">
            <summary>
            Gets normalized world space line from screen space coordinates.
            </summary>
            <param name="screenCoords"></param>
            <returns></returns>
        </member>
        <member name="T:VRage.Game.Utils.MyCameraSpring">
            <summary>
            Camera spring 
            </summary>
        </member>
        <member name="F:VRage.Game.Utils.MyCameraSpring.Enabled">
            <summary>
            Is the sprint enabled?
            </summary>
        </member>
        <member name="P:VRage.Game.Utils.MyCameraSpring.SpringStiffness">
            <summary>
            Stiffness of the spring.
            </summary>
        </member>
        <member name="P:VRage.Game.Utils.MyCameraSpring.SpringDampening">
            <summary>
            Spring velocity dampening.
            </summary>
        </member>
        <member name="P:VRage.Game.Utils.MyCameraSpring.SpringMaxVelocity">
            <summary>
            Maximum speed of spring center.
            </summary>
        </member>
        <member name="P:VRage.Game.Utils.MyCameraSpring.SpringMaxLength">
            <summary>
            Final spring length is transformed using calculation:
            springTransformedLength = SpringMaxLength * springLength / (springLength + 2)
            </summary>
        </member>
        <member name="M:VRage.Game.Utils.MyCameraSpring.Update(System.Single,VRageMath.Vector3@)">
            <summary>
            Update camera spring.
            </summary>
            <param name="timeStep">Time passed.</param>
            <param name="newCameraLocalOffset">Resulting local camera position.</param>
        </member>
        <member name="M:VRage.Game.Utils.MyCloudStorageHelper.Marvin.ComputeHash32(System.ReadOnlySpan{System.Byte},System.UInt64)">
            <summary>
            Convenience method to compute a Marvin hash and collapse it into a 32-bit hash.
            </summary>
        </member>
        <member name="M:VRage.Game.Utils.MyCloudStorageHelper.Marvin.ComputeHash(System.ReadOnlySpan{System.Byte},System.UInt64)">
            <summary>
            Computes a 64-hash using the Marvin algorithm.
            </summary>
        </member>
        <member name="T:VRage.Game.Utils.MyDebugDrawHelper">
            <summary>
            Set of helper functions for debug drawing.
            </summary>
        </member>
        <member name="M:VRage.Game.Utils.MyDebugDrawHelper.DrawNamedPoint(VRageMath.Vector3D,System.String,System.Nullable{VRageMath.Color},System.Nullable{VRageMath.MatrixD})">
            <summary>
            Debug draw a point with an explanation name next to it.
            </summary>
            <param name="pos">world space coordinates of the point</param>
            <param name="name">point name, caption</param>
            <param name="color">point color, pass null to keep default white</param>
            <param name="cameraViewMatrix">helper camera matrix, pass null to ignore camera transform - this just makes the debug draw prettier</param>
        </member>
        <member name="M:VRage.Game.Utils.MyDebugDrawHelper.DrawNamedColoredAxis(VRageMath.MatrixD,System.Single,System.String,System.Nullable{VRageMath.Color})">
            <summary>
            Draw colored named axis.
            </summary>
            <param name="matrix">matrix containing axes</param>
            <param name="axisLengthScale">axis visualization length</param>
            <param name="name">helper label</param>
            <param name="color">helper color</param>
        </member>
        <member name="M:VRage.Game.VisualScripting.MyVisualScriptingProxy.Init">
            <summary>
            Loads reflection data.
            </summary>
        </member>
        <member name="M:VRage.Game.VisualScripting.MyVisualScriptingProxy.GetType(System.String)">
            <summary>
            Looks for given type using executing assembly.
            </summary>
            <param name="typeFullName"></param>
            <returns></returns>
        </member>
        <member name="M:VRage.Game.VisualScripting.MyVisualScriptingProxy.GetMethod(System.String)">
            <summary>
            Looks for methodInfo about method with given signature.
            </summary>
            <param name="signature">Full signature of a method.</param>
            <returns>null if not found.</returns>
        </member>
        <member name="M:VRage.Game.VisualScripting.MyVisualScriptingProxy.GetMethods">
            <summary>
            All attributed methods from VisualScriptingProxy.
            </summary>
            <returns></returns>
        </member>
        <member name="M:VRage.Game.VisualScripting.MyVisualScriptingProxy.GetField(System.String)">
            <summary>
            Returns event field with specified signature.
            </summary>
            <param name="signature"></param>
            <returns></returns>
        </member>
        <member name="P:VRage.Game.Voxels.IMyStorage.StorageId">
            <summary>
            Unique identifier for this storage.
            
            This identifier is unique for any storage available locally.
            No assumptions can be made by equal storages on different clients
            or the same storage across multiple reloads of  the game.
            </summary>
        </member>
        <member name="M:VRage.Game.Voxels.IMyStorage.Close">
            <summary>
            Close this storage, unloading it's resources.
            </summary>
        </member>
        <member name="P:VRage.Game.Voxels.IMyStorage.Shared">
            <summary>
            Weather this storage is shared by multiple voxel entities.
            
            Shared storages may not be closed directly.
            </summary>
        </member>
        <member name="M:VRage.Game.Voxels.IMyStorage.Copy">
            <summary>
            Create a copy of this storage.
            </summary>
            <returns></returns>
        </member>
        <member name="M:VRage.Game.Voxels.IMyStorage.Pin">
            <summary>
            Pin the storage.
            
            While the storage is pinned it will not be closed, but calls to pin will mark it to close as soon as all pins are disposed.
            
            The pin might not be valid if the storage was already closed. You should always check once you pin the storage that the pin is valid.
            </summary>
            <returns>A storage pin. Must be disposed when no longer in use.</returns>
        </member>
        <member name="M:VRage.Game.Voxels.IMyStorage.Unpin">
            <summary>
            Unpins the storage, must not be called directly, used by storage pins.
            </summary>
        </member>
        <member name="M:VRage.Game.Voxels.IMyStorage.Intersect(VRageMath.BoundingBoxI@,System.Int32,System.Boolean)">
            <summary>
            Check for intersection against storage space bounding box.
            
            When <b>lazy</b> is set to true this method can return <b>intersects</b> when the box is actually <b>contained</b>.
            </summary>
            <param name="box">Query box</param>
            <param name="lod"></param>
            <param name="exhaustiveContainmentCheck"></param>
            <returns>Weather the bounding box is disjoint, intersectiong or contained in the storage volume.</returns>
        </member>
        <member name="E:VRage.Game.Voxels.IMyStorage.RangeChanged">
            <summary>
            Please use RangeChanged on voxelbase if possible
            </summary>
        </member>
        <member name="M:VRage.Game.Voxels.IMyStorage.DebugDraw(VRageMath.MatrixD@,VRage.Game.Voxels.MyVoxelDebugDrawMode)">
            <summary>
            Debug draw the storage at the give position orientation and scale.
            </summary>
            <param name="worldMatrix">World transform for the debug draw.</param>
            <param name="mode">Debug draw mode.</param>
        </member>
        <member name="P:VRage.Game.Voxels.IMyStorage.DataProvider">
            <summary>
            The procedural provider of data for this storage, can be null.
            </summary>
        </member>
        <member name="M:VRage.Game.Voxels.IMyStorage.SetDataCache(System.Byte[],System.Boolean)">
            <summary>
            Sets cache for compressed storage data
            </summary>
            <param name="data"></param>
            <param name="compressed"></param>
        </member>
        <member name="M:VRage.Game.Voxels.IMyStorage.GetVoxelData">
            <summary>
            Gets uncompressed voxel data
            </summary>
            <returns>Uncompressed voxel data</returns>
        </member>
        <member name="P:VRage.Game.Voxels.IMyStorage.AreDataCached">
            <summary>
            Returns true if storage compressed data are cached
            </summary>
        </member>
        <member name="M:VRage.Game.Voxels.IMyStorage.NotifyChanged(VRageMath.Vector3I,VRageMath.Vector3I,VRage.Voxels.MyStorageDataTypeFlags)">
            <summary>
            Notify to the storage the change of a range of storage data.
            </summary>
            <remarks>
            This method is designed to be used when WriteRange is invoked with <code>notify = false</code>.
            Reducing the number of responses to the RangeChanged event if a large set of changes is issued.
            </remarks>
            <param name="voxelRangeMin">Minimum change coordinate (inclusive).</param>
            <param name="voxelRangeMax">Maximum changed coordinate (inclusive).</param>
            <param name="changedData">What types of data have been modified.</param>
        </member>
        <member name="F:VRage.Game.Voxels.MyPrecalcJob.IsValid">
            <summary>
            Invalid tasks finishes normally and restarts afterwards. Even if results
            are not valid, they may still be useful.
            </summary>
        </member>
        <member name="M:VRage.Game.Voxels.MyWorkTracker`2.Enumerator.Dispose">
            <inheritdoc />
        </member>
        <member name="M:VRage.Game.Voxels.MyWorkTracker`2.Enumerator.MoveNext">
            <inheritdoc />
        </member>
        <member name="M:VRage.Game.Voxels.MyWorkTracker`2.Enumerator.Reset">
            <inheritdoc />
        </member>
        <member name="P:VRage.Game.Voxels.MyWorkTracker`2.Enumerator.Current">
            <inheritdoc />
        </member>
        <member name="P:VRage.Game.Voxels.MyWorkTracker`2.Enumerator.System#Collections#IEnumerator#Current">
            <inheritdoc />
        </member>
        <member name="F:VRage.Entities.Components.MyDecimatePostprocessing.m_instance">
            <summary>
            Native decimator is shared across all definitions but before use setup with correct data.
            </summary>
        </member>
        <member name="M:VRage.Entities.Components.MyVoxelPostprocessing.Get(System.Int32,VRage.Voxels.VrPostprocessing@)">
            <summary>
            Retrieve the native postprocessing step associated with this.
            </summary>
            <param name="lod">Prepare the step fo the given lod.</param>
            <param name="postprocess"></param>
            <returns>The native postprocessing step.</returns>
        </member>
        <member name="P:VRage.MyEntityIdentifier.AllocationSuspended">
            <summary>
            Freezes allocating entity ids.
            This is important, because during load, no entity cannot allocate new id, because it could allocate id which already has entity which will be loaded soon.
            </summary>
        </member>
        <member name="M:VRage.MyEntityIdentifier.MarkIdUsed(System.Int64)">
            <summary>
            This method is used when loading existing entity IDs to track the last generated ID
            </summary>
        </member>
        <member name="M:VRage.MyEntityIdentifier.AddEntityWithId(VRage.ModAPI.IMyEntity)">
            <summary>
            Registers entity with given ID. Do not call this directly, it is called automatically
            when EntityID is first time assigned.
            </summary>
            <param name="entity"></param>
        </member>
        <member name="M:VRage.MyEntityIdentifier.AllocateId(VRage.MyEntityIdentifier.ID_OBJECT_TYPE,VRage.MyEntityIdentifier.ID_ALLOCATION_METHOD)">
            <summary>
            Allocated new entity ID (won't add to list)
            Entity with this ID should be added immediatelly
            </summary>
        </member>
        <member name="M:VRage.MyEntityIdentifier.ConstructIdFromString(VRage.MyEntityIdentifier.ID_OBJECT_TYPE,System.String)">
            Construct an ID using the hash from a string.
        </member>
        <member name="M:VRage.MyEntityIdentifier.SwapRegisteredEntityId(VRage.ModAPI.IMyEntity,System.Int64,System.Int64)">
            <summary>
            Changes ID by which an entity is registered. Do not call this directly, it is called automatically when
            EntityID changes.
            </summary>
            <param name="entity">Entity whose ID has changed.</param>
            <param name="oldId">Old ID of the entity.</param>
            <param name="newId">New ID of the entity.</param>
        </member>
        <member name="T:VRage.Factory.AttributeObserver">
            <summary>
            Delegate describing a method used to monitor type annotating attributes.
            </summary>
            <param name="type">The annotated type.</param>
            <param name="attr">The attribute annotating.</param>
        </member>
        <member name="F:VRage.Factory.MyDependencyAttribute.Recursive">
            <summary>
            Whether this dependency applies to children.
            </summary>
        </member>
        <member name="F:VRage.Factory.MyDependencyAttribute.Critical">
            <summary>
            Whether this dependency is a requirement.
            
            Sometimes the dependency only means ordering when the dependant is available.
            </summary>
        </member>
        <member name="T:VRage.Factory.MyFactorableAttribute">
            <summary>
            Use this attribute to mark any factories you may use in code. This will automatically register the factory.
            </summary>
        </member>
        <member name="T:VRage.Factory.MyGameMetadataContext">
            <summary>
            Base game metadata context.
            
            Base game context has compatibility observers for features that are not usable by mods.
            </summary>
        </member>
        <member name="M:VRage.Factory.MyGameMetadataContext.RegisterAttributeObserver(System.Type,VRage.Factory.AttributeObserver)">
            <summary>
            Add a attribute crawler to the metadata system, this will cause the crawler
            to be invoked whenever any types are declared with the observed attribute.
            
            There can be any number of crawlers on attributes.
            </summary>
            <param name="attributeType">The type of the attribute to observe</param>
            <param name="observer">The observer to be invoked when the attribute is encountered.</param>
        </member>
        <member name="T:VRage.Factory.MyObjectFactory`2">
            <summary>
            Base class for automatic object factory.
            
            Object factories are created and set up automatically.
            </summary>
            <typeparam name="TAttribute"></typeparam>
            <typeparam name="TCreatedObjectBase"></typeparam>
        </member>
        <member name="M:VRage.Factory.MyObjectFactory`2.RegisterDescriptor(`0,System.Type)">
            <summary>
            Register a type with descriptor.
            </summary>
            <param name="descriptor">Descriptor</param>
            <param name="type">Type</param>
        </member>
        <member name="M:VRage.Factory.MyObjectFactory`2.CreateInstance(VRage.ObjectBuilders.MyObjectBuilderType,System.Object[])">
            <summary>
            Create default instance from object builder.
            </summary>
            <param name="objectBuilderType">The object builder type that maps to the object we want to create.</param>
            <param name="args"></param>
            <returns></returns>
        </member>
        <member name="P:VRage.Factory.MyObjectFactory`2.Attributes">
            <summary>
            Enumerate all know attributes. And therefore all indexed types.
            </summary>
        </member>
        <member name="M:VRage.Factory.MyObjectFactory`2.GetAttribute(System.Type,System.Boolean)">
            <summary>
            Get an attribute for it's generated type.
            
            This may optionally check for attributes from parent classes in case the factory attribute allows inheritance.
            </summary>
            <param name="instanceType">The type to query.</param>
            <param name="inherited">Check for inheritance</param>
            <returns></returns>
        </member>
        <member name="M:VRage.Factory.MyObjectFactoryExtensions.CreateAndDeserialize``2(VRage.Factory.MyObjectFactory{``0,``1},VRage.ObjectBuilders.MyObjectBuilder_Base)">
            <summary>
            Create a new instance of an object and deserialize it.
            
            Only valid for factories that create IMyObject instances.
            </summary>
            <typeparam name="TAttribute">Attribute type of the factory.</typeparam>
            <typeparam name="TCreated">Created type of the factory.</typeparam>
            <param name="self">The factory.</param>
            <param name="builder">The object builder for the type.</param>
            <returns></returns>
        </member>
        <member name="T:VRage.ModAPI.IMyCamera">
            <summary>
            Describes camera (mods interface)
            </summary>
        </member>
        <member name="P:VRage.ModAPI.IMyCamera.Position">
            <summary>
            Gets camera position
            </summary>
        </member>
        <member name="P:VRage.ModAPI.IMyCamera.PreviousPosition">
            <summary>
            Gets camera previous position
            </summary>
        </member>
        <member name="P:VRage.ModAPI.IMyCamera.ViewportOffset">
            <summary>
            Gets camera viewport offset
            </summary>
        </member>
        <member name="P:VRage.ModAPI.IMyCamera.ViewportSize">
            <summary>
            Gets camera viewport size
            </summary>
        </member>
        <member name="P:VRage.ModAPI.IMyCamera.ViewMatrix">
            <summary>
            Gets view matrix when camera in real position
            </summary>
        </member>
        <member name="P:VRage.ModAPI.IMyCamera.WorldMatrix">
            <summary>
            Gets camera world matrix
            </summary>
        </member>
        <member name="P:VRage.ModAPI.IMyCamera.ProjectionMatrix">
            <summary>
            Gets projection matrix
            </summary>
        </member>
        <member name="P:VRage.ModAPI.IMyCamera.NearPlaneDistance">
            <summary>
            Gets near plane distance
            </summary>
        </member>
        <member name="P:VRage.ModAPI.IMyCamera.FarPlaneDistance">
            <summary>
            Gets farplane is set by MyObjectBuilder_SessionSettings.ViewDistance
            </summary>
        </member>
        <member name="P:VRage.ModAPI.IMyCamera.FieldOfViewAngle">
            <summary>
            Gets field of view angle in degrees
            </summary>
        </member>
        <member name="P:VRage.ModAPI.IMyCamera.FovWithZoom">
            <summary>
            Gets field of view with zoom
            </summary>
        </member>
        <member name="M:VRage.ModAPI.IMyCamera.GetDistanceWithFOV(VRageMath.Vector3D)">
            <summary>
            Gets distance from point. Equals to <see cref="M:VRageMath.Vector3D.Distance(VRageMath.Vector3D,VRageMath.Vector3D)"/>
            </summary>
            <param name="position">Another point</param>
            <returns>Distance in meters</returns>
        </member>
        <member name="M:VRage.ModAPI.IMyCamera.IsInFrustum(VRageMath.BoundingBoxD@)">
            <summary>
            Checks if specified bounding box is in actual bounding frustum
            IMPORTANT: If you observe bad result of this test, check how you transform your bounding box.
            Don't use BoundingBox.Transform. Instead transform box manualy and then create new box.
            </summary>
            <param name="boundingBox">Bounding box to check</param>
            <returns>Whether specified bounding box is in actual bounding frustum</returns>
        </member>
        <member name="M:VRage.ModAPI.IMyCamera.IsInFrustum(VRageMath.BoundingSphereD@)">
            <summary>
            Checks if specified bounding sphere is in actual bounding frustum
            IMPORTANT: If you observe bad result of this test, check how you transform your bounding sphere.
            Don't use BoundingSphere.Transform. Instead transform sphere center manualy and then create new sphere.
            </summary>
            <param name="boundingSphere"></param>
            <returns>Whether specified bounding box is in actual bounding frustum</returns>
        </member>
        <member name="M:VRage.ModAPI.IMyCamera.IsInFrustum(VRageMath.BoundingBoxD)">
            <summary>
            Checks if specified bounding box is in actual bounding frustum
            IMPORTANT: If you observe bad result of this test, check how you transform your bounding box.
            Don't use BoundingBox.Transform. Instead transform box manualy and then create new box.
            </summary>
            <param name="boundingBox">Bounding box to check</param>
            <returns>Whether specified bounding box is in actual bounding frustum</returns>
        </member>
        <member name="M:VRage.ModAPI.IMyCamera.WorldToScreen(VRageMath.Vector3D@)">
            <summary>
            Gets screen coordinates of 3d world pos in 0 - 1 distance where 1.0 is screen width(for X) or height(for Y).
            WARNING: Y is from bottom to top.
            </summary>
            <param name="worldPos">World position.</param>
            <returns>Screen coordinate in 0-1 distance.</returns>
        </member>
        <member name="M:VRage.ModAPI.IMyCamera.WorldLineFromScreen(VRageMath.Vector2)">
            <summary>
            Gets normalized world space line from screen space coordinates.
            </summary>
            <param name="screenCoords"></param>
            <returns>Gets normalized world space line</returns>
        </member>
        <member name="T:VRage.ModAPI.IMyEntities">
            <summary>
            Provides API, that granting access to enitities (mods interface)
            </summary>
            <seealso cref="T:VRage.ModAPI.IMyEntity"/>
        </member>
        <member name="M:VRage.ModAPI.IMyEntities.TryGetEntityById(System.Int64,VRage.ModAPI.IMyEntity@)">
            <summary>
            Returns entity with provided id
            </summary>
            <param name="id">EntityId</param>
            <param name="entity">Found entity</param>
            <returns>True if entity is found</returns>
        </member>
        <member name="M:VRage.ModAPI.IMyEntities.TryGetEntityById(System.Nullable{System.Int64},VRage.ModAPI.IMyEntity@)">
            <summary>
            Returns entity with provided id
            </summary>
            <param name="id"><see cref="P:VRage.ModAPI.IMyEntity.EntityId"/></param>
            <param name="entity">Found entity</param>
            <returns>True if entity is found</returns>
        </member>
        <member name="M:VRage.ModAPI.IMyEntities.TryGetEntityByName(System.String,VRage.ModAPI.IMyEntity@)">
            <summary>
            Returns entity with provided name
            </summary>
            <param name="name"><see cref="P:VRage.ModAPI.IMyEntity.Name"/></param>
            <param name="entity">Found entity</param>
            <returns>True if entity is found</returns>
        </member>
        <member name="M:VRage.ModAPI.IMyEntities.EntityExists(System.String)">
            <summary>
            Returns if entity with provided name exists
            </summary>
            <param name="name"><see cref="P:VRage.ModAPI.IMyEntity.Name"/></param>
            <returns>True if entity exists</returns>
        </member>
        <member name="M:VRage.ModAPI.IMyEntities.AddEntity(VRage.ModAPI.IMyEntity,System.Boolean)">
            <summary>
            Registers entity
            </summary>
            <param name="entity">Entity that should be registered</param>
            <param name="insertIntoScene">When true <see cref="M:VRage.ModAPI.IMyEntity.OnAddedToScene(System.Object)"/> is called</param>
        </member>
        <member name="M:VRage.ModAPI.IMyEntities.CreateFromObjectBuilder(VRage.ObjectBuilders.MyObjectBuilder_EntityBase)">
            <summary>
            Create entity from object builder
            </summary>
            <param name="objectBuilder">Object builder of entity</param>
            <returns>Created entity</returns>
        </member>
        <member name="M:VRage.ModAPI.IMyEntities.CreateFromObjectBuilderAndAdd(VRage.ObjectBuilders.MyObjectBuilder_EntityBase)">
            <summary>
            Create entity from object builder, and then call <see cref="M:VRage.ModAPI.IMyEntities.AddEntity(VRage.ModAPI.IMyEntity,System.Boolean)"/>
            </summary>
            <param name="objectBuilder">Object builder of entity</param>
            <returns>Created entity</returns>
        </member>
        <member name="M:VRage.ModAPI.IMyEntities.RemoveEntity(VRage.ModAPI.IMyEntity)">
            <summary>
            Unregisters entity
            </summary>
            <param name="entity">Entity that should be unregistered</param>
        </member>
        <member name="E:VRage.ModAPI.IMyEntities.OnEntityRemove">
            <summary>
            Called when <see cref="M:VRage.ModAPI.IMyEntities.RemoveEntity(VRage.ModAPI.IMyEntity)"/> called on entity
            </summary>
        </member>
        <member name="E:VRage.ModAPI.IMyEntities.OnEntityAdd">
            <summary>
            Called when <see cref="M:VRage.ModAPI.IMyEntities.AddEntity(VRage.ModAPI.IMyEntity,System.Boolean)"/> called on entity
            </summary>
        </member>
        <member name="E:VRage.ModAPI.IMyEntities.OnCloseAll">
            <summary>
            Called when session unloads, before grids are closed
            </summary>
        </member>
        <member name="E:VRage.ModAPI.IMyEntities.OnEntityNameSet">
            <summary>
            Called when entity gets <see cref="P:VRage.ModAPI.IMyEntity.Name"/>. First string - old name, Second - new name
            </summary>
        </member>
        <member name="M:VRage.ModAPI.IMyEntities.IsSpherePenetrating(VRageMath.BoundingSphereD@)">
            <summary>
            Checks if sphere hits any <see cref="T:Havok.HkRigidBody"/>
            </summary>
            <param name="bs">Sphere that used for intersection check</param>
            <returns>True if sphere hits any body</returns>
        </member>
        <member name="M:VRage.ModAPI.IMyEntities.FindFreePlace(VRageMath.Vector3D,System.Single,System.Int32,System.Int32,System.Single)">
            <summary>
            Use to find place that doesn't have any voxels, grids, or physical bodies.
            If original position can't fill check sphere, new position in some distance is picked.
            Distance grows each testsPerDistance attempts. 
            Maximum distance from BasePos that can be used is calculated by formula: maxTestCount / testsPerDistance * radius * stepSize
            </summary>
            <param name="basePos">Base position</param>
            <param name="radius">Radius in which there should be nothing</param>
            <param name="maxTestCount">How many tries should be done, to find free space</param>
            <param name="testsPerDistance">Depends how often distance from original position grows</param>
            <param name="stepSize">How distance grows</param>
            <returns>Position that can doesn't have voxels, grids and other HkBodies in provided radius</returns>
        </member>
        <member name="M:VRage.ModAPI.IMyEntities.GetInflatedPlayerBoundingBox(VRageMath.BoundingBoxD@,System.Single)">
            <summary>
            Making playerBox include all connected players
            </summary>
            <param name="playerBox">Box, that would contain all players</param>
            <param name="inflation">Minimal distance between player, and border</param>
        </member>
        <member name="M:VRage.ModAPI.IMyEntities.IsInsideVoxel(VRageMath.Vector3D,VRageMath.Vector3D,VRageMath.Vector3D@)">
            <summary>
            Return true if line between pos and hintPosition doesn't intersect any voxel, or intersects it even number of times
            Does inside physical ray casting inside
            </summary>
            <param name="pos">Position of object</param>
            <param name="hintPosition">Position of object few frames back to test whether object entered voxel. Usually pos - LinearVelocity * x, where x it time.</param>
            <param name="lastOutsidePos">Last position that was outside of voxels</param>
        </member>
        <member name="M:VRage.ModAPI.IMyEntities.IsWorldLimited">
            <summary>
            Return whether world has limited size in kilometers
            </summary>
            <returns>True if limited</returns>
        </member>
        <member name="M:VRage.ModAPI.IMyEntities.WorldHalfExtent">
            <summary>
            Returns shortest distance (i.e. axis-aligned) to the world border from the world center.
            Will be 0 if world is borderless
            </summary>
        </member>
        <member name="M:VRage.ModAPI.IMyEntities.WorldSafeHalfExtent">
            <summary>
            Returns shortest distance (i.e. axis-aligned) to the world border from the world center, minus 600m to make spawning somewhat safer.
            Will be 0 if world is borderless
            </summary>
        </member>
        <member name="M:VRage.ModAPI.IMyEntities.IsInsideWorld(VRageMath.Vector3D)">
            <summary>
            Returns true if distance from 0,0,0 to provided position is less than <see cref="M:VRage.ModAPI.IMyEntities.WorldHalfExtent"/>
            </summary>
            <param name="pos">Checked position in world coordinates</param>
            <returns>True if distance is less than <see cref="M:VRage.ModAPI.IMyEntities.WorldHalfExtent"/></returns>
        </member>
        <member name="M:VRage.ModAPI.IMyEntities.IsRaycastBlocked(VRageMath.Vector3D,VRageMath.Vector3D)">
            <summary>
            Returns true if raycast hits anything (with raycast layer=0)
            </summary>
            <param name="pos">From</param>
            <param name="target">To</param>
            <returns></returns>
        </member>
        <member name="M:VRage.ModAPI.IMyEntities.SetEntityName(VRage.ModAPI.IMyEntity,System.Boolean)">
            <summary>
            Apply <see cref="P:VRage.ModAPI.IMyEntity.Name"/> for entity
            </summary>
            <param name="IMyEntity">Entity that should be named</param>
            <param name="possibleRename">Allows renaming</param>
        </member>
        <member name="M:VRage.ModAPI.IMyEntities.IsNameExists(VRage.ModAPI.IMyEntity,System.String)">
            <summary>
            Checks if registered name belongs to this entity
            </summary>
            <param name="entity">Entity to test</param>
            <param name="name">Name to test</param>
            <returns>True if registered name belongs to this entity</returns>
        </member>
        <member name="M:VRage.ModAPI.IMyEntities.RemoveFromClosedEntities(VRage.ModAPI.IMyEntity)">
            <summary>
            Remove entity from lists of closed entities
            </summary>
            <param name="entity">Entity that should be removed</param>
        </member>
        <member name="M:VRage.ModAPI.IMyEntities.RemoveName(VRage.ModAPI.IMyEntity)">
            <summary>
            Removes registered name from entity. 
            </summary>
            <param name="entity">Entity, that has name</param>
        </member>
        <member name="M:VRage.ModAPI.IMyEntities.Exist(VRage.ModAPI.IMyEntity)">
            <summary>
            Checks if entity is registered entity 
            </summary>
            <param name="entity">Entity to test</param>
            <returns>True if entity is registered</returns>
        </member>
        <member name="M:VRage.ModAPI.IMyEntities.MarkForClose(VRage.ModAPI.IMyEntity)">
            <summary>
            Mark entity as closed. Soon it would be deleted. Doesn't call <see cref="M:VRage.ModAPI.IMyEntity.Close"/> 
            </summary>
            <param name="entity">Entity to close</param>
        </member>
        <member name="M:VRage.ModAPI.IMyEntities.RegisterForUpdate(VRage.ModAPI.IMyEntity)">
            <summary>
            Make entity receive UpdateBeforeSimulation, UpdateBefore10Simulation, UpdateBefore100Simulation, UpdateAfterSimulation, UpdateAfter10Simulation, UpdateAfter100Simulation, Simulate, UpdateBeforeNextFrame depending on it's <see cref="P:VRage.ModAPI.IMyEntity.NeedsUpdate"/> flags.
            Physics are still simulated
            </summary>
            <param name="entity">That should have updates</param>
        </member>
        <member name="M:VRage.ModAPI.IMyEntities.RegisterForDraw(VRage.ModAPI.IMyEntity)">
            <summary>
            Make entity receive PrepareForDraw and sending to it's Render Draw call
            </summary>
            <param name="entity">That should be drawn</param>
        </member>
        <member name="M:VRage.ModAPI.IMyEntities.UnregisterForUpdate(VRage.ModAPI.IMyEntity,System.Boolean)">
            <summary>
            Unregistering entity from following updates: UpdateBeforeSimulation, UpdateBefore10Simulation, UpdateBefore100Simulation, UpdateAfterSimulation, UpdateAfter10Simulation, UpdateAfter100Simulation, Simulate, UpdateBeforeNextFrame
            Physics are still simulated
            </summary>
            <param name="entity">Entity that should not receive updates anymore</param>
            <param name="immediate">When true, updates removed immediately, but may cause crashes</param>
        </member>
        <member name="M:VRage.ModAPI.IMyEntities.UnregisterForDraw(VRage.ModAPI.IMyEntity)">
            <summary>
            Unregistering entity from PrepareForDraw events and it Render from Draw calls.
            Entity may still be rendered
            </summary>
            <param name="entity">Entity that should stop receive draw calls</param>
        </member>
        <member name="M:VRage.ModAPI.IMyEntities.GetIntersectionWithSphere(VRageMath.BoundingSphereD@)">
            <summary>
            Returns first found (not closest) entity that intersects with sphere
            </summary>
            <param name="sphere">Sphere to test (in world coordinates)</param>
            <returns>First found entity</returns>
        </member>
        <member name="M:VRage.ModAPI.IMyEntities.GetIntersectionWithSphere(VRageMath.BoundingSphereD@,VRage.ModAPI.IMyEntity,VRage.ModAPI.IMyEntity)">
            <summary>
            Returns first found (not closest) entity that intersects with sphere
            </summary>
            <param name="sphere">Sphere to test (in world coordinates)</param>
            <param name="ignoreEntity0">Return value can't be this entity</param>
            <param name="ignoreEntity1">Return value can't be this entity</param>
            <returns>First found entity, or null</returns>
        </member>
        <member name="M:VRage.ModAPI.IMyEntities.GetIntersectionWithSphere(VRageMath.BoundingSphereD@,VRage.ModAPI.IMyEntity,VRage.ModAPI.IMyEntity,System.Boolean,System.Boolean,System.Boolean,System.Boolean,System.Boolean)">
            <summary>
            Returns first found (not closest) entity that intersects with sphere
            </summary>
            <param name="sphere">Sphere to test (in world coordinates)</param>
            <param name="ignoreEntity0">Return value can't be this entity</param>
            <param name="ignoreEntity1">Return value can't be this entity</param>
            <param name="ignoreVoxelMaps">When true, voxels won't checked</param>
            <param name="volumetricTest">When false physical shape checking used. It is much more accurate, but slower</param>
            <param name="excludeEntitiesWithDisabledPhysics">When true, entities with disabled physics won't checked</param>
            <param name="ignoreFloatingObjects">When true, floating objects won't checked</param>
            <param name="ignoreHandWeapons">When true, hand weapons (tools) won't checked</param>
            <returns>Found entity matching conditions</returns>
        </member>
        <member name="M:VRage.ModAPI.IMyEntities.GetEntityById(System.Int64)">
            <summary>
            Returns entity with provided entityId
            </summary>
            <param name="entityId">EntityId</param>
            <returns>Entity with provided id, or null</returns>
        </member>
        <member name="M:VRage.ModAPI.IMyEntities.GetEntityById(System.Nullable{System.Int64})">
            <summary>
            Returns entity with provided entityId
            </summary>
            <param name="entityId"><see cref="P:VRage.ModAPI.IMyEntity.EntityId"/></param>
            <returns>Entity with provided id, or null</returns>
        </member>
        <member name="M:VRage.ModAPI.IMyEntities.EntityExists(System.Int64)">
            <summary>
            Returns if entity with provided name exists
            </summary>
            <param name="entityId"><see cref="P:VRage.ModAPI.IMyEntity.EntityId"/></param>
            <returns>True if entity exists</returns>
        </member>
        <member name="M:VRage.ModAPI.IMyEntities.EntityExists(System.Nullable{System.Int64})">
            <summary>
            Returns if entity with provided name exists
            </summary>
            <param name="entityId"><see cref="P:VRage.ModAPI.IMyEntity.EntityId"/></param>
            <returns>True if entity exists</returns>
        </member>
        <member name="M:VRage.ModAPI.IMyEntities.GetEntityByName(System.String)">
            <summary>
            Returns entity with provided name
            </summary>
            <param name="name"><see cref="P:VRage.ModAPI.IMyEntity.Name"/></param>
            <returns>Entity with registered Name or null</returns>
        </member>
        <member name="M:VRage.ModAPI.IMyEntities.SetTypeHidden(System.Type,System.Boolean)">
            <summary>
            Entities that inherit that type would be visible/invisible. 
            </summary>
            <param name="type">Type that class should inherit to be invisible, ex: IMyCubeGrid</param>
            <param name="hidden">Sets if inherited entities should be visible visible or not</param>
        </member>
        <member name="M:VRage.ModAPI.IMyEntities.IsTypeHidden(System.Type)">
            <summary>
            Gets whether entities that inherit type is visible or not. Example: <code>IsTypeHidden(typeof (IMyCubeGrid))</code>
            </summary>
            <param name="type"></param>
            <returns></returns>
        </member>
        <member name="M:VRage.ModAPI.IMyEntities.IsVisible(VRage.ModAPI.IMyEntity)">
            <summary>
            Gets whether entity is visible or not because of <see cref="M:VRage.ModAPI.IMyEntities.SetTypeHidden(System.Type,System.Boolean)"/>
            </summary>
            <returns>True when visible</returns>
        </member>
        <member name="M:VRage.ModAPI.IMyEntities.UnhideAllTypes">
            <summary>
            Revert all changes to default. Make all entities visible, that were hidden because of <see cref="M:VRage.ModAPI.IMyEntities.SetTypeHidden(System.Type,System.Boolean)"/>  
            </summary>
        </member>
        <member name="M:VRage.ModAPI.IMyEntities.RemapObjectBuilderCollection(System.Collections.Generic.IEnumerable{VRage.ObjectBuilders.MyObjectBuilder_EntityBase})">
            <summary>
            Remaps this entity's <see cref="P:VRage.ModAPI.IMyEntity.EntityId"/> and <see cref="P:VRage.ModAPI.IMyEntity.Name"/> to a new values.
            </summary>
            <param name="objectBuilders">ObjectBuilders that should be remapped</param>
        </member>
        <member name="M:VRage.ModAPI.IMyEntities.RemapObjectBuilder(VRage.ObjectBuilders.MyObjectBuilder_EntityBase)">
            <summary>
            Remaps this entity's <see cref="P:VRage.ModAPI.IMyEntity.EntityId"/> and <see cref="P:VRage.ModAPI.IMyEntity.Name"/> to a new values.
            </summary>
            <param name="objectBuilder">ObjectBuilder that should be remapped</param>
        </member>
        <member name="M:VRage.ModAPI.IMyEntities.CreateFromObjectBuilderNoinit(VRage.ObjectBuilders.MyObjectBuilder_EntityBase)">
            <summary>
            Create new entity from objectBuilder, but doesn't call <b>Init(MyObjectBuilder_EntityBase objectBuilder)</b>
            </summary>
            <param name="objectBuilder"></param>
            <returns></returns>
        </member>
        <member name="M:VRage.ModAPI.IMyEntities.EnableEntityBoundingBoxDraw(VRage.ModAPI.IMyEntity,System.Boolean,System.Nullable{VRageMath.Vector4},System.Single,System.Nullable{VRageMath.Vector3})">
            <summary>
            Draw bounding box around entity
            </summary>
            <param name="entity">That should have visible bounding box</param>
            <param name="enable">When true, bounding box start draw around entity</param>
            <param name="color">Color of lines</param>
            <param name="lineWidth">With of lines</param>
            <param name="inflateAmount">Distance from original bounding box, from each side in meters</param>
        </member>
        <member name="M:VRage.ModAPI.IMyEntities.GetEntity(System.Func{VRage.ModAPI.IMyEntity,System.Boolean})">
            <summary>
            Get first entity that matching condition
            </summary>
            <param name="match">When return true, this entity would be used as a return value</param>
            <returns>First matching condition entity</returns>
        </member>
        <member name="M:VRage.ModAPI.IMyEntities.GetEntities(System.Collections.Generic.HashSet{VRage.ModAPI.IMyEntity},System.Func{VRage.ModAPI.IMyEntity,System.Boolean})">
            <summary>
            Get all entities matching condition
            </summary>
            <param name="entities">This set would receive results. Can be null, but then collect function should always return false</param>
            <param name="collect">When it is null or returns true, provided hashset adds entity</param>
        </member>
        <member name="M:VRage.ModAPI.IMyEntities.GetIntersectionWithSphere(VRageMath.BoundingSphereD@,VRage.ModAPI.IMyEntity,VRage.ModAPI.IMyEntity,System.Boolean,System.Boolean)">
            <summary>
            Returns list of entities that intersects with sphere
            </summary>
            <param name="sphere">Sphere to test (in world coordinates)</param>
            <param name="ignoreEntity0">Returned list can't contain this entity</param>
            <param name="ignoreEntity1">Returned list can't contain this entity</param>
            <param name="ignoreVoxelMaps">When true, voxels won't checked</param>
            <param name="volumetricTest">When false physical shape checking used. It is much more accurate, but slower</param>
            <returns>List of entities inside of sphere</returns>
            <remarks>Returned list may be used by system, next call if this or other similar function will clear list, so if you need to store data for long time, copy data from it. Also clean list, after you don't need it anymore</remarks>
        </member>
        <member name="M:VRage.ModAPI.IMyEntities.GetEntitiesInAABB(VRageMath.BoundingBoxD@)">
            <summary>
            Returns list of entities that intersects with BoundingBox.
            This function will return CubeBlocks. This function works slower than <see cref="M:VRage.ModAPI.IMyEntities.GetTopMostEntitiesInBox(VRageMath.BoundingBoxD@)"/>
            </summary>
            <param name="boundingBox">Bounding box in world coordinates</param>
            <returns>New list of entities</returns>
            <remarks>Same as <see cref="M:VRage.ModAPI.IMyEntities.GetElementsInBox(VRageMath.BoundingBoxD@)"/></remarks>
        </member>
        <member name="M:VRage.ModAPI.IMyEntities.GetEntitiesInSphere(VRageMath.BoundingSphereD@)">
            <summary>
            Returns list of entities that intersects with sphere.
            This function will return CubeBlocks. This function works slower than <see cref="M:VRage.ModAPI.IMyEntities.GetTopMostEntitiesInSphere(VRageMath.BoundingSphereD@)"/>
            </summary>
            <param name="boundingSphere">Bounding sphere in world coordinates</param>
            <returns>New list of entities</returns>
        </member>
        <member name="M:VRage.ModAPI.IMyEntities.GetElementsInBox(VRageMath.BoundingBoxD@)">
            <summary>
            Returns list of entities that intersects with BoundingBox.
            This function will return CubeBlocks. This function works slower than <see cref="M:VRage.ModAPI.IMyEntities.GetTopMostEntitiesInBox(VRageMath.BoundingBoxD@)"/>
            </summary>
            <param name="boundingBox">Bounding box in world coordinates</param>
            <returns>New list of entities</returns>
            <remarks>Same as <see cref="M:VRage.ModAPI.IMyEntities.GetEntitiesInAABB(VRageMath.BoundingBoxD@)"/></remarks>
        </member>
        <member name="M:VRage.ModAPI.IMyEntities.GetTopMostEntitiesInSphere(VRageMath.BoundingSphereD@)">
            <summary>
            Returns list of `TopMost` entities that intersects with sphere.
            This function won't return CubeBlocks. Use <see cref="M:VRage.ModAPI.IMyEntities.GetEntitiesInSphere(VRageMath.BoundingSphereD@)"/> to retrieve CubeBlocks also.  
            </summary>
            <param name="boundingSphere">Bounding sphere in world coordinates</param>
            <returns>New list of entities</returns>
        </member>
        <member name="M:VRage.ModAPI.IMyEntities.GetTopMostEntitiesInBox(VRageMath.BoundingBoxD@)">
            <summary>
            Returns list of `TopMost` entities that intersects with bounding box.
            This function won't return CubeBlocks. Use <see cref="M:VRage.ModAPI.IMyEntities.GetElementsInBox(VRageMath.BoundingBoxD@)"/> to retrieve CubeBlocks also.  
            </summary>
            <param name="boundingBox">Bounding box in world coordinates</param>
            <returns>New list of entities</returns>
        </member>
        <member name="M:VRage.ModAPI.IMyEntities.CreateFromObjectBuilderParallel(VRage.ObjectBuilders.MyObjectBuilder_EntityBase,System.Boolean,System.Action{VRage.ModAPI.IMyEntity})">
            <summary>
            Creates and asynchronously initializes and entity.
            </summary>
            <param name="objectBuilder">Object builder of grid</param>
            <param name="addToScene">Call <see cref="M:VRage.ModAPI.IMyEntities.AddEntity(VRage.ModAPI.IMyEntity,System.Boolean)"/> and call OnAddedToScene</param>
            <param name="completionCallback">Callback called in main thread. </param>
            <returns>Create <b>but not inited yet</b> entity. Entity would be inited correctly after callback trigger</returns>
        </member>
        <member name="T:VRage.ModAPI.EntityFlags">
            <summary>
            Entity flags.
            </summary>
        </member>
        <member name="F:VRage.ModAPI.EntityFlags.None">
            <summary>
            No flags
            </summary>
        </member>
        <member name="F:VRage.ModAPI.EntityFlags.Visible">
            <summary>
            Specifies whether draw this entity or not.
            </summary>
        </member>
        <member name="F:VRage.ModAPI.EntityFlags.Save">
            <summary>
            Specifies whether save entity when saving sector or not
            </summary>
        </member>
        <member name="F:VRage.ModAPI.EntityFlags.Near">
            <summary>
            Specifies whether entity is "near", near entities are cockpit and weapons, these entities are rendered in special way
            </summary>
        </member>
        <member name="F:VRage.ModAPI.EntityFlags.NeedsUpdate">
            <summary>
            On this entity and its children will be called UpdateBeforeSimulation and UpdateAfterSimulation each frame
            </summary>
        </member>
        <member name="F:VRage.ModAPI.EntityFlags.NeedsResolveCastShadow">
            <summary>
            Flags would be delivered to render component. <see cref="F:VRageRender.RenderFlags.NeedsResolveCastShadow"/>
            </summary>
        </member>
        <member name="F:VRage.ModAPI.EntityFlags.FastCastShadowResolve">
            <summary>
            Flags would be delivered to render component. <see cref="F:VRageRender.RenderFlags.FastCastShadowResolve"/>
            </summary>
        </member>
        <member name="F:VRage.ModAPI.EntityFlags.SkipIfTooSmall">
            <summary>
            Flags would be delivered to render component. <see cref="F:VRageRender.RenderFlags.SkipIfTooSmall"/>
            </summary>
        </member>
        <member name="F:VRage.ModAPI.EntityFlags.NeedsUpdate10">
            <summary>
            Entity updated each 10th frame
            </summary>
        </member>
        <member name="F:VRage.ModAPI.EntityFlags.NeedsUpdate100">
            <summary>
            Entity updated each 100th frame
            </summary>
        </member>
        <member name="F:VRage.ModAPI.EntityFlags.NeedsDraw">
            <summary>
            Draw method of this entity will be called when suitable. <see cref="P:VRage.Game.Components.MyRenderComponentBase.NeedsDraw"/>
            </summary>
        </member>
        <member name="F:VRage.ModAPI.EntityFlags.InvalidateOnMove">
            <summary>
            If object is moved, invalidate its renderobjects (update render)
            </summary>
        </member>
        <member name="F:VRage.ModAPI.EntityFlags.Sync">
            <summary>
            Synchronize object during multiplayer
            </summary>
        </member>
        <member name="F:VRage.ModAPI.EntityFlags.NeedsDrawFromParent">
            <summary>
            Draw method of this entity will be called when suitable and only from parent
            </summary>
        </member>
        <member name="F:VRage.ModAPI.EntityFlags.ShadowBoxLod">
            <summary>
            Draw LOD shadow as box
            </summary>
        </member>
        <member name="F:VRage.ModAPI.EntityFlags.Transparent">
            <summary>
            Render the entity using dithering to simulate transparency
            </summary>
        </member>
        <member name="F:VRage.ModAPI.EntityFlags.NeedsUpdateBeforeNextFrame">
            <summary>
            Entity updated once before first frame.
            </summary>
        </member>
        <member name="F:VRage.ModAPI.EntityFlags.DrawOutsideViewDistance">
            <summary>
            Flags would be delivered to render component. <see cref="F:VRageRender.RenderFlags.DrawOutsideViewDistance"/>
            </summary>
        </member>
        <member name="F:VRage.ModAPI.EntityFlags.IsGamePrunningStructureObject">
            <summary>
            Can be added, removed, or updated in <b>Sandbox.Game.Entities.MyGamePruningStructure</b>
            </summary>
        </member>
        <member name="F:VRage.ModAPI.EntityFlags.NeedsWorldMatrix">
            <summary>
            If child, its world matrix must be always updated
            </summary>
        </member>
        <member name="F:VRage.ModAPI.EntityFlags.IsNotGamePrunningStructureObject">
            <summary>
            Do not use in prunning, even though it is a root entity
            </summary>
        </member>
        <member name="F:VRage.ModAPI.EntityFlags.NeedsSimulate">
            <summary>
            Entity has special simulation update. <see cref="F:VRage.ModAPI.MyEntityUpdateEnum.SIMULATE"/>
            </summary>
        </member>
        <member name="F:VRage.ModAPI.EntityFlags.UpdateRender">
            <summary>
            Entity call <see cref="M:VRage.Game.Components.MyRenderComponentBase.UpdateRenderObject(System.Boolean,System.Boolean)"/> on OnAddedToScene
            </summary>
        </member>
        <member name="F:VRage.ModAPI.EntityFlags.NeedsUpdateAfter">
            <summary>
            On this entity and its children will be called UpdateAfterSimulation each frame
            </summary>
        </member>
        <member name="F:VRage.ModAPI.MyEntityUpdateEnum.BEFORE_NEXT_FRAME">
            <summary>
            Separate update performed once before any other updates are called.
            </summary>
        </member>
        <member name="P:VRage.ModAPI.IMyEntity.Physics">
            <summary>
            Gets or sets physics for object
            </summary>
        </member>
        <member name="P:VRage.ModAPI.IMyEntity.PositionComp">
            <summary>
            Gets or sets position provider logic
            </summary>
        </member>
        <member name="P:VRage.ModAPI.IMyEntity.Render">
            <summary>
            Gets or sets render logic
            </summary>
        </member>
        <member name="P:VRage.ModAPI.IMyEntity.GameLogic">
            <summary>
            Gets or sets game logic for object.
            If there is more than 1 game logic attached it should be wrapped into <b>MyCompositeGameLogicComponent</b>.
            </summary>
            <seealso cref="T:VRage.Game.Components.MyGameLogicComponent"/>
        </member>
        <member name="P:VRage.ModAPI.IMyEntity.Hierarchy">
            <summary>
            Gets or sets Hierarchy component
            </summary>
        </member>
        <member name="P:VRage.ModAPI.IMyEntity.SyncObject">
            <summary>
            Gets SyncObject used for synchronizing data over network with <b>VRage.Sync.Sync</b>
            </summary>
        </member>
        <member name="P:VRage.ModAPI.IMyEntity.Storage">
            <summary>
            Custom storage for mods. Shared with all mods.
            </summary>
            <remarks>Not synced, but saved with blueprints.
            Only use set accessor if value is null.
            <code> Entity.Storage = new MyModStorageComponent(); </code>
            </remarks>
        </member>
        <member name="P:VRage.ModAPI.IMyEntity.Flags">
            <summary>
            Gets or set some behavior of entity. <see cref="T:VRage.ModAPI.EntityFlags"/>
            </summary>
        </member>
        <member name="P:VRage.ModAPI.IMyEntity.EntityId">
            <summary>
            Uniq id of entity. 
            </summary>
            <seealso cref="T:VRage.ModAPI.IMyEntities"/>
        </member>
        <member name="P:VRage.ModAPI.IMyEntity.Name">
            <summary>
            Uniq name of entity. Can be used to find entity by name
            </summary>
        </member>
        <member name="M:VRage.ModAPI.IMyEntity.GetFriendlyName">
            <summary>
            Not used. Actually not a friendly name
            </summary>
            <returns>String.Empty or "MyVoxelMap"</returns>
        </member>
        <member name="M:VRage.ModAPI.IMyEntity.Close">
            <summary>
            This method marks this entity for close which means, that Close
            will be called after all entities are updated
            </summary>
        </member>
        <member name="P:VRage.ModAPI.IMyEntity.MarkedForClose">
            <summary>
            Checked if <see cref="M:VRage.ModAPI.IMyEntity.Close"/> was called
            </summary>
        </member>
        <member name="M:VRage.ModAPI.IMyEntity.Delete">
            <summary>
            Performs real cleaning of entity. Should be called by game. Modders should prefer <see cref="M:VRage.ModAPI.IMyEntity.Close"/> method.  
            </summary>
        </member>
        <member name="P:VRage.ModAPI.IMyEntity.DebugAsyncLoading">
            <summary>
            Used for internal usage. Modders should not use it. Will be eventually removed
            </summary>
        </member>
        <member name="M:VRage.ModAPI.IMyEntity.GetObjectBuilder(System.Boolean)">
            <summary>
            Returns object builder - object representing block state, and allows restore it. Used in game save, or syncing over network.
            </summary>
            <param name="copy">When true, <see cref="P:VRage.ModAPI.IMyEntity.Name"/> won't be saved. Copy true comes only from MyGridClipboard/MyFloatingObjectClipboard/MyVoxelClipboard</param>
            <returns>Object builder</returns>
        </member>
        <member name="P:VRage.ModAPI.IMyEntity.Save">
            <summary>
            Gets or sets <see cref="F:VRage.ModAPI.EntityFlags.Save"/>. Entity won't be saved if <see cref="P:VRage.ModAPI.IMyEntity.Save"/> is false
            </summary>
        </member>
        <member name="P:VRage.ModAPI.IMyEntity.PersistentFlags">
            <summary>
            Gets or sets persistent flags that are used in rendering.
            </summary>
        </member>
        <member name="E:VRage.ModAPI.IMyEntity.OnClose">
            <summary>
            Called when <see cref="M:VRage.ModAPI.IMyEntity.Close"/> is called. Order 1) <see cref="E:VRage.ModAPI.IMyEntity.OnMarkForClose"/> 2) <see cref="E:VRage.ModAPI.IMyEntity.OnClosing"/> 3)  <see cref="E:VRage.ModAPI.IMyEntity.OnClose"/>. 
            </summary>
            <remarks>Modders should prefer <see cref="E:VRage.ModAPI.IMyEntity.OnMarkForClose"/> or <see cref="E:VRage.ModAPI.IMyEntity.OnClosing"/></remarks>
        </member>
        <member name="E:VRage.ModAPI.IMyEntity.OnClosing">
            <summary>
            Called when <see cref="M:VRage.ModAPI.IMyEntity.Close"/> is called. Order 1) <see cref="E:VRage.ModAPI.IMyEntity.OnMarkForClose"/> 2) <see cref="E:VRage.ModAPI.IMyEntity.OnClosing"/> 3)  <see cref="E:VRage.ModAPI.IMyEntity.OnClose"/>. 
            </summary>
            <remarks>Modders should prefer <see cref="E:VRage.ModAPI.IMyEntity.OnMarkForClose"/> or <see cref="E:VRage.ModAPI.IMyEntity.OnClosing"/></remarks>
        </member>
        <member name="E:VRage.ModAPI.IMyEntity.OnMarkForClose">
            <summary>
            Called when <see cref="M:VRage.ModAPI.IMyEntity.Close"/> is called. Order 1) <see cref="E:VRage.ModAPI.IMyEntity.OnMarkForClose"/> 2) <see cref="E:VRage.ModAPI.IMyEntity.OnClosing"/> 3)  <see cref="E:VRage.ModAPI.IMyEntity.OnClose"/>. 
            </summary>
            <remarks>Modders should prefer <see cref="E:VRage.ModAPI.IMyEntity.OnMarkForClose"/> or <see cref="E:VRage.ModAPI.IMyEntity.OnClosing"/>. This event may not be invoked at all, when calling MyEntities.CloseAll, marking is bypassed</remarks>
        </member>
        <member name="M:VRage.ModAPI.IMyEntity.BeforeSave">
            <summary>
            Called before method GetObjectBuilder, when saving sector
            </summary>
        </member>
        <member name="P:VRage.ModAPI.IMyEntity.Model">
            <summary>
            Gets model of block
            </summary>
        </member>
        <member name="P:VRage.ModAPI.IMyEntity.ModelCollision">
            <summary>
            Gets collision model of block
            </summary>
        </member>
        <member name="P:VRage.ModAPI.IMyEntity.Synchronized">
            <summary>
            Gets or sets if the entity should be synced.
            </summary>
        </member>
        <member name="P:VRage.ModAPI.IMyEntity.NeedsUpdate">
            <summary>
            Gets or sets how often the entity should be updated.
            </summary>
        </member>
        <member name="M:VRage.ModAPI.IMyEntity.GetTopMostParent(System.Type)">
            <summary>
            Gets top most <see cref="P:VRage.ModAPI.IMyEntity.Parent"/> of specified type.
            Top most is entity that doesn't have parent (of specified type)
            </summary>
            <param name="type">Type of parent. When type is null, type check disabled</param>
            <returns>Entity</returns>
        </member>
        <member name="P:VRage.ModAPI.IMyEntity.Parent">
            <summary>
            Gets parent of entity or null, if this entity doesn't have parent.
            Ex: character sitting in cockpit, has parent - cockpit, cockpit has parent - cube grid, connected grids also has main grid, which would be parent for other grids.
            </summary>
        </member>
        <member name="P:VRage.ModAPI.IMyEntity.LocalMatrix">
            <summary>
            Gets or sets local matrix.
            When entity, has parent, it's world coordinates are calculated from localMatrix and parent world matrix
            </summary>
        </member>
        <member name="M:VRage.ModAPI.IMyEntity.SetLocalMatrix(VRageMath.Matrix,System.Object)">
            <summary>
            Sets local matrix.
            When entity, has parent, it's world coordinates are calculated from localMatrix and parent world matrix
            </summary>
            <param name="localMatrix">New matrix</param>
            <param name="source">Object that caused this event. Not used in anyway</param>
        </member>
        <member name="M:VRage.ModAPI.IMyEntity.GetChildren(System.Collections.Generic.List{VRage.ModAPI.IMyEntity},System.Func{VRage.ModAPI.IMyEntity,System.Boolean})">
            <summary>
            Gets children of entity. Child - entity, who's <see cref="P:VRage.ModAPI.IMyEntity.Parent"/> is this entity
            </summary>
            <param name="children">List, that would receive results</param>
            <param name="collect">When returns true - child added to list</param>
        </member>
        <member name="M:VRage.ModAPI.IMyEntity.GetSubpart(System.String)">
            <summary>
            Gets subpart by subpart name
            </summary>
            <param name="name">Name of subpart. Keep in mind that subpart names, should not start with `subpart_`</param>
            <returns>Subpart if it is found, or crashes if subpart not found</returns>
            <remarks>If you press Alt+11, enable `Debug draw` and `Model dummies` then you'll see all subpart names. </remarks>
        </member>
        <member name="M:VRage.ModAPI.IMyEntity.TryGetSubpart(System.String,VRage.Game.Entity.MyEntitySubpart@)">
            <summary>
            Gets subpart by subpart name
            </summary>
            <param name="name">Name of subpart. Keep in mind that subpart names, should not start with `subpart_`</param>
            <param name="subpart">Subpart if it is found</param>
            <returns>True if subpart is found</returns>
            <remarks>If you press Alt+11, enable `Debug draw` and `Model dummies` then you'll see all subpart names. </remarks>
        </member>
        <member name="P:VRage.ModAPI.IMyEntity.NearFlag">
            <summary>
            Gets or sets flag <see cref="F:VRage.ModAPI.EntityFlags.Near"/>
            </summary>
        </member>
        <member name="P:VRage.ModAPI.IMyEntity.CastShadows">
            <summary>
            Gets or sets flag <see cref="F:VRage.ObjectBuilders.MyPersistentEntityFlags2.CastShadows"/>
            </summary>
        </member>
        <member name="P:VRage.ModAPI.IMyEntity.FastCastShadowResolve">
            <summary>
            Gets or sets flag <see cref="F:VRage.ObjectBuilders.MyPersistentEntityFlags2.CastShadows"/>
            </summary>
        </member>
        <member name="P:VRage.ModAPI.IMyEntity.NeedsResolveCastShadow">
            <summary>
            Gets or sets flag <see cref="F:VRage.ModAPI.EntityFlags.NeedsResolveCastShadow"/>
            </summary>
        </member>
        <member name="M:VRage.ModAPI.IMyEntity.GetDiffuseColor">
            <summary>
            Gets render diffuse color
            </summary>
            <returns>Diffuse color</returns>
        </member>
        <member name="P:VRage.ModAPI.IMyEntity.MaxGlassDistSq">
            <summary>
            Not used in game anymore
            </summary>
        </member>
        <member name="P:VRage.ModAPI.IMyEntity.NeedsDraw">
            <summary>
            Gets or sets flag <see cref="F:VRage.ModAPI.EntityFlags.NeedsDraw"/>
            </summary>
        </member>
        <member name="P:VRage.ModAPI.IMyEntity.NeedsDrawFromParent">
            <summary>
            Gets or sets flag <see cref="F:VRage.ModAPI.EntityFlags.NeedsDrawFromParent"/>
            </summary>
        </member>
        <member name="P:VRage.ModAPI.IMyEntity.Transparent">
            <summary>
            Gets or sets <see cref="F:VRage.Game.Components.MyRenderComponentBase.Transparency"/>. When setting true entity would be 25% transparent   
            </summary>
        </member>
        <member name="P:VRage.ModAPI.IMyEntity.ShadowBoxLod">
            <summary>
            Gets or sets flag <see cref="P:VRage.Game.Components.MyRenderComponentBase.ShadowBoxLod"/>
            </summary>
        </member>
        <member name="P:VRage.ModAPI.IMyEntity.SkipIfTooSmall">
            <summary>
            Gets or sets flag <see cref="F:VRage.ModAPI.EntityFlags.SkipIfTooSmall"/>
            </summary>
        </member>
        <member name="P:VRage.ModAPI.IMyEntity.Visible">
            <summary>
            Gets or sets flag <see cref="P:VRage.Game.Components.MyRenderComponentBase.Visible"/>
            </summary>
        </member>
        <member name="M:VRage.ModAPI.IMyEntity.IsVisible">
            <summary>
            Gets or result of function <see cref="M:VRage.Game.Components.MyRenderComponentBase.IsVisible"/>. Function inside check for <see cref="M:VRage.ModAPI.IMyEntities.IsVisible(VRage.ModAPI.IMyEntity)"/>
            </summary>
            <returns>True if entity should be drawn</returns>
        </member>
        <member name="P:VRage.ModAPI.IMyEntity.NeedsWorldMatrix">
            <summary>
            Gets or sets if <see cref="P:VRage.ModAPI.IMyEntity.WorldMatrix"/> should be calculated when parent WorldMatrix is changed.
            </summary>
            <remarks>Enabling it on big amount entities may lower simulation speed</remarks>
        </member>
        <member name="M:VRage.ModAPI.IMyEntity.DebugDraw">
            <summary>
            Calls debug draw of entity
            </summary>
        </member>
        <member name="M:VRage.ModAPI.IMyEntity.DebugDrawInvalidTriangles">
            <summary>
            Calls special debug draw, that highlighting invalid triangles in model
            </summary>
        </member>
        <member name="M:VRage.ModAPI.IMyEntity.EnableColorMaskForSubparts(System.Boolean)">
            <summary>
            Allows subparts have different color than their parent
            </summary>
            <param name="enable"></param>
        </member>
        <member name="M:VRage.ModAPI.IMyEntity.SetColorMaskForSubparts(VRageMath.Vector3)">
            <summary>
            Sets subparts custom col
            </summary>
            <param name="colorMaskHsv">Color</param>
        </member>
        <member name="M:VRage.ModAPI.IMyEntity.SetTextureChangesForSubparts(System.Collections.Generic.Dictionary{VRage.Utils.MyStringId,VRageRender.Messages.MyTextureChange})">
            <summary>
            Sets subparts custom skinning. Copy values from <see cref="P:VRage.Game.Components.MyRenderComponentBase.TextureChanges"/>, then change needed keys.
            You can retrieve values for exact skin with following code: <code>MyDefinitionManager.Static.GetAssetModifierDefinitionForRender(skinId);</code>
            </summary>
            <param name="value">Key - name of texture, value - path to texture files</param>
        </member>
        <member name="M:VRage.ModAPI.IMyEntity.SetTextureChangesForSubparts(System.Collections.Generic.Dictionary{System.String,VRageRender.Messages.MyTextureChange})">
            <summary>
            This calling is obsolete, use another version.
            </summary>
            <param name="value"></param>
        </member>
        <member name="M:VRage.ModAPI.IMyEntity.SetEmissiveParts(System.String,VRageMath.Color,System.Single)">
            <summary>
            Sets the emissive value of a specific emissive material on entity.
            </summary>
            <param name="emissiveName">The name of the emissive material (ie. "Emissive0")</param>
            <param name="emissivity">Level of emissivity (0 is off, 1 is full brightness)</param>
            <param name="emissivePartColor">Color to emit</param>
        </member>
        <member name="M:VRage.ModAPI.IMyEntity.SetEmissivePartsForSubparts(System.String,VRageMath.Color,System.Single)">
            <summary>
            Sets the emissive value of a specific emissive material on all entity subparts.
            </summary>
            <param name="emissiveName">The name of the emissive material (ie. "Emissive0")</param>
            <param name="emissivity">Level of emissivity (0 is off, 1 is full brightness).</param>
            <param name="emissivePartColor">Color to emit</param>
        </member>
        <member name="M:VRage.ModAPI.IMyEntity.GetDistanceBetweenCameraAndBoundingSphere">
            <summary>
            Distance from camera to bounding sphere of this phys object. Result is always positive, even if camera is inside the sphere. (in meters)
            </summary>
            <returns>Distance in meters</returns>
        </member>
        <member name="M:VRage.ModAPI.IMyEntity.GetDistanceBetweenCameraAndPosition">
            <summary>
            Distance from camera to position of entity.
            </summary>
            <returns>Distance in meters</returns>
        </member>
        <member name="M:VRage.ModAPI.IMyEntity.GetLargestDistanceBetweenCameraAndBoundingSphere">
            <summary>
            Largest distance from camera to bounding sphere of this phys object. Result is always positive, even if camera is inside the sphere.
            It's actually distance between camera and opposite side of the sphere
            </summary>
            <returns>Distance in meters</returns>
        </member>
        <member name="M:VRage.ModAPI.IMyEntity.GetSmallestDistanceBetweenCameraAndBoundingSphere">
            <summary>
            Smallest distance between camera and bounding sphere of this phys object. Result is always positive, even if camera is inside the sphere.
            </summary>
            <returns>Distance in meters</returns>
        </member>
        <member name="P:VRage.ModAPI.IMyEntity.InScene">
            <summary>
            Gets or set if grid is InScene. Objects that are not in scene are not updated and drawn.
            </summary>
        </member>
        <member name="M:VRage.ModAPI.IMyEntity.OnRemovedFromScene(System.Object)">
            <summary>
            Remove entity and it's children from scene: stops updates and render, deactivates physics. Usually called when entity deleted 
            </summary>
            <param name="source">Object that triggered removing from scene</param>
        </member>
        <member name="M:VRage.ModAPI.IMyEntity.OnAddedToScene(System.Object)">
            <summary>
            Adds entity to scene: init updates, render physics
            </summary>
            <param name="source">Object that triggered adding from scene</param>
        </member>
        <member name="P:VRage.ModAPI.IMyEntity.InvalidateOnMove">
            <summary>
            Gets if entity is invalidated on move
            When visual look of entity depends on position - then InvalidateOnMove should be true
            </summary>
        </member>
        <member name="M:VRage.ModAPI.IMyEntity.GetViewMatrix">
            <summary>
            Get normalized, inverted world matrix. Same as <see cref="M:VRage.ModAPI.IMyEntity.GetWorldMatrixNormalizedInv"/>, <see cref="P:VRage.ModAPI.IMyEntity.WorldMatrixNormalizedInv"/>
            </summary>
            <returns>Matrix</returns>
        </member>
        <member name="M:VRage.ModAPI.IMyEntity.GetWorldMatrixNormalizedInv">
            <summary>
            Get normalized, inverted world matrix. Same as <see cref="M:VRage.ModAPI.IMyEntity.GetViewMatrix"/>, <see cref="P:VRage.ModAPI.IMyEntity.WorldMatrixNormalizedInv"/>
            </summary>
            <returns>Matrix</returns>
        </member>
        <member name="M:VRage.ModAPI.IMyEntity.SetWorldMatrix(VRageMath.MatrixD,System.Object)">
            <summary>
            Sets world matrix of entity.
            </summary>
            <param name="worldMatrix">New world matrix</param>
            <param name="source">Object that triggered set of new matrix</param>
        </member>
        <member name="P:VRage.ModAPI.IMyEntity.WorldMatrix">
            <summary>
            Gets or sets world matrix. 
            </summary>
            <seealso cref="T:VRageMath.MatrixD"/>
        </member>
        <member name="P:VRage.ModAPI.IMyEntity.WorldMatrixInvScaled">
            <summary>
            Get scaled, inverted world matrix. Same as <see cref="M:VRage.ModAPI.IMyEntity.GetViewMatrix"/>, <see cref="M:VRage.ModAPI.IMyEntity.GetWorldMatrixNormalizedInv"/>, <see cref="P:VRage.ModAPI.IMyEntity.WorldMatrixNormalizedInv"/>, but not normalized
            </summary>
            <returns>Matrix</returns>
        </member>
        <member name="P:VRage.ModAPI.IMyEntity.WorldMatrixNormalizedInv">
            <summary>
            Get normalized, inverted world matrix. Same as <see cref="M:VRage.ModAPI.IMyEntity.GetViewMatrix"/>, <see cref="P:VRage.ModAPI.IMyEntity.WorldMatrixNormalizedInv"/>
            </summary>
            <returns>Matrix</returns>
        </member>
        <member name="M:VRage.ModAPI.IMyEntity.SetPosition(VRageMath.Vector3D)">
            <summary>
            Set WorldMatrix's <see cref="P:VRageMath.MatrixD.Translation"/>. Moves entity.
            </summary>
            <param name="pos">New position of entity</param>
            <seeaslo cref="M:VRage.ModAPI.IMyEntity.Teleport(VRageMath.MatrixD,System.Object,System.Boolean)"/>
        </member>
        <member name="M:VRage.ModAPI.IMyEntity.Teleport(VRageMath.MatrixD,System.Object,System.Boolean)">
            <summary>
            When moving entity over large distances or when entity has children, using this method preferred over <see cref="M:VRage.ModAPI.IMyEntity.SetPosition(VRageMath.Vector3D)"/>
            </summary>
            <param name="pos">Teleport destination</param>
            <param name="source">Object that triggered </param>
            <param name="ignoreAssert">Do extra validation</param>
        </member>
        <member name="M:VRage.ModAPI.IMyEntity.GetIntersectionWithLine(VRageMath.LineD@,System.Nullable{VRage.Game.Models.MyIntersectionResultLineTriangleEx}@,VRage.Game.Components.IntersectionFlags)">
            <summary>
            Get intersection of model with provided line
            </summary>
            <param name="line">Line that should intersect model</param>
            <param name="tri">Returns model first triangle that intersects</param>
            <param name="flags">Mode of work</param>
            <returns>True when line intersects models</returns>
        </member>
        <member name="M:VRage.ModAPI.IMyEntity.GetIntersectionWithLineAndBoundingSphere(VRageMath.LineD@,System.Single)">
            <summary>
            Calculates intersection of line with any bounding sphere in this model instance. Center of the bounding sphere will be returned.
            It takes boundingSphereRadiusMultiplier argument which serves for extending the influence (radius) for interaction with line. 
            </summary>
            <param name="line">Line to check</param>
            <param name="boundingSphereRadiusMultiplier">Bounding sphere radius would be multiplied by this value</param>
            <returns>Position of intersection if of line and bounding sphere</returns>
        </member>
        <member name="M:VRage.ModAPI.IMyEntity.GetIntersectionWithSphere(VRageMath.BoundingSphereD@)">
            <summary>
            Return true if object intersects specified sphere.
            </summary>
            <param name="sphere">Sphere to check</param>
            <returns>True if intersects</returns>
        </member>
        <member name="M:VRage.ModAPI.IMyEntity.GetIntersectionWithAABB(VRageMath.BoundingBoxD@)">
            <summary>
            Return true if object intersects specified bounding box.
            </summary>
            <param name="aabb">Bounding box to check</param>
            <returns>True if intersects</returns>
        </member>
        <member name="M:VRage.ModAPI.IMyEntity.GetTrianglesIntersectingSphere(VRageMath.BoundingSphere@,System.Nullable{VRageMath.Vector3},System.Nullable{System.Single},System.Collections.Generic.List{VRage.Utils.MyTriangle_Vertex_Normals},System.Int32)">
            <summary>
            Return list of triangles intersecting specified sphere. Angle between every triangleVertexes normal vector and 'referenceNormalVector'
            is calculated, and if more than 'maxAngle', we ignore such triangleVertexes.
            Triangles are returned in 'retTriangles', and this list must be preallocated!
            IMPORTANT: Sphere must be in model space, so don't transform it!
            </summary>
            <param name="sphere">Sphere to check</param>
            <param name="referenceNormalVector">Used in filtering triangles</param>
            <param name="maxAngle">Max angle between referenceNormalVector and every triangleVertex of model</param>
            <param name="retTriangles">Triangles would be added here</param>
            <param name="maxNeighbourTriangles">Limit of added triangles</param>
        </member>
        <member name="M:VRage.ModAPI.IMyEntity.DoOverlapSphereTest(System.Single,VRageMath.Vector3D)">
            <summary>
            Checks if intersects Works only with <see cref="T:VRage.ModAPI.IMyVoxelBase"/>
            </summary>
            <param name="sphereRadius">Radius of sphere</param>
            <param name="spherePos">World position</param>
            <returns>True if intersects</returns>
        </member>
        <member name="P:VRage.ModAPI.IMyEntity.IsVolumetric">
            <summary>
            Always returns false
            </summary>
        </member>
        <member name="P:VRage.ModAPI.IMyEntity.LocalAABB">
            <summary>
            Gets or sets local axis aligned bounding box. Same as <see cref="P:VRage.ModAPI.IMyEntity.LocalAABBHr"/>, <see cref="P:VRage.Game.Components.MyPositionComponentBase.LocalAABB"/>
            </summary>
        </member>
        <member name="P:VRage.ModAPI.IMyEntity.LocalAABBHr">
            <summary>
            Gets local axis aligned bounding box. Same as <see cref="P:VRage.ModAPI.IMyEntity.LocalAABB"/>, <see cref="P:VRage.Game.Components.MyPositionComponentBase.LocalAABB"/>
            </summary>
        </member>
        <member name="P:VRage.ModAPI.IMyEntity.LocalVolume">
            <summary>
            Gets or sets local volume. Same as <see cref="P:VRage.Game.Components.MyPositionComponentBase.LocalVolume"/>
            </summary>
        </member>
        <member name="P:VRage.ModAPI.IMyEntity.LocalVolumeOffset">
            <summary>
            Gets or sets local volume offset. Same as <see cref="P:VRage.Game.Components.MyPositionComponentBase.LocalVolumeOffset"/>
            </summary>
        </member>
        <member name="M:VRage.ModAPI.IMyEntity.GetInventory">
            <summary>
            Simply get the MyInventoryBase component stored in this entity.
            </summary>
            <returns>Null, or first inventory</returns>
        </member>
        <member name="M:VRage.ModAPI.IMyEntity.GetInventory(System.Int32)">
            <summary>
            Search for inventory component with matching index.
            </summary>
            <param name="index">Index of inventory, starting from 0</param>
            <returns>Null, or inventory at matching index</returns>
        </member>
        <member name="E:VRage.ModAPI.IMyEntity.OnPhysicsChanged">
            <summary>
            Called when havok rigid body physics are changed: inited, closed, modified.
            </summary>
        </member>
        <member name="M:VRage.ModAPI.IMyEntity.UpdateGamePruningStructure">
            <summary>
            Update position of entity in MyGamePruningStructure. Calls: <code>MyGamePruningStructure.Move(this)</code>
            </summary>
        </member>
        <member name="P:VRage.ModAPI.IMyEntity.DisplayName">
            <summary>
            Gets or sets user friendly name of entity
            </summary>
        </member>
        <member name="T:VRage.ModAPI.IMyGridConveyorSystem">
            <summary>
            ModAPI interface giving access to grid-group conveyor system
            </summary>
        </member>
        <member name="M:VRage.ModAPI.IMyGridConveyorSystem.PullItem(VRage.Game.MyDefinitionId,System.Nullable{VRage.MyFixedPoint},VRage.ModAPI.IMyEntity,VRage.Game.ModAPI.IMyInventory,System.Boolean)">
            <summary>
            Implements pull item with possible optional remove. Computation part of this method is done in parallel, so if you call it on new conveyor network, it will not pull anything for the first time.
            So the best approach is to call it in some steps, so it does not matter that you don't get result instantly. Be careful not to call it every frame as it can degrade performance.
            </summary>
            <param name="itemDefinitionId">Item id</param>
            <param name="amount">Amount to transfer</param>
            <param name="startingBlock">starting block</param>
            <param name="destinationInventory">destination inventory</param>
            <param name="remove">if true item is removed from inventories instead of transfer</param>        
            <returns>amount of item pulled</returns>
        </member>
        <member name="M:VRage.ModAPI.IMyGridConveyorSystem.PushGenerateItem(VRage.Game.MyDefinitionId,System.Nullable{VRage.MyFixedPoint},VRage.MyFixedPoint@,VRage.ModAPI.IMyEntity,System.Boolean)">
            <summary>
            Implements push item from one source block. Item will be generated from source.
            </summary>
            <param name="sourceBlock">Source block</param>
            <param name="itemDefinitionId">Item type to be transferred</param>
            <param name="amount">Amount of items to transfer</param>
            <param name="transferredAmount">Amount of items that was transferred</param>
            <param name="partialPush">If true, items fill be pushed even though not all can fit the conveyor system. Items that can't fit will be thrown away. If false, items will be pushed into system only when all of them fits.</param>        
            <returns>Returns info whether all items could fit in target network or not.</returns>
        </member>
        <member name="T:VRage.ModAPI.IMyRemapHelper">
            <summary>
            ModAPI interface giving access to changing id and names of entities 
            </summary>
        </member>
        <member name="M:VRage.ModAPI.IMyRemapHelper.RemapEntityId(System.Int64)">
            <summary>
            Returns a new entity ID for the entity with the given old entity ID.
            The function will return the same new entityId only if the saveMapping argument is set to true.
            </summary>
            <param name="oldEntityId">Old entity id</param>
            <returns>New entity id</returns>
        </member>
        <member name="M:VRage.ModAPI.IMyRemapHelper.RemapEntityName(System.Int64)">
            <summary>
            Returns a new entity name for the entity with the given new entity name.
            The function will return the same new name only if the saveMapping argument is set to true.
            </summary>
            <param name="newEntityId">New entity id</param>
            <returns>New entity name</returns>
        </member>
        <member name="M:VRage.ModAPI.IMyRemapHelper.RemapGroupId(System.String,System.Int32)">
            <summary>
            Returns a new ID for the given old ID for specific group (multiblockIDs, ...).
            </summary>
            <returns>New id</returns>
        </member>
        <member name="M:VRage.ModAPI.IMyRemapHelper.Clear">
            <summary>
            Clears all the saved mappings from the remap helper and gets it ready for the next remapping operation.
            </summary>
        </member>
        <member name="M:VRage.ModAPI.IMyRemapHelper.GetRemapInfo">
            <summary>
            Key - old, value - new id
            Used to track if id is still existing
            </summary>
            <returns>Dictionary of remapping</returns>
        </member>
        <member name="T:VRage.ModAPI.IMyStorage">
            <summary>
            ModAPI interface giving access to voxel functions
            </summary>
        </member>
        <member name="P:VRage.ModAPI.IMyStorage.Closed">
            <summary>
            Returns true if voxel storage was closed
            </summary>
        </member>
        <member name="P:VRage.ModAPI.IMyStorage.MarkedForClose">
            <summary>
            Returns true if the voxel storage is marked for a pending close
            </summary>
        </member>
        <member name="M:VRage.ModAPI.IMyStorage.Save(System.Byte[]@)">
            <summary>
            Gets compressed voxel data
            </summary>
        </member>
        <member name="P:VRage.ModAPI.IMyStorage.Size">
            <summary>
            The size of the voxel storage, in voxel coordinates
            </summary>
        </member>
        <member name="M:VRage.ModAPI.IMyStorage.OverwriteAllMaterials(System.Byte)">
            <summary>
            Replaces all materials in range with the specific material
            </summary>
            <param name="materialIndex"></param>
        </member>
        <member name="M:VRage.ModAPI.IMyStorage.Intersect(VRageMath.BoundingBox@,System.Boolean)">
            <summary>
            Returns the intersection with the storage region
            </summary>
            <param name="box">Position in local coordinates</param>
            <param name="lazy">When true, you get less detailed results</param>
            <returns>Containment type</returns>
        </member>
        <member name="M:VRage.ModAPI.IMyStorage.Intersect(VRageMath.LineD@)">
            <summary>
            Returns true if the specific line intersects the storage region
            </summary>
            <param name="line">Line in local coordinates</param>
            <returns>True if line intersects</returns>
        </member>
        <member name="M:VRage.ModAPI.IMyStorage.PinAndExecute(System.Action)">
            <summary>
            Pins the voxel storage to prevent closing, then executes specified action. Unpins when action completes.
            </summary>
            <param name="action">Action to execute</param>
        </member>
        <member name="M:VRage.ModAPI.IMyStorage.PinAndExecute(System.Action{VRage.ModAPI.IMyStorage})">
            <summary>
            Pins the voxel storage to prevent closing, then executes specified action. Unpins when action completes.
            </summary>
            <param name="action">Action to execute</param>
        </member>
        <member name="M:VRage.ModAPI.IMyStorage.Reset(VRage.Voxels.MyStorageDataTypeFlags)">
            <summary>
            Resets the data specified by flags to values from data provider, or default if no provider is assigned.
            </summary>
            <param name="dataToReset">Content that should be read from disk</param>
        </member>
        <member name="M:VRage.ModAPI.IMyStorage.ReadRange(VRage.Voxels.MyStorageData,VRage.Voxels.MyStorageDataTypeFlags,System.Int32,VRageMath.Vector3I,VRageMath.Vector3I,VRage.Voxels.MyVoxelRequestFlags@)">
            <summary>
            Reads range of content and/or materials from specified LOD. If you want to write data back later, you must read LOD0 as that is the only writable one.
            </summary>
            <param name="target"></param>
            <param name="dataToRead"></param>
            <param name="lodIndex"></param>
            <param name="lodVoxelRangeMin"></param>
            <param name="lodVoxelRangeMax"></param>        
            <param name="requestFlags"></param>
        </member>
        <member name="M:VRage.ModAPI.IMyStorage.ReadRange(VRage.Voxels.MyStorageData,VRage.Voxels.MyStorageDataTypeFlags,System.Int32,VRageMath.Vector3I,VRageMath.Vector3I)">
            <summary>
            Reads range of content and/or materials from specified LOD. If you want to write data back later, you must read LOD0 as that is the only writable one.
            </summary>
            <param name="target">Source from where to read data</param>
            <param name="dataToRead">Content to read</param>
            <param name="lodIndex">Level of detail. 0 - most detailed</param>
            <param name="lodVoxelRangeMin">From (Inclusive)</param>
            <param name="lodVoxelRangeMax">To (Inclusive)</param>
        </member>
        <member name="M:VRage.ModAPI.IMyStorage.WriteRange(VRage.Voxels.MyStorageData,VRage.Voxels.MyStorageDataTypeFlags,VRageMath.Vector3I,VRageMath.Vector3I,System.Boolean,System.Boolean)">
            <summary>
            Writes range of content and/or materials from cache to storage. Note that this can only write to LOD0 (higher LODs must be computed based on that).
            </summary>
            <param name="source"></param>
            <param name="dataToWrite"></param>
            <param name="voxelRangeMin">From (Inclusive)</param>
            <param name="voxelRangeMax">To (Inclusive)</param>
            <param name="notify">Notify that range changed</param>
            <param name="skipCache">Skips cache</param>
        </member>
        <member name="P:VRage.ModAPI.IMyStorage.DeleteSupported">
            <summary>
            Returns if deletion is supported
            </summary>
        </member>
        <member name="M:VRage.ModAPI.IMyStorage.DeleteRange(VRage.Voxels.MyStorageDataTypeFlags,VRageMath.Vector3I,VRageMath.Vector3I,System.Boolean)">
            <summary>
            Deletes content in cache and storage
            </summary>
            <param name="dataToWrite">Content to delete</param>
            <param name="voxelRangeMin">From (Inclusive)</param>
            <param name="voxelRangeMax">To (Inclusive)</param>
            <param name="notify">Notify that range changed</param>
        </member>
        <member name="M:VRage.ModAPI.IMyStorage.ExecuteOperationFast``1(``0@,VRage.Voxels.MyStorageDataTypeFlags,VRageMath.Vector3I@,VRageMath.Vector3I@,System.Boolean)">
            <summary>
            Performs in-place voxel operation
            </summary>
            <typeparam name="TVoxelOperator">Function to be called over voxels</typeparam>
            <param name="voxelOperator">Function to be called over voxels</param>
            <param name="dataToWrite">Content to operate with</param>
            <param name="voxelRangeMin">From (Inclusive)</param>
            <param name="voxelRangeMax">To (Inclusive)</param>
            <param name="notifyRangeChanged">Notify that range changed</param>
        </member>
        <member name="M:VRage.ModAPI.IMyStorage.NotifyRangeChanged(VRageMath.Vector3I@,VRageMath.Vector3I@,VRage.Voxels.MyStorageDataTypeFlags)">
            <summary>
            Notify that range changed
            </summary>
            <param name="voxelRangeMin">From (Inclusive)</param>
            <param name="voxelRangeMax">To (Inclusive)</param>
            <param name="dataChanged">Content that changed</param>
        </member>
        <member name="T:VRage.ModAPI.IVoxelOperator">
            <summary>
            Interface, that is used in <see cref="M:VRage.ModAPI.IMyStorage.ExecuteOperationFast``1(``0@,VRage.Voxels.MyStorageDataTypeFlags,VRageMath.Vector3I@,VRageMath.Vector3I@,System.Boolean)"/>
            </summary>
        </member>
        <member name="P:VRage.ModAPI.IVoxelOperator.Flags">
            <summary>
            Mode of work
            </summary>
        </member>
        <member name="M:VRage.ModAPI.IVoxelOperator.Op(VRageMath.Vector3I@,VRage.Voxels.MyStorageDataTypeEnum,System.Byte@)">
            <summary>
            This function is called per each voxel
            </summary>
            <param name="position">Position of voxel</param>
            <param name="dataType">Type of content</param>
            <param name="inOutContent">Reference to data. You can change it, and it would apply changes</param>
        </member>
        <member name="F:VRage.ModAPI.VoxelOperatorFlags.Read">
            <summary>
            Read data
            </summary>
        </member>
        <member name="F:VRage.ModAPI.VoxelOperatorFlags.Write">
            <summary>
            Write data
            </summary>
        </member>
        <member name="F:VRage.ModAPI.VoxelOperatorFlags.WriteAll">
            <summary>
            Write all data
            </summary>
        </member>
        <member name="F:VRage.ModAPI.VoxelOperatorFlags.None">
            <summary>
            None
            </summary>
        </member>
        <member name="F:VRage.ModAPI.VoxelOperatorFlags.ReadWrite">
            <summary>
            Read and write data
            </summary>
        </member>
        <member name="F:VRage.ModAPI.VoxelOperatorFlags.Default">
            <summary>
            Read and write data
            </summary>
        </member>
        <member name="T:VRage.ModAPI.IMyVoxelBase">
            <summary>
            Describes 
            </summary>
        </member>
        <member name="T:VRage.ModAPI.ModAPIMass">
            <summary>
            ModAPI struct, that is available for modders. Copy of <see cref="T:Havok.HkMassProperties"/>.
            Created with IMyPhysics.CreateMassCombined, IMyPhysics.CreateMassForBox, IMyPhysics.CreateMassForCapsule, IMyPhysics.CreateMassForCylinder, IMyPhysics.CreateMassForSphere. 
            </summary>
        </member>
        <member name="F:VRage.ModAPI.ModAPIMass.Volume">
            <summary>
            Volume of physical shape
            </summary>
        </member>
        <member name="F:VRage.ModAPI.ModAPIMass.Mass">
            <summary>
            Mass of physical shape
            </summary>
        </member>
        <member name="F:VRage.ModAPI.ModAPIMass.CenterOfMass">
            <summary>
            Center of mass for physical shape (CoM)
            </summary>
        </member>
        <member name="F:VRage.ModAPI.ModAPIMass.InertiaTensor">
            <summary>
            Intertia tensor for physical shape
            </summary>
        </member>
        <member name="T:VRage.ModAPI.ModAPIMassElement">
            <summary>
            ModAPI struct, that is available for modders. Copy of <see cref="T:Havok.HkMassElement"/>.
            </summary>
            <seealso cref="T:VRage.ModAPI.ModAPIMass"/>
        </member>
        <member name="T:VRage.ModAPI.MyAPIGatewayShortcuts">
            <summary>
            Links to modapi actions. Delegates are set inside MyAPIGateway.
            VRAGE TODO: This is probably a temporary class helping us to remove sandbox.
            </summary>
        </member>
        <member name="F:VRage.ModAPI.MyAPIGatewayShortcuts.RegisterEntityUpdate">
            <summary>
            Registers entity in update loop.
            Parameters: IMyEntity entity (ref to entity to be registered)
            </summary>
        </member>
        <member name="F:VRage.ModAPI.MyAPIGatewayShortcuts.UnregisterEntityUpdate">
            <summary>
            Unregisters entity from update loop.
            Parameters: IMyEntity entity (ref to entity to be unregistered), bool immediate (default is false)
            </summary>
        </member>
        <member name="T:VRage.ModAPI.MyTerminalControlComboBoxItem">
            <summary>
            Implements Combo Box Item pair
            </summary>
        </member>
        <member name="F:VRage.ModAPI.MyTerminalControlComboBoxItem.Key">
            <summary>
            Gets or Sets key
            </summary>
        </member>
        <member name="F:VRage.ModAPI.MyTerminalControlComboBoxItem.Value">
            <summary>
            Gets or Sets value
            </summary>
        </member>
        <member name="T:VRage.ModAPI.MyTerminalControlListBoxItem">
            <summary>
            This is a list box item in a list box terminal control
            </summary>
        </member>
        <member name="P:VRage.ModAPI.MyTerminalControlListBoxItem.Text">
            <summary>
            Gets or Sets the text that appears for the item
            </summary>
        </member>
        <member name="P:VRage.ModAPI.MyTerminalControlListBoxItem.Tooltip">
            <summary>
            Gets or Sets t the tool tip that is displayed when the item is hovered over
            </summary>
        </member>
        <member name="P:VRage.ModAPI.MyTerminalControlListBoxItem.UserData">
            <summary>
            Gets or Sets the user supplied data for the item
            </summary>
        </member>
        <member name="M:VRage.ModAPI.MyTerminalControlListBoxItem.#ctor(VRage.Utils.MyStringId,VRage.Utils.MyStringId,System.Object)">
            <summary>
            Constructor
            </summary>
            <param name="text">string id of the text</param>
            <param name="tooltip">string id of the tool tip</param>
            <param name="userData">user data</param>
        </member>
        <member name="T:VRage.ModAPI.PhysicsSettings">
            <summary>
            Implements Physics Settings
            </summary>
        </member>
        <member name="F:VRage.ModAPI.PhysicsSettings.Entity">
            <summary>
            For modders:
            You can create your own entities with this code.
            <code>
            var entity = new MyEntity();          
            entity.WorldMatrix = MatrixD.Identity;
            entity.Init(new StringBuilder("Name"), "Models\\Cubes\\Large\\GeneratorLarge.mwm", null, null, "Models\\Cubes\\Large\\GeneratorLarge.mwm");
            MyAPIGateway.Entities.AddEntity(entity);
            </code>
            </summary>
        </member>
        <member name="F:VRage.ModAPI.PhysicsSettings.WorldMatrix">
            <summary>
            Gets or Sets the World matrix of physical shape
            </summary>
        </member>
        <member name="F:VRage.ModAPI.PhysicsSettings.LocalCenter">
            <summary>
            Gets or Sets the Center of physical shape
            </summary>
        </member>
        <member name="F:VRage.ModAPI.PhysicsSettings.LinearDamping">
            <summary>
            Gets or Sets the Linear Damping in meters per tick
            </summary>
        </member>
        <member name="F:VRage.ModAPI.PhysicsSettings.AngularDamping">
            <summary>
            Gets or Sets the Angular Damping. SE default value is 0.1
            </summary>
        </member>
        <member name="F:VRage.ModAPI.PhysicsSettings.CollisionLayer">
            <summary>
            Collision layer. Makes your entity react on collisions with entities that having certain layers
            TargetDummyLayer = 6
            BlockPlacementTestCollisionLayer = 7
            MissileLayer = 8
            NoVoxelCollisionLayer = 9
            LightFloatingObjectCollisionLayer = 10
            VoxelLod1CollisionLayer = 11
            NotCollideWithStaticLayer = 12
            StaticCollisionLayer = 13
            CollideWithStaticLayer = 14
            DefaultCollisionLayer = 15
            DynamicDoubledCollisionLayer = 16
            KinematicDoubledCollisionLayer = 17
            CharacterCollisionLayer = 18
            NoCollisionLayer = 19
            DebrisCollisionLayer = 20
            GravityPhantomLayer = 21
            CharacterNetworkCollisionLayer = 22
            FloatingObjectCollisionLayer = 23
            ObjectDetectionCollisionLayer = 24
            VirtualMassLayer = 25
            CollectorCollisionLayer = 26
            AmmoLayer = 27
            VoxelCollisionLayer = 28
            ExplosionRaycastLayer = 29
            CollisionLayerWithoutCharacter = 30
            RagdollCollisionLayer = 31
            </summary>
        </member>
        <member name="F:VRage.ModAPI.PhysicsSettings.RigidBodyFlags">
            <summary>
            Gets or Sets the Flags, defining behavioral features
            </summary>
        </member>
        <member name="F:VRage.ModAPI.PhysicsSettings.MaterialType">
            <summary>
            Gets or Sets From what material object is. Example: Rock,Metal,Ammo,Character,Wood,Thruster_large,Thruster_small,Missile
            </summary>
        </member>
        <member name="F:VRage.ModAPI.PhysicsSettings.IsPhantom">
            <summary>
            Is mainly used, to detect if block can be placed at this position
            </summary>
        </member>
        <member name="F:VRage.ModAPI.PhysicsSettings.DetectorColliderCallback">
            <summary>
            If it is not null, then it would be call this callback each time entity Enters/Leaves it's collision.
            Also removes physical collision (Now all entities can go through it)
            CollisionCallback is called from parallel thread, and called once per HkBody. Grids can have more than 100 bodies.
            Try find best collision layer, to filter unneeded collisions and improve performance
            If you trying detect grids:
            <code>
            protected MyConcurrentHashSet&#60;long&#62; m_containedEntities = new MyConcurrentHashSet&#60;long&#62;();
            var topEntity = entity.GetTopMostParent() as MyEntity;
            if (m_containedEntities.Add(topEntity.EntityId))
            {
                MyAPIGateway.Utilities.InvokeOnGameThread(() =>
                {
                    //Called once in main thread
                });
            }
            </code>
            </summary>
        </member>
        <member name="F:VRage.ModAPI.PhysicsSettings.Mass">
            <summary>
            Gets or Sets the mass of object
            </summary>
        </member>
        <member name="T:VRage.ObjectBuilders.MyObjectBuilderSerializer">
            <summary>
            Mod API
            </summary>
        </member>
        <member name="M:VRage.ObjectBuilders.MyObjectBuilderSerializer.DeserializePB``1(System.String,``0@)">
            <summary>
            Deserialize data by protobuf
            </summary>
            <typeparam name="T">object builder type</typeparam>
            <param name="path">path</param>
            <param name="objectBuilder">instance</param>
            <returns>false when fails</returns>
        </member>
        <member name="M:VRage.ObjectBuilders.MyObjectBuilderSerializer.DeserializePB``1(System.String,``0@,System.UInt64@)">
            <summary>
            Deserialize data by protobuf
            </summary>
            <typeparam name="T">object builder type</typeparam>
            <param name="path">path</param>
            <param name="objectBuilder">instance</param>
            <param name="fileSize">size of the file</param>
            <returns>false when fails</returns>
        </member>
        <member name="M:VRage.ObjectBuilders.Private.MyObjectBuilderSerializerKeen.DeserializeXML(System.IO.Stream,VRage.ObjectBuilders.MyObjectBuilder_Base@,System.Type,System.Collections.Generic.Dictionary{System.String,System.String})">
            <summary>
            
            </summary>
            <param name="reader"></param>
            <param name="objectBuilder"></param>
            <param name="builderType"></param>
            <param name="typeOverrideMap">Allows override of the type of the definition. Refer to MyDefinitionXmlSerializer</param>
            <returns></returns>
        </member>
        <member name="M:VRage.ObjectBuilders.Private.MyObjectBuilderSerializerKeen.DeserializePB``1(System.String,``0@)">
            <summary>
            Deserialize data by protobuf
            </summary>
            <typeparam name="T">object builder type</typeparam>
            <param name="path">path</param>
            <param name="objectBuilder">instance</param>
            <returns>false when fails</returns>
        </member>
        <member name="M:VRage.ObjectBuilders.Private.MyObjectBuilderSerializerKeen.DeserializePB``1(System.String,``0@,System.UInt64@)">
            <summary>
            Deserialize data by protobuf
            </summary>
            <typeparam name="T">object builder type</typeparam>
            <param name="path">path</param>
            <param name="objectBuilder">instance</param>
            <param name="fileSize">size of the file</param>
            <returns>false when fails</returns>
        </member>
        <member name="M:VRage.ObjectBuilders.MyObjectBuilderType.ParseBackwardsCompatible(System.String)">
            <summary>
            Can handle old values as well.
            </summary>
        </member>
        <member name="M:VRage.ObjectBuilders.MyObjectBuilderType.RemapType(VRage.ObjectBuilders.SerializableDefinitionId@,System.Collections.Generic.Dictionary{System.String,System.String})">
            <summary>
            Used for type remapping when overriding definition types
            </summary>
        </member>
        <member name="M:VRage.ObjectBuilders.MyObjectBuilder_EntityBase.Remap(VRage.ModAPI.IMyRemapHelper)">
            <summary>
            Remaps this entity's entityId to a new value.
            If there are cross-referenced between different entities in this object builder, the remapHelper should be used to rememeber these
            references and retrieve them.
            </summary>
        </member>
        <member name="T:VRage.ObjectBuilders.MyObjectBuilder_ReplicableEntity">
            <summary>
            This object builder is old and is for "MyInventoryBagEntity". Do not use it as base class or for anything. It is here only for backward compatibility.
            </summary>
        </member>
        <member name="M:VRage.Utils.MyDebugWorkTrackerExtensions.Stats(VRage.Utils.MyDebugWorkTracker{System.Int32})">
            Returns last/min/avg/max out of the history
        </member>
        <member name="T:VRage.Voxels.Clipmap.MyClipmapCellVicinity">
            <summary>
            Signature of a cell's vicinity.
            </summary>
        </member>
        <member name="F:VRage.Voxels.Clipmap.MyClipmapCellVicinity.Invalid">
            <summary>
            Invalid vicinity mark.
            </summary>
        </member>
        <member name="P:VRage.Voxels.Clipmap.MyClipmapFullMeshJob.Clipmap">
            <summary>
            Target clipmap.
            </summary>
        </member>
        <member name="P:VRage.Voxels.Clipmap.MyClipmapFullMeshJob.Cell">
            <summary>
            Clipmap cell.
            </summary>
        </member>
        <member name="F:VRage.Voxels.Clipmap.MyClipmapFullMeshJob.m_cellData">
            <summary>
            Resulting mesh.
            </summary>
        </member>
        <member name="P:VRage.Voxels.Clipmap.MyClipmapFullMeshJob.WorkTracker">
            <summary>
            Work tracker.
            </summary>
        </member>
        <member name="P:VRage.Voxels.Clipmap.MyClipmapMeshJob.Clipmap">
            <summary>
            Target clipmap.
            </summary>
        </member>
        <member name="P:VRage.Voxels.Clipmap.MyClipmapMeshJob.Cell">
            <summary>
            Clipmap cell.
            </summary>
        </member>
        <member name="F:VRage.Voxels.Clipmap.MyClipmapMeshJob.m_meshAndGuide">
            <summary>
            Resulting mesh.
            </summary>
        </member>
        <member name="P:VRage.Voxels.Clipmap.MyClipmapMeshJob.WorkTracker">
            <summary>
            Work tracker.
            </summary>
        </member>
        <member name="P:VRage.Voxels.Clipmap.MyClipmapSewJob.Clipmap">
            <summary>
            Target clipmap.
            </summary>
        </member>
        <member name="P:VRage.Voxels.Clipmap.MyClipmapSewJob.Cell">
            <summary>
            Clipmap cell.
            </summary>
        </member>
        <member name="P:VRage.Voxels.Clipmap.MyClipmapSewJob.Operation">
            <summary>
            Set of neghbouring meshes.
            </summary>
        </member>
        <member name="P:VRage.Voxels.Clipmap.MyClipmapSewJob.WorkTracker">
            <summary>
            Work tracker.
            </summary>
        </member>
        <member name="M:VRage.Voxels.Clipmap.MyClipmapSewJob.SewChildren(VRage.Voxels.Clipmap.MyVoxelClipmap.CompoundStitchOperation)">
            <summary>
            Sew together child meshes.
            </summary>
            <param name="compound"></param>
        </member>
        <member name="P:VRage.Voxels.Clipmap.MyClipmapTiming.Total">
            <summary>
            Total time spent calculating ticks.
            </summary>
        </member>
        <member name="T:VRage.Voxels.Clipmap.MyUserClipmap">
            <summary>
            This class describes a user controllable clipmap.
            </summary>
        </member>
        <member name="P:VRage.Voxels.Clipmap.MyUserClipmap.Actor">
             <summary>
             Actor bound to this clipmap.
            
             Users should not touch this from any thread other than the render thread.
             </summary>
        </member>
        <member name="M:VRage.Voxels.Clipmap.MyUserClipmap.CreateCell(VRageMath.Vector3D,System.Int32)">
            <summary>
            Create a clipmap cell at the specified offset and with provided lod.
            </summary>
            <param name="offset">Local space offset for this mesh.</param>
            <param name="lod">Lod index of this mesh, lod is used to calculate scale and for debug purposes.</param>
            <returns></returns>
        </member>
        <member name="M:VRage.Voxels.Clipmap.MyUserClipmap.DeleteCell(System.UInt32)">
            <summary>
            Delete the provided cell.
            </summary>
            <param name="id">Id of the cell to delete.</param>
        </member>
        <member name="T:VRage.Voxels.Clipmap.MyUserController">
            <inheritdoc />
            <summary>
            A lod controller that exposes cell creation/manipulation methods to the user.
            </summary>
        </member>
        <member name="P:VRage.Voxels.Clipmap.MyUserController.Actor">
             <summary>
             Actor bound to this clipmap.
            
             Users should not touch this from any thread other than the render thread.
             </summary>
        </member>
        <member name="M:VRage.Voxels.Clipmap.MyUserController.CreateCell(VRageMath.Vector3D,System.Int32)">
            <summary>
            Create a clipmap cell at the specified offset and with provided lod.
            </summary>
            <param name="offset">Local space offset for this mesh.</param>
            <param name="lod">Lod index of this mesh, lod is used to calculate scale and for debug purposes.</param>
            <returns></returns>
        </member>
        <member name="M:VRage.Voxels.Clipmap.MyUserController.DeleteCell(System.UInt32)">
            <summary>
            Delete the provided cell.
            </summary>
            <param name="id">Id of the cell to delete.</param>
        </member>
        <member name="T:VRage.Voxels.Clipmap.MyVoxelClipmap">
            <summary>
            Lod controller for voxel meshes implemented in the fashion of the classic clipmap paper.
            </summary>
            The original paper:
            https://web.archive.org/web/20160428150805/http://www.cs.virginia.edu/~gfx/Courses/2002/BigData/papers/Texturing/Clipmap.pdf
            
            This implementation extends the ideas presented in the paper to 3 dimensions
            and manages a mesh 'sewing' process that joins the boundaries between meshes.
        </member>
        <member name="F:VRage.Voxels.Clipmap.MyVoxelClipmap.CellBits">
            <summary>
            Log base two of the size of a cell.
            </summary>
        </member>
        <member name="F:VRage.Voxels.Clipmap.MyVoxelClipmap.CellSize">
            <summary>
            The size of a cell (always a power of two).
            </summary>
        </member>
        <member name="F:VRage.Voxels.Clipmap.MyVoxelClipmap.m_updateDistance">
            <summary>
            Distance at which we proceed to update a cell.
            </summary>
        </member>
        <member name="F:VRage.Voxels.Clipmap.MyVoxelClipmap.m_maxLod">
            <summary>
            Distance at which we proceed to update a cell.
            </summary>
        </member>
        <member name="F:VRage.Voxels.Clipmap.MyVoxelClipmap.m_cache">
            <summary>
            Cell cache for this clipmap instance.
            </summary>
        </member>
        <member name="F:VRage.Voxels.Clipmap.MyVoxelClipmap.Ranges">
            <summary>
            Size of each ring cells
            </summary>
        </member>
        <member name="P:VRage.Voxels.Clipmap.MyVoxelClipmap.Cache">
            <summary>
            Cell cached used by this clipmap. Can be null.
            </summary>
            
            The clipmap uses this cache both for storing recently used meshes in case they may be needed again and also when pre-fetching.
            If no cache is provided pre-fetching will be disabled.
        </member>
        <member name="F:VRage.Voxels.Clipmap.MyVoxelClipmap.m_settings">
            <summary>
            Current settings.
            </summary>
        </member>
        <member name="F:VRage.Voxels.Clipmap.MyVoxelClipmap.m_settingsChanged">
            <summary>
            Flag that the clipmap settings have changed and need to be reloaded.
            </summary>
        </member>
        <member name="P:VRage.Voxels.Clipmap.MyVoxelClipmap.SettingsGroup">
            <summary>
            The settings group this clipmap take it's settings from.
            </summary>
            <seealso cref="T:VRage.Voxels.Clipmap.MyVoxelClipmapSettings"/>
        </member>
        <member name="M:VRage.Voxels.Clipmap.MyVoxelClipmap.UpdateSettings(VRage.Voxels.Clipmap.MyVoxelClipmapSettings)">
            <summary>
            Update the clipmap settings.
            </summary>
            <param name="settings"></param>
        </member>
        <member name="M:VRage.Voxels.Clipmap.MyVoxelClipmap.ApproximateCellConstitution(VRageMath.Vector3I,System.Int32)">
            <summary>
            Verify if the given cell will contain a surface.
            </summary>
            <param name="cell">The coordinates of the cell.</param>
            <param name="lod">The lod of the cell.</param>
            <returns></returns>
        </member>
        <member name="M:VRage.Voxels.Clipmap.MyVoxelClipmap.ProcessCacheHits">
            <summary>
            Process all mesh requests that hit the cache.
            
            This has to be postponed until after the visibility update since feeding the mesh has many side effects.
            </summary>
        </member>
        <member name="M:VRage.Voxels.Clipmap.MyVoxelClipmap.ProcessUpdates">
            <summary>
            Process all queued cell updates.
            </summary>
            
            Cell render updates are queued because they deal with render data. As a result we must process them on the render thread.
        </member>
        <member name="M:VRage.Voxels.Clipmap.MyVoxelClipmap.UpdateCellData(VRage.Voxels.Clipmap.MyClipmapMeshJob,VRage.Voxels.MyCellCoord,VRage.Voxels.Sewing.VrSewGuide,VRage.Voxels.MyVoxelContentConstitution)">
            <summary>
            Update mesh data for a cell.
            </summary>
            <param name="job"></param>
            <param name="cell"></param>
            <param name="guide"></param>
            <param name="constitution">The constitution of the range where the mesh was calculated.</param>
        </member>
        <member name="M:VRage.Voxels.Clipmap.MyVoxelClipmap.FeedMeshResult(VRage.Voxels.MyCellCoord,VRage.Voxels.Sewing.VrSewGuide,VRage.Voxels.MyVoxelContentConstitution,VRage.Voxels.Clipmap.MyClipmapCellVicinity)">
            <summary>
            Provide the calculated mesh to it's cell.
            </summary>
            <param name="cell"></param>
            <param name="mesh"></param>
            <param name="constitution"></param>
            <param name="vicinity"></param>
        </member>
        <member name="M:VRage.Voxels.Clipmap.MyVoxelClipmap.UpdateCellRender(VRage.Voxels.MyCellCoord,VRage.Voxels.Clipmap.MyVoxelClipmap.StitchOperation,VRageRender.Voxels.MyVoxelRenderCellData@)">
            <summary>
            Update render data for a cell.
            </summary>
            <param name="coord"></param>
            <param name="stitch"></param>
            <param name="cellData"></param>
        </member>
        <member name="F:VRage.Voxels.Clipmap.MyVoxelClipmap.m_stitchWorkTracker">
            <summary>
            Work tracker for sewing.
            </summary>
        </member>
        <member name="T:VRage.Voxels.Clipmap.MyVoxelClipmap.StitchOperation">
            <summary>
            Description of a mesh sewing operation.
            </summary>
        </member>
        <member name="P:VRage.Voxels.Clipmap.MyVoxelClipmap.StitchOperation.Cell">
            <summary>
            Cell waiting for stitch.
            </summary>
        </member>
        <member name="F:VRage.Voxels.Clipmap.MyVoxelClipmap.StitchOperation.Dependencies">
            <summary>
            Neighbors.
            </summary>
        </member>
        <member name="F:VRage.Voxels.Clipmap.MyVoxelClipmap.StitchOperation.Guides">
            <summary>
            Meshes to be stitched.
            </summary>
        </member>
        <member name="F:VRage.Voxels.Clipmap.MyVoxelClipmap.StitchOperation.Operation">
            <summary>
            Operations to be carried in the mesh.
            </summary>
        </member>
        <member name="F:VRage.Voxels.Clipmap.MyVoxelClipmap.StitchOperation.Range">
            <summary>
            Range over which to stitch.
            </summary>
        </member>
        <member name="F:VRage.Voxels.Clipmap.MyVoxelClipmap.StitchOperation.Pending">
            <summary>
            Count of pending dependencies.
            </summary>
        </member>
        <member name="F:VRage.Voxels.Clipmap.MyVoxelClipmap.StitchOperation.Recalculate">
             <summary>
             Recalculate this operation once done.
            
             Used when the operation is invalidated before completed.
             </summary>
        </member>
        <member name="F:VRage.Voxels.Clipmap.MyVoxelClipmap.StitchOperation.BorderOperation">
            <summary>
            Whether this operation contain cells of multiple LODs (in a border).
            </summary>
        </member>
        <member name="T:VRage.Voxels.Clipmap.MyVoxelClipmap.CompoundStitchOperation">
            <summary>
            A stitch operation with child operations, used when a forward neighbor of a cell is inside an inner lod,
            resulting in many meshes to be sewn with.
            </summary>
        </member>
        <member name="M:VRage.Voxels.Clipmap.MyVoxelClipmap.CompoundStitchOperation.SetState(VRage.Voxels.Clipmap.MyVoxelClipmap.StitchOperation.OpState)">
            <inheritdoc />
        </member>
        <member name="F:VRage.Voxels.Clipmap.MyVoxelClipmap.m_neighbourOffsets">
            <summary>
            Offsets to the neighbor cells for stitching.
            </summary>
        </member>
        <member name="F:VRage.Voxels.Clipmap.MyVoxelClipmap.m_compromizes">
            <summary>
            List of operations to be disabled when a given cell is not available.
            </summary>
        </member>
        <member name="M:VRage.Voxels.Clipmap.MyVoxelClipmap.Stitch(VRage.Voxels.MyCellCoord,VRage.Voxels.Clipmap.MyClipmapCellVicinity)">
             <summary>
             Schedule stitching for a given cell.
            
             If the cell is a cell in the back of it's lod then additional jobs are scheduled to stitch it to the LODs above.
             Because these jobs all modify the same cell, they are all scheduled as a group in a compound stitch job.
             </summary>
             <param name="cell">The coordinate of the cell to be stitched.</param>
             <param name="vicinity"></param>
        </member>
        <member name="M:VRage.Voxels.Clipmap.MyVoxelClipmap.CollectChildStitch(VRage.Voxels.Clipmap.MyVoxelClipmap.CompoundStitchOperation,VRage.Voxels.Clipmap.MyVoxelClipmapRing.CellData,VRage.Voxels.MyCellCoord,VRageMath.Vector3I)">
            <summary>
            Collect meshes of inner lod for child sewing operations.
            </summary>
            <param name="compound">Parent compound stitch operation.</param>
            <param name="parentData">Cell data for the main cell.</param>
            <param name="cell">Cell coordinates.</param>
            <param name="neighbourOffset">Offset of the neighbor to sew with.</param>
        </member>
        <member name="M:VRage.Voxels.Clipmap.MyVoxelClipmap.PrepareStitch(VRage.Voxels.Clipmap.MyVoxelClipmapRing.CellData,VRage.Voxels.MyCellCoord,VRage.Voxels.Clipmap.MyVoxelClipmap.CompoundStitchOperation,VRage.Voxels.Clipmap.MyVoxelClipmap.StitchOperation)">
            <summary>
            Enqueue a stitch operation based on cell status.
            </summary>
            <param name="parentData"></param>
            <param name="cell"></param>
            <param name="parent">Optional parent compound stitch operation.</param>
            <param name="preallocatedOperation">Optional preallocated operation. Used when setting up compound operations.</param>
        </member>
        <member name="M:VRage.Voxels.Clipmap.MyVoxelClipmap.TryGetCellAt(VRage.Voxels.MyCellCoord@,VRage.Voxels.Clipmap.MyVoxelClipmapRing.CellData@)">
            <summary>
            Try to find a cell with valid mesh at or above the provided position.
            </summary>
            <param name="cell"></param>
            <param name="data"></param>
            <returns></returns>
        </member>
        <member name="M:VRage.Voxels.Clipmap.MyVoxelClipmap.DispatchStitch(VRage.Voxels.Clipmap.MyVoxelClipmap.StitchOperation)">
            <summary>
            Dispatch the stitch job associated with a given stitch operation.
            </summary>
            <param name="stitch"></param>
            <returns>Whether the stitch was dispatched.</returns>
        </member>
        <member name="M:VRage.Voxels.Clipmap.MyVoxelClipmap.CollectMeshForOperation(VRage.Voxels.Clipmap.MyVoxelClipmap.StitchOperation,VRage.Voxels.MyCellCoord,VRage.Voxels.Clipmap.MyVoxelClipmapRing.CellData)">
             <summary>
             Collect mesh for an operation.
            
             If the operation is a border operation a guide with constant cache is created for a cell that has no mesh.
             </summary>
             <param name="op">Operation</param>
             <param name="cell">Coordinates of the cell.</param>
             <param name="cellData">Cell to fetch the guide from.</param>
             <returns>Whether the cell existed and was ready.</returns>
        </member>
        <member name="M:VRage.Voxels.Clipmap.MyVoxelClipmap.ReadyStitchDependency(VRage.Voxels.Clipmap.MyVoxelClipmap.StitchOperation)">
            <summary>
            State that a dependent cell is ready.
            </summary>
            <param name="stitch"></param>
        </member>
        <member name="M:VRage.Voxels.Clipmap.MyVoxelClipmap.CommitStitchOperation(VRage.Voxels.Clipmap.MyVoxelClipmap.StitchOperation,System.Boolean)">
            <summary>
            Signal a stitch operation is complete and the job data can return to the pool.
            </summary>
            <param name="stitch"></param>
            <param name="dereference"></param>
        </member>
        <member name="M:VRage.Voxels.Clipmap.MyVoxelClipmap.ReadyAllStitchDependencies(VRage.Voxels.MyCellCoord)">
            <summary>
            Fire all visibility or normal stitch dependencies for a cell.
            </summary>
            <param name="cell"></param>
        </member>
        <member name="M:VRage.Voxels.Clipmap.MyVoxelClipmap.CheckVicinity(VRage.Voxels.MyCellCoord[],System.Int32)">
            <summary>
            Check that a set of cells are proper neighbors.
            </summary>
            <param name="cells"></param>
            <param name="cellSize"></param>
            <returns></returns>
        </member>
        <member name="M:VRage.Voxels.Clipmap.MyVoxelClipmap.MakeFulfilled(VRage.Voxels.MyCellCoord)">
            <summary>
            Take a cell coordinate from a stitch operation and toggle it's fulfilled status.
            </summary>
            <param name="fullfiled"></param>
            <returns></returns>
        </member>
        <member name="M:VRage.Voxels.Clipmap.MyVoxelClipmap.GetShellCacheForConstitution(VRage.Voxels.MyVoxelContentConstitution)">
            <summary>
            Given a cell, find whether it stands a the forward boundary of it's lod.
            </summary>
            <param name="constitution">The constitution of the cell.</param>
            <returns></returns>
        </member>
        <member name="P:VRage.Voxels.Clipmap.MyVoxelClipmap.IsUnloaded">
            <summary>
            Whether we have been unloaded in the renderer.
            </summary>
        </member>
        <member name="E:VRage.Voxels.Clipmap.MyVoxelClipmap.Loaded">
            <summary>
            Event fired when this clipmap is ready.
            </summary>
        </member>
        <member name="F:VRage.Voxels.Clipmap.MyVoxelClipmap.DebugDrawDependencies">
            <summary>
            Whether to draw the mesh dependency graphs when debug drawing clipmaps.
            </summary>
        </member>
        <member name="M:VRage.Voxels.Clipmap.MyVoxelClipmap.DebugDraw(VRageMath.MatrixD@)">
            <param name="cameraMatrix"></param>
            <inheritdoc />
        </member>
        <member name="M:VRage.Voxels.Clipmap.MyVoxelClipmap.DebugDrawDependenciesInternal">
            <summary>
            Debug draw mesh dependencies.
            </summary>
        </member>
        <member name="T:VRage.Voxels.Clipmap.MyVoxelClipmap.StitchMode">
            <summary>
            Enum representing the various stitch modes.
            </summary>
        </member>
        <member name="F:VRage.Voxels.Clipmap.MyVoxelClipmap.StitchMode.None">
            <summary>
            Leave the gap between meshes
            </summary>
        </member>
        <member name="F:VRage.Voxels.Clipmap.MyVoxelClipmap.StitchMode.BlindMeet">
            <summary>
            Generate meshes exactly up to their neighbors.
            </summary>
        </member>
        <member name="F:VRage.Voxels.Clipmap.MyVoxelClipmap.StitchMode.Overlap">
            <summary>
            Overlap meshes by one voxel.
            </summary>
        </member>
        <member name="F:VRage.Voxels.Clipmap.MyVoxelClipmap.StitchMode.Stitch">
            <summary>
            Sew meshes to their neighbors.
            </summary>
        </member>
        <member name="F:VRage.Voxels.Clipmap.MyVoxelClipmap.UpdateVisibility">
            <summary>
            Whether clipmaps should do visibility updates.
            </summary>
        </member>
        <member name="F:VRage.Voxels.Clipmap.MyVoxelClipmap.ActiveStitchMode">
            <summary>
            Global stitch mode for all clipmaps.
            </summary>
        </member>
        <member name="M:VRage.Voxels.Clipmap.MyVoxelClipmap.GetCachedMesh(VRageMath.Vector3I,System.Int32)">
            <summary>
            Get a cached mesh based on a position contained in it and it's desired lod.
            You are not becoming owner of the mesh and you are not allowed to keep it!
            </summary>
            <param name="coord"></param>
            <param name="lod"></param>
            <returns></returns>
        </member>
        <member name="M:VRage.Voxels.Clipmap.MyVoxelClipmap.GetCachedMesh(VRageMath.Vector3I)">
            <summary>
            Look for any loaded mesh containing the provided position.
            You are not becoming owner of the mesh and you are not allowed to keep it!
            </summary>
            <param name="coord"></param>
            <returns></returns>
        </member>
        <member name="M:VRage.Voxels.Clipmap.MyVoxelClipmap.GetCellBounds(VRage.Voxels.MyCellCoord,System.Boolean)">
             <summary>
             Calculate the boundaries of a render cell based on it's coordinates.
            
             The resulting bounding box is an _inclusive_ range.
             </summary>
             <param name="cell"></param>
             <param name="inLod">When set to true the resulting bounds will be relative to the lod of the cell. Otherwise they will be an absolute range relative to lod0</param>
             <returns></returns>
        </member>
        <member name="F:VRage.Voxels.Clipmap.MyVoxelClipmapCache.DefaultCacheSize">
            <summary>
            Size of the cell cache.
            </summary>
        </member>
        <member name="P:VRage.Voxels.Clipmap.MyVoxelClipmapCache.Instance">
            <summary>
            Default cache instance used when none is provided to the clipmap.
            </summary>
        </member>
        <member name="F:VRage.Voxels.Clipmap.MyVoxelClipmapCache.m_cells">
            <summary>
            Actual cache.
            </summary>
        </member>
        <member name="F:VRage.Voxels.Clipmap.MyVoxelClipmapCache.m_evictionHandlers">
            <summary>
            Info about each clipmap in the cache.
            </summary>
        </member>
        <member name="F:VRage.Voxels.Clipmap.MyVoxelClipmapCache.m_lodThreshold">
            <summary>
            Maximum lod for which cells are cached.
            </summary>
        </member>
        <member name="P:VRage.Voxels.Clipmap.MyVoxelClipmapCache.LodThreshold">
            <summary>
            Maximum lod for which cells are cached.
            </summary>
        </member>
        <member name="P:VRage.Voxels.Clipmap.MyVoxelClipmapCache.CacheUtilization">
            <summary>
            Utilization ratio of the cell cache.
            </summary>
        </member>
        <member name="P:VRage.Voxels.Clipmap.MyVoxelClipmapCache.HitRate">
            <summary>
            Rate of cache hits.
            </summary>
        </member>
        <member name="M:VRage.Voxels.Clipmap.MyVoxelClipmapCache.Register(System.UInt32,VRage.Voxels.Clipmap.MyVoxelClipmap)">
            <summary>
            Register a clipmap with this cache.
            </summary>
            <param name="clipmapId">The id of the clipmap.</param>
            <param name="clipmap">The clipmap object.</param>
        </member>
        <member name="M:VRage.Voxels.Clipmap.MyVoxelClipmapCache.Unregister(System.UInt32)">
            <summary>
            Unregister a clipmap with this cache.
            
            This automatically evicts all cells cached for that clipmap.
            </summary>
            <param name="clipmapId"></param>
        </member>
        <member name="M:VRage.Voxels.Clipmap.MyVoxelClipmapCache.EvictAll(System.UInt32)">
            <summary>
            Evict all cached cells belonging to the provided clipmap id.
            </summary>
            <param name="clipmapId"></param>
        </member>
        <member name="T:VRage.Voxels.Clipmap.MyVoxelClipmapCache.EvictionRanges">
            <summary>
            Struct used to store the range data when invalidating cells by iterating the cache.
            </summary>
        </member>
        <member name="M:VRage.Voxels.Clipmap.MyVoxelClipmapCache.EvictAll(System.UInt32,VRageMath.BoundingBoxI)">
            <summary>
            Evict all cells from the provided clipmap in the given cell range.
            </summary>
            <param name="clipmapId">The clipmap owning the evicted cells.</param>
            <param name="range">The range of cells to be evicted.</param>
        </member>
        <member name="M:VRage.Voxels.Clipmap.MyVoxelClipmapCache.TryRead(System.UInt32,VRage.Voxels.MyCellCoord,VRage.Voxels.Sewing.VrSewGuide@,VRage.Voxels.Clipmap.MyClipmapCellVicinity@,VRage.Voxels.MyVoxelContentConstitution@)">
            <summary>
            Try to retrieve cached cell data given it's id.
            </summary>
            <param name="clipmapId">Clipmap owning the cell.</param>
            <param name="cell">The cell coordinate.</param>
            <param name="data">The cached cell data if any.</param>
            <param name="vicinity"></param>
            <param name="constitution"></param>
            <returns>Whether the cell was found in the cache or not.</returns>
        </member>
        <member name="M:VRage.Voxels.Clipmap.MyVoxelClipmapCache.IsCached(System.UInt32,VRage.Voxels.MyCellCoord,VRage.Voxels.Sewing.VrSewGuide)">
            <summary>
            Whether a cell is cached.
            </summary>
            <param name="clipmapId"></param>
            <param name="cell"></param>
            <param name="dataGuide"></param>
            <returns></returns>
        </member>
        <member name="M:VRage.Voxels.Clipmap.MyVoxelClipmapCache.Write(System.UInt32,VRage.Voxels.MyCellCoord,VRage.Voxels.Sewing.VrSewGuide,VRage.Voxels.Clipmap.MyClipmapCellVicinity,VRage.Voxels.MyVoxelContentConstitution)">
            <summary>
            Record mesh data for a cell into the cache, evicting the oldest entry if necessary.
            </summary>
            <param name="clipmapId">Id of the parent clipmap.</param>
            <param name="cell">Cell key.</param>
            <param name="guide">The sew guide to record.</param>
            <param name="vicinity">The vicinity of the cell at the time of writing.</param>
            <param name="constitution">The constitution of the cell at the time of writing.</param>
        </member>
        <member name="M:VRage.Voxels.Clipmap.MyVoxelClipmapCache.CycleDebugCounters">
            <summary>
            Cycle the internal hit counter.
            
            This is only for debug purposes and may not be accurate if multiple clipmaps share this cache.
            </summary>
        </member>
        <member name="P:VRage.Voxels.Clipmap.MyVoxelClipmapCache.DebugHitCounter">
            <summary>
            Internal cache hit counter.
            
            This is only for debug purposes and may not be accurate if multiple clipmaps share this cache.
            </summary>
        </member>
        <member name="T:VRage.Voxels.Clipmap.MyVoxelClipmapRing">
            <summary>
            Manages a clipmap ring.
            </summary>
            
            The clipmap is comprised of concentric 'rings' (actually they are thick walled boxes, but the original paper calls the rings in the 2D case).
            
            Each ring contains meshes of a specific level of detail.
            
        </member>
        <member name="F:VRage.Voxels.Clipmap.MyVoxelClipmapRing.m_cells">
            <summary>
            Set of visible cells belonging to this ring.
            </summary>
        </member>
        <member name="F:VRage.Voxels.Clipmap.MyVoxelClipmapRing.m_cellsRemove">
            <summary>
            Set of cells that will be removed upon the current update.
            </summary>
        </member>
        <member name="F:VRage.Voxels.Clipmap.MyVoxelClipmapRing.m_cellsAdd">
            <summary>
            Set of cells that will be added during the current update.
            </summary>
        </member>
        <member name="F:VRage.Voxels.Clipmap.MyVoxelClipmapRing.m_cellsReStitch">
            <summary>
            Set of cells that will be re-stitched as a result of their forward cells having changed.
            </summary>
        </member>
        <member name="F:VRage.Voxels.Clipmap.MyVoxelClipmapRing.Bounds">
            <summary>
            Last bounds of this ring.
            </summary>
        </member>
        <member name="F:VRage.Voxels.Clipmap.MyVoxelClipmapRing.InnerBounds">
            <summary>
            Cached bounds of the ring immediately inside this.
            </summary>
        </member>
        <member name="F:VRage.Voxels.Clipmap.MyVoxelClipmapRing.BoundsChanged">
            <summary>
            Whether the bounds of this ring have changes in the last update.
            </summary>
        </member>
        <member name="P:VRage.Voxels.Clipmap.MyVoxelClipmapRing.Lod">
            <summary>
            Level of detail index for this ring.
            </summary>
        </member>
        <member name="P:VRage.Voxels.Clipmap.MyVoxelClipmapRing.Cells">
            <summary>
            Dictionary containing all cells that are part of this ring.
            </summary>
        </member>
        <member name="M:VRage.Voxels.Clipmap.MyVoxelClipmapRing.#ctor(VRage.Voxels.Clipmap.MyVoxelClipmap,System.Int32)">
            <summary>
            Create a new ring.
            </summary>
            <param name="clipmap"></param>
            <param name="lod"></param>
        </member>
        <member name="M:VRage.Voxels.Clipmap.MyVoxelClipmapRing.UpdateSize(VRageMath.Vector3I)">
            <summary>
            Change the size of this ring, this will cause it to recalculate from scratch next update.
            </summary>
            <param name="size"></param>
        </member>
        <member name="M:VRage.Voxels.Clipmap.MyVoxelClipmapRing.Update(VRageMath.Vector3L)">
            <summary>
            Update this ring with respect to the world space position of the camera.
            </summary>
            <param name="relativePosition"></param>
        </member>
        <member name="M:VRage.Voxels.Clipmap.MyVoxelClipmapRing.ProcessChanges">
            <summary>
            Process all queued changes during update, dispatching cell requests and queuing dependencies.
            </summary>
        </member>
        <member name="M:VRage.Voxels.Clipmap.MyVoxelClipmapRing.DispatchStitchingRefreshes">
            <summary>
            Dispatch all changes related to re-stitching.
            
            This have to happen after all changes have been processed for all lods, otherwise you may break stitch dependencies.
            </summary>
        </member>
        <member name="T:VRage.Voxels.Clipmap.MyVoxelClipmapRing.CellStatus">
            <summary>
            Describes the status of a clipmap cell.
            </summary>
        </member>
        <member name="F:VRage.Voxels.Clipmap.MyVoxelClipmapRing.CellStatus.Pending">
            <summary>
            Waiting for calculation
            </summary>
        </member>
        <member name="F:VRage.Voxels.Clipmap.MyVoxelClipmapRing.CellStatus.Calculated">
            <summary>
            Mesh has been calculated, but is not in the scene yet.
            </summary>
        </member>
        <member name="F:VRage.Voxels.Clipmap.MyVoxelClipmapRing.CellStatus.Empty">
            <summary>
            Known to be empty.
            </summary>
        </member>
        <member name="F:VRage.Voxels.Clipmap.MyVoxelClipmapRing.CellStatus.Ready">
            <summary>
            Mesh is ready to draw. Render cell exists.
            </summary>
        </member>
        <member name="F:VRage.Voxels.Clipmap.MyVoxelClipmapRing.CellStatus.MarkedForRemoval">
            <summary>
            Cell is waiting for it's children to be removed.
            </summary>
        </member>
        <member name="T:VRage.Voxels.Clipmap.MyVoxelClipmapRing.CellData">
            <summary>
            Data about a given clipmap cell.
            </summary>
        </member>
        <member name="F:VRage.Voxels.Clipmap.MyVoxelClipmapRing.CellData.Cell">
            <summary>
            Render counterpart.
            </summary>
        </member>
        <member name="F:VRage.Voxels.Clipmap.MyVoxelClipmapRing.CellData.Status">
            <summary>
            Status of this cell.
            </summary>
        </member>
        <member name="F:VRage.Voxels.Clipmap.MyVoxelClipmapRing.CellData.Constitution">
            <summary>
            Constitution of the content of this cell.
            </summary>
        </member>
        <member name="F:VRage.Voxels.Clipmap.MyVoxelClipmapRing.CellData.Guide">
            <summary>
            Sewing aware container for the mesh.
            </summary>
        </member>
        <member name="F:VRage.Voxels.Clipmap.MyVoxelClipmapRing.CellData.Vicinity">
            <summary>
            Cell Vicinity signature.
            </summary>
        </member>
        <member name="M:VRage.Voxels.Clipmap.MyVoxelClipmapRing.DisposeCell(VRageMath.Vector3I,VRage.Voxels.Clipmap.MyVoxelClipmapRing.CellData)">
            <summary>
            Dispose a cell and it's contents.
            </summary>
            <param name="coord"></param>
            <param name="data"></param>
        </member>
        <member name="M:VRage.Voxels.Clipmap.MyVoxelClipmapRing.AddCell(VRageMath.Vector3I)">
             <summary>
             Introduce a new cell.
            
             Newly added cells are calculated, stitched and then post-processed so they can be rendered.
            
             New cells need time to be constructed, as a result they are placed as dependencies for the
             parent cell which invariably needs to be removed, but will do so only when all children are ready.
             </summary>
             <param name="cell"></param>
        </member>
        <member name="M:VRage.Voxels.Clipmap.MyVoxelClipmapRing.RemoveCell(VRageMath.Vector3I)">
            <summary>
            Remove a cell during update.
            </summary>
            <param name="cell"></param>
        </member>
        <member name="M:VRage.Voxels.Clipmap.MyVoxelClipmapRing.RemoveImmediately(VRageMath.Vector3I,VRage.Voxels.Clipmap.MyVoxelClipmapRing.CellData)">
             <summary>
             Remove the cell right away.
            
             This method is separated from finish remove so we can have more
             control over what code paths can modify cells at which times.
             </summary>
             <param name="cell"></param>
             <param name="cellData"></param>
        </member>
        <member name="M:VRage.Voxels.Clipmap.MyVoxelClipmapRing.FinishAdd(VRageMath.Vector3I)">
            <summary>
            Set the cell to visible when it is finally ready.
            </summary>
            <param name="cell"></param>
        </member>
        <member name="M:VRage.Voxels.Clipmap.MyVoxelClipmapRing.FinishRemove(VRageMath.Vector3I)">
            <summary>
            Hide and delete a cell whose dependencies are finally ready.
            </summary>
            <param name="cell"></param>
        </member>
        <member name="M:VRage.Voxels.Clipmap.MyVoxelClipmapRing.UpdateCellData(VRageMath.Vector3I,VRage.Voxels.Sewing.VrSewGuide,VRage.Voxels.MyVoxelContentConstitution)">
             <summary>
             Update cell data about a mesh.
            
            
             When the cell is a back edge cell the mesh will be generated regardless.
             </summary>
             <param name="cell"></param>
             <param name="guide"></param>
             <param name="constitution"></param>
        </member>
        <member name="M:VRage.Voxels.Clipmap.MyVoxelClipmapRing.UpdateCellRender(VRageMath.Vector3I,VRageRender.Voxels.MyVoxelRenderCellData@,VRageRender.Voxels.IMyVoxelUpdateBatch@)">
            <summary>
            Update a cell's render data.
            </summary>
            <param name="cell"></param>
            <param name="updateData"></param>
            <param name="updateBatch"></param>
            <returns>Whether the update caused a new cell to be created and made visible.</returns>
        </member>
        <member name="M:VRage.Voxels.Clipmap.MyVoxelClipmapRing.TryGetCell(VRageMath.Vector3I,VRage.Voxels.Clipmap.MyVoxelClipmapRing.CellData@)">
            <summary>
            Get cell data for position.
            </summary>
            <param name="cell"></param>
            <param name="data"></param>
            <returns></returns>
        </member>
        <member name="M:VRage.Voxels.Clipmap.MyVoxelClipmapRing.GetCellVicinity(VRageMath.Vector3I)">
            <summary>
            Get cell data for position.
            </summary>
            <param name="cell"></param>        
            <returns></returns>
        </member>
        <member name="M:VRage.Voxels.Clipmap.MyVoxelClipmapRing.IsInnerLodEdge(VRageMath.Vector3I)">
            <summary>
            Check if a cell stands at the back edge of the inner lod.
            </summary>
            <param name="cell"></param>
            <returns></returns>
        </member>
        <member name="M:VRage.Voxels.Clipmap.MyVoxelClipmapRing.IsInnerLodEdge(VRageMath.Vector3I,System.Int32@)">
            <summary>
            Check if a cell stands at the back edge of the inner lod.
            </summary>
            <param name="cell"></param>
            <param name="innerCornerIndex">The index of the inner lod cell that needs to be stitched to this.</param>
            <returns></returns>
        </member>
        <member name="M:VRage.Voxels.Clipmap.MyVoxelClipmapRing.IsInsideInnerLod(VRageMath.Vector3I)">
            <summary>
            Check if a cell is contained in the inner lod.
            </summary>
            <param name="cell"></param>
            <returns></returns>
        </member>
        <member name="M:VRage.Voxels.Clipmap.MyVoxelClipmapRing.IsInBounds(VRageMath.Vector3I)">
            <summary>
            Whether the given cell is inside the bounds of this ring.
            </summary>
            <param name="cell">The cell coordinates.</param>
            <returns></returns>
        </member>
        <member name="M:VRage.Voxels.Clipmap.MyVoxelClipmapRing.IsForwardEdge(VRageMath.Vector3I)">
            <summary>
            Whether the given edge stands at the forward boundary of this lod.
            </summary>
            <param name="cell"></param>
            <returns></returns>
        </member>
        <member name="M:VRage.Voxels.Clipmap.MyVoxelClipmapRing.InvalidateAll">
            <summary>
            Invalidate all cells in this ring.
            </summary>
            This simply discards all cells and re-sets the ring.
        </member>
        <member name="T:VRage.Voxels.Clipmap.MyVoxelClipmapSettings">
            <summary>
            Descriptor for the configurable parameters of a clipmap.
            </summary>
        </member>
        <member name="F:VRage.Voxels.Clipmap.MyVoxelClipmapSettings.CellSizeLg2">
            <summary>
            Log base 2 of the cell size, this is expressed as such since cells are required to be a power of two in size.
            </summary>
        </member>
        <member name="F:VRage.Voxels.Clipmap.MyVoxelClipmapSettings.LodRanges">
            <summary>
            Ranges for each lod.
            
            There must be exactly MyClipmap.LodCount entries in the array and they must be such that LodRanges[i] &lt;= LodRanges[i + 1].
            </summary>
        </member>
        <member name="F:VRage.Voxels.Clipmap.MyVoxelClipmapSettings.MinSize">
            <summary>
            Minimum number of voxels at maximum lod range.
            </summary>
        </member>
        <member name="P:VRage.Voxels.Clipmap.MyVoxelClipmapSettings.IsValid">
            <summary>
            Whether the contents of the settinmmgs are valid.
            </summary>
        </member>
        <member name="M:VRage.Voxels.Clipmap.MyVoxelClipmapSettings.ToString">
            <inheritdoc />
        </member>
        <member name="F:VRage.Voxels.Clipmap.MyVoxelClipmapSettings.Default">
            <summary>
            Default settings for the clipmap.
            </summary>
        </member>
        <member name="M:VRage.Voxels.Clipmap.MyVoxelClipmapSettings.Create(System.Int32,System.Int32,System.Single,System.Int32,System.Int32,System.Int32)">
            <summary>
            Create a settings instance from simpler parameters.
            </summary>
            <param name="cellBits"></param>
            <param name="lod0Size"></param>
            <param name="lodSize"></param>
            <param name="lastLod"></param>
            <param name="lastLodRange"></param>
            <param name="minSize"></param>
            <returns></returns>
        </member>
        <member name="M:VRage.Voxels.Clipmap.MyVoxelClipmapSettings.SetSettingsForGroup(System.String,VRage.Voxels.Clipmap.MyVoxelClipmapSettings)">
            <summary>
            Update or add clipmap settings for a group.
            </summary>
            
            Settings gropups are named sets of settings used when there are different settings required for different clipmaps.
            Generally we use that to distinguish between 'small' and planet sized voxel maps.
            
            <param name="group">Name of the group.</param>
            <param name="settings">the settings for the group.</param>
        </member>
        <member name="M:VRage.Voxels.Clipmap.MyVoxelClipmapSettings.GetSettings(System.String)">
            <summary>
            Get settings for a named group.
            </summary>
            <param name="settingsGroup">The name of the group.</param>
            <returns>The group settings or default.</returns>
        </member>
        <member name="F:VRage.Voxels.Clipmap.MyVoxelClipmapSettingsPresets.NormalSettings">
            <summary>
            Settings for normal stones.
            </summary>
        </member>
        <member name="F:VRage.Voxels.Clipmap.MyVoxelClipmapSettingsPresets.PlanetSettings">
            <summary>
            Settings for planets
            </summary>
        </member>
        <member name="T:VRage.Voxels.DualContouring.MyMesherResult">
            <summary>
            Struct describing the result of contouring a range of voxels.
            
            The range can either be totaly empty (all isos &lt; 0), totally full (all isos &gt; 0), or mixed.
            Only the later will
            </summary>
        </member>
        <member name="F:VRage.Voxels.DualContouring.MyMesherResult.Constitution">
            <summary>
            The constitution of the content for the range of voxels that was contoured.
            
            If this is not mixed then the mesh should be null.
            </summary>
        </member>
        <member name="F:VRage.Voxels.DualContouring.MyMesherResult.Mesh">
            <summary>
            The generated mesh if any.
            </summary>
        </member>
        <member name="P:VRage.Voxels.DualContouring.MyMesherResult.MeshProduced">
            <summary>
            Whether this result contains a mesh.
            </summary>
        </member>
        <member name="F:VRage.Voxels.DualContouring.MyDualContouringMesher.Postprocess">
             <summary>
             Whether to postprocess generated meshes.
            
             Can be set to false for debugging and testing purposes.
             </summary>
        </member>
        <member name="M:VRage.Voxels.DualContouring.MyDualContouringMesher.Calculate(VRage.Entities.Components.MyVoxelMesherComponent,System.Int32,VRageMath.Vector3I,VRageMath.Vector3I,VRage.Voxels.MyStorageDataTypeFlags,VRage.Voxels.MyVoxelRequestFlags,VRage.Voxels.VrVoxelMesh)">
            <summary>
            Calculate a voxel mesh.
            
            Given the size sz of the range requested the resulting mesh will have sz -1 vertices (given it's dual nature),
            and sz -2 quads 9given that quads are dual to vertices.
            </summary>
            <param name="mesherComponent">The Voxel mesher entity component responsible for this request.</param>
            <param name="lod">The level of detail requested.</param>
            <param name="voxelStart">The starting range in voxels for the request.</param>
            <param name="voxelEnd">End range invoxels to use.</param>
            <param name="properties">Which properties are to be computed.</param>
            <param name="flags">Request flags to pass onto the data request performed by the contour.</param>
            <param name="target">Mesh to store results into, this mesh will be cleared regardless of the result being empty.</param>
            <returns></returns>
        </member>
        <member name="M:VRage.Voxels.DualContouring.MyDualContouringMesher.GenerateQuads(System.Byte,System.UInt16[],System.Collections.Generic.List{VRage.Game.Voxels.MyVoxelQuad})">
             <summary>
             Given a vertex configuration determine the quads required to correctly connect those vertices.
            
             To build a cube mask:
              - assign every vertex in a cube an index equal to its (x,y,z) (dot) (1, 2, 4).
              - for every corner that has a positive sign, assign the mask bit given by it's index to one.
              - leave remaining bits in the mask assigned to 0.
             </summary>
             <param name="cubeMask"></param>
             <param name="corners"></param>
             <param name="outQuads"></param>
        </member>
        <member name="F:VRage.Voxels.DualContouring.MyDualContouringMesher.EdgeTable">
             <summary>
             Tells based on a cube iso-configuration which edges are crossed by the isosurface
            
             The standard MC table and diagrams from the original implementations and papers index the cube indices as a rotation in the xy plane:
             Namely the indices for (0,0), (1,0), (0,1) and (1,1) being 0, 1, 3 and 2 repectivelly.
            
             This can be confusing in many cases where one would expect a mo0re traditional Z curve order.
             So the table here was re ordered in Z order.
            
            
             Here is a good page about marching cubes.
             http://paulbourke.net/geometry/polygonise/
             </summary>
        </member>
        <member name="M:VRage.Voxels.IMyStorageDataProvider.ReadRange(VRage.Voxels.MyVoxelDataRequest@,System.Boolean)">
            Read range of data.
            
            The data for the request, providing any optimizations that are requested in there.
        </member>
        <member name="M:VRage.Voxels.IMyStorageDataProvider.Intersect(VRageMath.LineD@,System.Double@,System.Double@)">
            Intersect line with storage.
            
            Returnas the tightest line interval that does intersect the storage.
            The precision of this method varies from storage to storage.
            
            The offsets are normalised.
        </member>
        <member name="M:VRage.Voxels.IMyStorageDataProvider.PostProcess(VRage.Voxels.VrVoxelMesh,VRage.Voxels.MyStorageDataTypeFlags)">
            <summary>
            Post-process the mesh generated from the data in this storage.
            </summary>
            <param name="mesh"></param>
            <param name="dataTypes">The types of data requested for the mesh.</param>
        </member>
        <member name="T:VRage.Voxels.Mesh.MyIsoMeshStitch">
            <summary>
            Describes an isomesh and all the data required to stitch it to other iso-meshes.
            </summary>
        </member>
        <member name="M:VRage.Voxels.Mesh.MyIsoMeshStitch.#ctor(VRage.Voxels.MyIsoMesh,VRage.Voxels.MyStorageData)">
            <summary>
            Create a new mesh stitch helper, meshes to be stitched need to record
            the sign field at the edges to properly combine them with other meshes.
            </summary>
            <param name="mesh"></param>
            <param name="meshContent"></param>
        </member>
        <member name="M:VRage.Voxels.Mesh.MyIsoMeshStitch.TryGetVertex(VRageMath.Vector3I,System.UInt16@)">
            <summary>
            Try to retrieve the vertex at the given edge position.
            </summary>
            <param name="coord"></param>
            <param name="index"></param>
            <returns></returns>
        </member>
        <member name="M:VRage.Voxels.Mesh.MyIsoMeshStitch.Reset">
            <summary>
            Reset the mesh to it's original configuration.
            </summary>
        </member>
        <member name="P:VRage.Voxels.Mesh.MyIsoMeshStitch.IsStitched">
            <summary>
            Whether this mesh has additional vertices/triangles added for stitching.
            </summary>
        </member>
        <member name="T:VRage.Voxels.Mesh.MyIsoMeshTaylor">
            <summary>
            Class responsible for stitching Iso-meshes together. This class will essentially contour the gap in between provided meshes.
            </summary>
        </member>
        <member name="P:VRage.Voxels.Mesh.MyIsoMeshTaylor.Instance">
            <summary>
            Current thread's global taylor instance.
            </summary>
        </member>
        <member name="P:VRage.Voxels.Mesh.MyIsoMeshTaylor.NativeInstance">
            <summary>
            Current thread's global taylor instance.
            </summary>
        </member>
        <member name="F:VRage.Voxels.Mesh.MyIsoMeshTaylor.FaceOffsets">
            <summary>
            Offsets to the next cube in the mesh grid for each axis.
            </summary>
        </member>
        <member name="F:VRage.Voxels.Mesh.MyIsoMeshTaylor.m_minRelativeLod">
            <summary>
            Lod difference between the smallest lod (m_lod) and the mesh at m_meshes[0].
            </summary>
        </member>
        <member name="M:VRage.Voxels.Mesh.MyIsoMeshTaylor.GenerateQuads">
            <summary>
            Generate all quads for the buffer, this is actually similar to how our dual contouring works.
            </summary>
        </member>
        <member name="M:VRage.Voxels.Mesh.MyIsoMeshTaylor.TranslateVertex(VRage.Voxels.Mesh.MyIsoMeshTaylor.Vx@)">
            <summary>
            Ensures the primary mesh conmtains the provided vertex and translates the reference to the matching vertex in that mesh.
            </summary>
            <param name="vertex"></param>
        </member>
        <member name="F:VRage.Voxels.Mesh.MyIsoMeshTaylor.VertexGenerator.m_createdVertices">
            <summary>
            Maps buffer positions to generated vertices.
            </summary>
        </member>
        <member name="F:VRage.Voxels.Mesh.MyIsoMeshTaylor.VertexGenerator.m_generatedPairs">
            <summary>
            Maps generated vertices to their correspondants on the  neighbouring mesh if any.
            </summary>
        </member>
        <member name="F:VRage.Voxels.Mesh.MyIsoMeshTaylor.VertexGenerator.m_adjacentVertices">
            <summary>
            Maps generated vertices to adjacent vertices.
            </summary>
        </member>
        <member name="M:VRage.Voxels.Mesh.MyIsoMeshTaylor.VertexGenerator.FindGoodNeighbour(System.Int32,VRage.Game.Voxels.MyVoxelQuad@)">
            <summary>
            Look for a close enough neighbour, we only use neighbours that are directly adjacent.
            </summary>
            <param name="index">Vertex index in the quad.</param>
            <param name="quad"></param>
            <returns></returns>
        </member>
        <member name="M:VRage.Voxels.Mesh.MyIsoMeshTaylor.VertexGenerator.CountTriangles(System.Int32,System.Int32,VRage.Game.Voxels.MyVoxelQuad@)">
            <summary>
            Count how many triangles are left if the provided index of the quad is replaced with the given ccorner.
            </summary>
            <param name="corner"></param>
            <param name="index"></param>
            <param name="quad"></param>
        </member>
        <member name="F:VRage.Voxels.Mesh.MyIsoMeshTaylor.Vx.Mesh">
            <summary>
            Index of the mesh that contains this vertex, if the mesh or the vertex is not available this will be set to -1.
            </summary>
        </member>
        <member name="F:VRage.Voxels.Mesh.MyIsoMeshTaylor.Vx.OverIso">
            <summary>
            Signed distance in the voxel field for this position.
            </summary>
        </member>
        <member name="F:VRage.Voxels.Mesh.MyIsoMeshTaylor.Vx.Index">
            <summary>
            Index of the vertex in the mesh.
            </summary>
        </member>
        <member name="P:VRage.Voxels.Mesh.MyIsoMeshTaylor.Vx.Valid">
            <summary>
            Wether this represents a valid index.
            </summary>
        </member>
        <member name="F:VRage.Voxels.Mesh.MyIsoMeshTaylor.Vx.Invalid">
            <summary>
            Description of an invalid vertex reference.
            </summary>
        </member>
        <member name="F:VRage.Voxels.MyPrecalcComponent.MaxPrecalcTime">
            <summary>
            Maximum calculation time in milliseconds
            </summary>
        </member>
        <member name="F:VRage.Voxels.MyPrecalcComponent.DebugDrawSorted">
            <summary>
            Enable debug draw.
            </summary>
        </member>
        <member name="P:VRage.Voxels.MyPrecalcComponent.IsoMesherType">
            <summary>
            The IsoMesher type used by precalc jobs.
            </summary>
        </member>
        <member name="P:VRage.Voxels.MyRenderDataBuilder.Instance">
            <summary>
            Current thread's static instance.
            </summary>
        </member>
        <member name="F:VRage.Voxels.MyRenderDataBuilder.m_partPool">
            <summary>
            Shared part pool.
            </summary>
        </member>
        <member name="F:VRage.Voxels.MyRenderDataBuilder.m_parts">
            <summary>
            Parts for the currently processed mesh.
            </summary>
        </member>
        <member name="M:VRage.Voxels.MyRenderDataBuilder.Build(VRage.Voxels.VrVoxelMesh,VRageRender.Voxels.MyVoxelRenderCellData@,VRageRender.Voxels.IMyVoxelRenderDataProcessorProvider)">
            <summary>
            Build render cell data from a native mesh.
            </summary>
            <param name="mesh"></param>
            <param name="data"></param>
            <param name="dataProcessorProvider"></param>
        </member>
        <member name="T:VRage.Voxels.MyRenderDataBuilder.MaterialTriple">
            <summary>
            Represents a material triple.
            </summary>
        </member>
        <member name="T:VRage.Voxels.MyRenderDataBuilder.Part">
            <summary>
            Container for vertices and triangles belonging to a given part.
            </summary>
        </member>
        <member name="F:MyCommonTexts.MessageBoxTextAreYouSureYouWantToExit">
            <summary>
             MessageBoxTextAreYouSureYouWantToExit
            </summary>
        </member>
        <member name="F:MyCommonTexts.AssignControlKeyboard">
            <summary>
             AssignControlKeyboard
            </summary>
        </member>
        <member name="F:MyCommonTexts.AssignControlMouse">
            <summary>
             AssignControlMouse
            </summary>
        </member>
        <member name="F:MyCommonTexts.ScreenOptionsButtonAudio">
            <summary>
             ScreenOptionsButtonAudio
            </summary>
        </member>
        <member name="F:MyCommonTexts.ScreenCaptionAudioOptions">
            <summary>
             ScreenCaptionAudioOptions
            </summary>
        </member>
        <member name="F:MyCommonTexts.Cancel">
            <summary>
             Cancel
            </summary>
        </member>
        <member name="F:MyCommonTexts.CanNotAssignControl">
            <summary>
             CanNotAssignControl
            </summary>
        </member>
        <member name="F:MyCommonTexts.LoadScreenButtonContinueLastGame">
            <summary>
             LoadScreenButtonContinueLastGame
            </summary>
        </member>
        <member name="F:MyCommonTexts.ControlAlreadyAssigned">
            <summary>
             ControlAlreadyAssigned
            </summary>
        </member>
        <member name="F:MyCommonTexts.ControlIsNotValid">
            <summary>
             ControlIsNotValid
            </summary>
        </member>
        <member name="F:MyCommonTexts.ScreenCaptionControls">
            <summary>
             ScreenCaptionControls
            </summary>
        </member>
        <member name="F:MyCommonTexts.ScreenMenuButtonCredits">
            <summary>
             ScreenMenuButtonCredits
            </summary>
        </member>
        <member name="F:MyCommonTexts.KeysDelete">
            <summary>
             KeysDelete
            </summary>
        </member>
        <member name="F:MyCommonTexts.KeysDown">
            <summary>
             KeysDown
            </summary>
        </member>
        <member name="F:MyCommonTexts.DoYouWantToKeepTheseSettingsXSecondsRemaining">
            <summary>
             DoYouWantToKeepTheseSettingsXSecondsRemaining
            </summary>
        </member>
        <member name="F:MyCommonTexts.KeysEnd">
            <summary>
             KeysEnd
            </summary>
        </member>
        <member name="F:MyCommonTexts.ScreenMenuButtonExitToMainMenu">
            <summary>
             ScreenMenuButtonExitToMainMenu
            </summary>
        </member>
        <member name="F:MyCommonTexts.ScreenMenuButtonExitToWindows">
            <summary>
             ScreenMenuButtonExitToWindows
            </summary>
        </member>
        <member name="F:MyCommonTexts.FieldOfView">
            <summary>
             FieldOfView
            </summary>
        </member>
        <member name="F:MyCommonTexts.ScreenOptionsButtonGame">
            <summary>
             ScreenOptionsButtonGame
            </summary>
        </member>
        <member name="F:MyCommonTexts.ScreenCaptionGameOptions">
            <summary>
             ScreenCaptionGameOptions
            </summary>
        </member>
        <member name="F:MyCommonTexts.ScreenOptionsControls_Gamepad">
            <summary>
             ScreenOptionsControls_Gamepad
            </summary>
        </member>
        <member name="F:MyCommonTexts.ScreenOptionsControls_AnalogAxes">
            <summary>
             ScreenOptionsControls_AnalogAxes
            </summary>
        </member>
        <member name="F:MyCommonTexts.GameVolume">
            <summary>
             GameVolume
            </summary>
        </member>
        <member name="F:MyCommonTexts.ControlTypeGeneral">
            <summary>
             ControlTypeGeneral
            </summary>
        </member>
        <member name="F:MyCommonTexts.HardwareCursor">
            <summary>
             HardwareCursor
            </summary>
        </member>
        <member name="F:MyCommonTexts.ControlName_Help">
            <summary>
             ControlName_Help
            </summary>
        </member>
        <member name="F:MyCommonTexts.KeysHome">
            <summary>
             KeysHome
            </summary>
        </member>
        <member name="F:MyCommonTexts.KeysInsert">
            <summary>
             KeysInsert
            </summary>
        </member>
        <member name="F:MyCommonTexts.InvertMouseX">
            <summary>
             InvertMouseX
            </summary>
        </member>
        <member name="F:MyCommonTexts.InvertMouseY">
            <summary>
             InvertMouseY
            </summary>
        </member>
        <member name="F:MyCommonTexts.InvertMouseScrollBlockSelection">
            <summary>
             InvertMouseScrollBlockSelection
            </summary>
        </member>
        <member name="F:MyCommonTexts.Joystick">
            <summary>
             Joystick
            </summary>
        </member>
        <member name="F:MyCommonTexts.JoystickButtonLeft">
            <summary>
             JoystickButtonLeft
            </summary>
        </member>
        <member name="F:MyCommonTexts.JoystickButtonRight">
            <summary>
             JoystickButtonRight
            </summary>
        </member>
        <member name="F:MyCommonTexts.JoystickButtonUp">
            <summary>
             JoystickButtonUp
            </summary>
        </member>
        <member name="F:MyCommonTexts.JoystickButtonDown">
            <summary>
             JoystickButtonDown
            </summary>
        </member>
        <member name="F:MyCommonTexts.JoystickDeadzone">
            <summary>
             JoystickDeadzone
            </summary>
        </member>
        <member name="F:MyCommonTexts.JoystickExponent">
            <summary>
             JoystickExponent
            </summary>
        </member>
        <member name="F:MyCommonTexts.JoystickSensitivity">
            <summary>
             JoystickSensitivity
            </summary>
        </member>
        <member name="F:MyCommonTexts.ScreenOptionsControls_Keyboard1">
            <summary>
             ScreenOptionsControls_Keyboard1
            </summary>
        </member>
        <member name="F:MyCommonTexts.Language">
            <summary>
             Language
            </summary>
        </member>
        <member name="F:MyCommonTexts.KeysLeft">
            <summary>
             KeysLeft
            </summary>
        </member>
        <member name="F:MyCommonTexts.KeysLeftAlt">
            <summary>
             KeysLeftAlt
            </summary>
        </member>
        <member name="F:MyCommonTexts.KeysLeftControl">
            <summary>
             KeysLeftControl
            </summary>
        </member>
        <member name="F:MyCommonTexts.LeftMouseButton">
            <summary>
             LeftMouseButton
            </summary>
        </member>
        <member name="F:MyCommonTexts.KeysLeftShift">
            <summary>
             KeysLeftShift
            </summary>
        </member>
        <member name="F:MyCommonTexts.LoadScreenButtonLoad">
            <summary>
             LoadScreenButtonLoad
            </summary>
        </member>
        <member name="F:MyCommonTexts.LoadingPleaseWaitUppercase">
            <summary>
             LoadingPleaseWaitUppercase
            </summary>
        </member>
        <member name="F:MyCommonTexts.MessageBoxCaptionError">
            <summary>
             MessageBoxCaptionError
            </summary>
        </member>
        <member name="F:MyCommonTexts.MessageBoxCaptionPleaseConfirm">
            <summary>
             MessageBoxCaptionPleaseConfirm
            </summary>
        </member>
        <member name="F:MyCommonTexts.MessageBoxCaptionExit">
            <summary>
             MessageBoxCaptionExit
            </summary>
        </member>
        <member name="F:MyCommonTexts.MiddleMouseButton">
            <summary>
             MiddleMouseButton
            </summary>
        </member>
        <member name="F:MyCommonTexts.ScreenOptionsControls_Mouse">
            <summary>
             ScreenOptionsControls_Mouse
            </summary>
        </member>
        <member name="F:MyCommonTexts.MouseSensitivity">
            <summary>
             MouseSensitivity
            </summary>
        </member>
        <member name="F:MyCommonTexts.MouseXButton1">
            <summary>
             MouseXButton1
            </summary>
        </member>
        <member name="F:MyCommonTexts.MouseXButton2">
            <summary>
             MouseXButton2
            </summary>
        </member>
        <member name="F:MyCommonTexts.ControlTypeNavigation">
            <summary>
             ControlTypeNavigation
            </summary>
        </member>
        <member name="F:MyCommonTexts.ScreenCaptionNewWorld">
            <summary>
             ScreenCaptionNewWorld
            </summary>
        </member>
        <member name="F:MyCommonTexts.No">
            <summary>
             No
            </summary>
        </member>
        <member name="F:MyCommonTexts.KeysNumPad0">
            <summary>
             KeysNumPad0
            </summary>
        </member>
        <member name="F:MyCommonTexts.KeysNumPad1">
            <summary>
             KeysNumPad1
            </summary>
        </member>
        <member name="F:MyCommonTexts.KeysNumPad2">
            <summary>
             KeysNumPad2
            </summary>
        </member>
        <member name="F:MyCommonTexts.KeysNumPad3">
            <summary>
             KeysNumPad3
            </summary>
        </member>
        <member name="F:MyCommonTexts.KeysNumPad4">
            <summary>
             KeysNumPad4
            </summary>
        </member>
        <member name="F:MyCommonTexts.KeysNumPad5">
            <summary>
             KeysNumPad5
            </summary>
        </member>
        <member name="F:MyCommonTexts.KeysNumPad6">
            <summary>
             KeysNumPad6
            </summary>
        </member>
        <member name="F:MyCommonTexts.KeysNumPad7">
            <summary>
             KeysNumPad7
            </summary>
        </member>
        <member name="F:MyCommonTexts.KeysNumPad8">
            <summary>
             KeysNumPad8
            </summary>
        </member>
        <member name="F:MyCommonTexts.KeysNumPad9">
            <summary>
             KeysNumPad9
            </summary>
        </member>
        <member name="F:MyCommonTexts.Ok">
            <summary>
             Ok
            </summary>
        </member>
        <member name="F:MyCommonTexts.ScreenCaptionOptions">
            <summary>
             ScreenCaptionOptions
            </summary>
        </member>
        <member name="F:MyCommonTexts.KeysPageDown">
            <summary>
             KeysPageDown
            </summary>
        </member>
        <member name="F:MyCommonTexts.KeysPageUp">
            <summary>
             KeysPageUp
            </summary>
        </member>
        <member name="F:MyCommonTexts.RecommendedAspectRatio">
            <summary>
             RecommendedAspectRatio
            </summary>
        </member>
        <member name="F:MyCommonTexts.Revert">
            <summary>
             Revert
            </summary>
        </member>
        <member name="F:MyCommonTexts.KeysRight">
            <summary>
             KeysRight
            </summary>
        </member>
        <member name="F:MyCommonTexts.KeysRightAlt">
            <summary>
             KeysRightAlt
            </summary>
        </member>
        <member name="F:MyCommonTexts.KeysRightControl">
            <summary>
             KeysRightControl
            </summary>
        </member>
        <member name="F:MyCommonTexts.RightMouseButton">
            <summary>
             RightMouseButton
            </summary>
        </member>
        <member name="F:MyCommonTexts.KeysRightShift">
            <summary>
             KeysRightShift
            </summary>
        </member>
        <member name="F:MyCommonTexts.SelectControl">
            <summary>
             SelectControl
            </summary>
        </member>
        <member name="F:MyCommonTexts.ServerShutdownNotificationCaption">
            <summary>
             ServerShutdownNotificationCaption
            </summary>
        </member>
        <member name="F:MyCommonTexts.SorryButSelectedSettingsAreNotSupportedByYourHardware">
            <summary>
             SorryButSelectedSettingsAreNotSupportedByYourHardware
            </summary>
        </member>
        <member name="F:MyCommonTexts.KeysSpace">
            <summary>
             KeysSpace
            </summary>
        </member>
        <member name="F:MyCommonTexts.StartGameInProgressPleaseWait">
            <summary>
             StartGameInProgressPleaseWait
            </summary>
        </member>
        <member name="F:MyCommonTexts.ControlName_StrafeLeft">
            <summary>
             ControlName_StrafeLeft
            </summary>
        </member>
        <member name="F:MyCommonTexts.ControlName_StrafeRight">
            <summary>
             ControlName_StrafeRight
            </summary>
        </member>
        <member name="F:MyCommonTexts.ControlTypeSystems1">
            <summary>
             ControlTypeSystems1
            </summary>
        </member>
        <member name="F:MyCommonTexts.ControlTypeSystems2">
            <summary>
             ControlTypeSystems2
            </summary>
        </member>
        <member name="F:MyCommonTexts.KeysTab">
            <summary>
             KeysTab
            </summary>
        </member>
        <member name="F:MyCommonTexts.KeysShift">
            <summary>
             KeysShift
            </summary>
        </member>
        <member name="F:MyCommonTexts.KeysAlt">
            <summary>
             KeysAlt
            </summary>
        </member>
        <member name="F:MyCommonTexts.KeysControl">
            <summary>
             KeysControl
            </summary>
        </member>
        <member name="F:MyCommonTexts.TitleFailedToStartInternetBrowser">
            <summary>
             TitleFailedToStartInternetBrowser
            </summary>
        </member>
        <member name="F:MyCommonTexts.UnknownControl_None">
            <summary>
             UnknownControl_None
            </summary>
        </member>
        <member name="F:MyCommonTexts.KeysUp">
            <summary>
             KeysUp
            </summary>
        </member>
        <member name="F:MyCommonTexts.ControlName_UseOrInteract">
            <summary>
             ControlName_UseOrInteract
            </summary>
        </member>
        <member name="F:MyCommonTexts.ControlName_PickUp">
            <summary>
             ControlName_PickUp
            </summary>
        </member>
        <member name="F:MyCommonTexts.VerticalSync">
            <summary>
             VerticalSync
            </summary>
        </member>
        <member name="F:MyCommonTexts.CaptureMouse">
            <summary>
             CaptureMouse
            </summary>
        </member>
        <member name="F:MyCommonTexts.VideoMode">
            <summary>
             VideoMode
            </summary>
        </member>
        <member name="F:MyCommonTexts.ControlTypeToolsOrWeapons">
            <summary>
             ControlTypeToolsOrWeapons
            </summary>
        </member>
        <member name="F:MyCommonTexts.Yes">
            <summary>
             Yes
            </summary>
        </member>
        <member name="F:MyCommonTexts.Disabled">
            <summary>
             Disabled
            </summary>
        </member>
        <member name="F:MyCommonTexts.JoystickRotationXpos">
            <summary>
             JoystickRotationXpos
            </summary>
        </member>
        <member name="F:MyCommonTexts.JoystickRotationYpos">
            <summary>
             JoystickRotationYpos
            </summary>
        </member>
        <member name="F:MyCommonTexts.JoystickRotationZpos">
            <summary>
             JoystickRotationZpos
            </summary>
        </member>
        <member name="F:MyCommonTexts.JoystickSlider1pos">
            <summary>
             JoystickSlider1pos
            </summary>
        </member>
        <member name="F:MyCommonTexts.JoystickSlider2pos">
            <summary>
             JoystickSlider2pos
            </summary>
        </member>
        <member name="F:MyCommonTexts.JoystickRotationXneg">
            <summary>
             JoystickRotationXneg
            </summary>
        </member>
        <member name="F:MyCommonTexts.JoystickRotationYneg">
            <summary>
             JoystickRotationYneg
            </summary>
        </member>
        <member name="F:MyCommonTexts.JoystickRotationZneg">
            <summary>
             JoystickRotationZneg
            </summary>
        </member>
        <member name="F:MyCommonTexts.JoystickSlider1neg">
            <summary>
             JoystickSlider1neg
            </summary>
        </member>
        <member name="F:MyCommonTexts.JoystickSlider2neg">
            <summary>
             JoystickSlider2neg
            </summary>
        </member>
        <member name="F:MyCommonTexts.KeysDecimal">
            <summary>
             KeysDecimal
            </summary>
        </member>
        <member name="F:MyCommonTexts.KeysBackslash">
            <summary>
             KeysBackslash
            </summary>
        </member>
        <member name="F:MyCommonTexts.KeysComma">
            <summary>
             KeysComma
            </summary>
        </member>
        <member name="F:MyCommonTexts.KeysMinus">
            <summary>
             KeysMinus
            </summary>
        </member>
        <member name="F:MyCommonTexts.KeysOpenBracket">
            <summary>
             KeysOpenBracket
            </summary>
        </member>
        <member name="F:MyCommonTexts.KeysCloseBracket">
            <summary>
             KeysCloseBracket
            </summary>
        </member>
        <member name="F:MyCommonTexts.KeysPeriod">
            <summary>
             KeysPeriod
            </summary>
        </member>
        <member name="F:MyCommonTexts.KeysPipe">
            <summary>
             KeysPipe
            </summary>
        </member>
        <member name="F:MyCommonTexts.KeysPlus">
            <summary>
             KeysPlus
            </summary>
        </member>
        <member name="F:MyCommonTexts.KeysQuestion">
            <summary>
             KeysQuestion
            </summary>
        </member>
        <member name="F:MyCommonTexts.KeysQuotes">
            <summary>
             KeysQuotes
            </summary>
        </member>
        <member name="F:MyCommonTexts.KeysSemicolon">
            <summary>
             KeysSemicolon
            </summary>
        </member>
        <member name="F:MyCommonTexts.KeysTilde">
            <summary>
             KeysTilde
            </summary>
        </member>
        <member name="F:MyCommonTexts.KeysMultiply">
            <summary>
             KeysMultiply
            </summary>
        </member>
        <member name="F:MyCommonTexts.KeysDivide">
            <summary>
             KeysDivide
            </summary>
        </member>
        <member name="F:MyCommonTexts.KeysAdd">
            <summary>
             KeysAdd
            </summary>
        </member>
        <member name="F:MyCommonTexts.KeysSubtract">
            <summary>
             KeysSubtract
            </summary>
        </member>
        <member name="F:MyCommonTexts.KeysCapsLock">
            <summary>
             KeysCapsLock
            </summary>
        </member>
        <member name="F:MyCommonTexts.KeysEnter">
            <summary>
             KeysEnter
            </summary>
        </member>
        <member name="F:MyCommonTexts.KeysBackspace">
            <summary>
             KeysBackspace
            </summary>
        </member>
        <member name="F:MyCommonTexts.ApplyingPleaseWait">
            <summary>
             ApplyingPleaseWait
            </summary>
        </member>
        <member name="F:MyCommonTexts.MP_YouHaveBeenKilled">
            <summary>
             MP_YouHaveBeenKilled
            </summary>
        </member>
        <member name="F:MyCommonTexts.MusicVolume">
            <summary>
             MusicVolume
            </summary>
        </member>
        <member name="F:MyCommonTexts.VideoAdapter">
            <summary>
             VideoAdapter
            </summary>
        </member>
        <member name="F:MyCommonTexts.DefaultFOV">
            <summary>
             DefaultFOV
            </summary>
        </member>
        <member name="F:MyCommonTexts.WorldLoaded">
            <summary>
             WorldLoaded
            </summary>
        </member>
        <member name="F:MyCommonTexts.ControlName_Screenshot">
            <summary>
             ControlName_Screenshot
            </summary>
        </member>
        <member name="F:MyCommonTexts.ControlName_PreviousColor">
            <summary>
             ControlName_PreviousColor
            </summary>
        </member>
        <member name="F:MyCommonTexts.ControlName_NextColor">
            <summary>
             ControlName_NextColor
            </summary>
        </member>
        <member name="F:MyCommonTexts.WorldSaved">
            <summary>
             WorldSaved
            </summary>
        </member>
        <member name="F:MyCommonTexts.Blueprints">
            <summary>
             Blueprints
            </summary>
        </member>
        <member name="F:MyCommonTexts.Factions">
            <summary>
             Factions
            </summary>
        </member>
        <member name="F:MyCommonTexts.BlueprintMaterials">
            <summary>
             BlueprintMaterials
            </summary>
        </member>
        <member name="F:MyCommonTexts.ProductionQueue">
            <summary>
             ProductionQueue
            </summary>
        </member>
        <member name="F:MyCommonTexts.LoadScreenButtonEditSettings">
            <summary>
             LoadScreenButtonEditSettings
            </summary>
        </member>
        <member name="F:MyCommonTexts.ScreenCaptionCustomWorld">
            <summary>
             ScreenCaptionCustomWorld
            </summary>
        </member>
        <member name="F:MyCommonTexts.ErrorNameTooLong">
            <summary>
             ErrorNameTooLong
            </summary>
        </member>
        <member name="F:MyCommonTexts.ErrorNameTooShort">
            <summary>
             ErrorNameTooShort
            </summary>
        </member>
        <member name="F:MyCommonTexts.ErrorNameInvalid">
            <summary>
             ErrorNameInvalid
            </summary>
        </member>
        <member name="F:MyCommonTexts.WorldSettings_GameModeSurvival">
            <summary>
             WorldSettings_GameModeSurvival
            </summary>
        </member>
        <member name="F:MyCommonTexts.ScreenMenuButtonJoinWorld">
            <summary>
             ScreenMenuButtonJoinWorld
            </summary>
        </member>
        <member name="F:MyCommonTexts.Name">
            <summary>
             Name
            </summary>
        </member>
        <member name="F:MyCommonTexts.WorldSettings_OnlineMode">
            <summary>
             WorldSettings_OnlineMode
            </summary>
        </member>
        <member name="F:MyCommonTexts.WorldSettings_OnlineModeOffline">
            <summary>
             WorldSettings_OnlineModeOffline
            </summary>
        </member>
        <member name="F:MyCommonTexts.WorldSettings_OnlineModePrivate">
            <summary>
             WorldSettings_OnlineModePrivate
            </summary>
        </member>
        <member name="F:MyCommonTexts.WorldSettings_OnlineModePublic">
            <summary>
             WorldSettings_OnlineModePublic
            </summary>
        </member>
        <member name="F:MyCommonTexts.ToolTipWorldSettingsName">
            <summary>
             ToolTipWorldSettingsName
            </summary>
        </member>
        <member name="F:MyCommonTexts.MessageBoxTextAreYouSureYouWantToDeleteSave">
            <summary>
             MessageBoxTextAreYouSureYouWantToDeleteSave
            </summary>
        </member>
        <member name="F:MyCommonTexts.MessageBoxTextAreYouSureYouWantToDeleteMultipleSaves">
            <summary>
             MessageBoxTextAreYouSureYouWantToDeleteMultipleSaves
            </summary>
        </member>
        <member name="F:MyCommonTexts.ScreenCaptionLoadWorld">
            <summary>
             ScreenCaptionLoadWorld
            </summary>
        </member>
        <member name="F:MyCommonTexts.LoadScreenButtonSaveAs">
            <summary>
             LoadScreenButtonSaveAs
            </summary>
        </member>
        <member name="F:MyCommonTexts.WorldSettings_GameModeCreative">
            <summary>
             WorldSettings_GameModeCreative
            </summary>
        </member>
        <member name="F:MyCommonTexts.PlayerCharacter">
            <summary>
             PlayerCharacter
            </summary>
        </member>
        <member name="F:MyCommonTexts.WorldSettings_AutoSave">
            <summary>
             WorldSettings_AutoSave
            </summary>
        </member>
        <member name="F:MyCommonTexts.ToolTipWorldSettingsAutoSave">
            <summary>
             ToolTipWorldSettingsAutoSave
            </summary>
        </member>
        <member name="F:MyCommonTexts.MessageBoxTextDoYouWantToSaveYourProgress">
            <summary>
             MessageBoxTextDoYouWantToSaveYourProgress
            </summary>
        </member>
        <member name="F:MyCommonTexts.SaveWorld">
            <summary>
             SaveWorld
            </summary>
        </member>
        <member name="F:MyCommonTexts.ScreenMenuButtonSave">
            <summary>
             ScreenMenuButtonSave
            </summary>
        </member>
        <member name="F:MyCommonTexts.SavingPleaseWait">
            <summary>
             SavingPleaseWait
            </summary>
        </member>
        <member name="F:MyCommonTexts.Advanced">
            <summary>
             Advanced
            </summary>
        </member>
        <member name="F:MyCommonTexts.AdvancedControls">
            <summary>
             AdvancedControls
            </summary>
        </member>
        <member name="F:MyCommonTexts.ControlName_Backward">
            <summary>
             ControlName_Backward
            </summary>
        </member>
        <member name="F:MyCommonTexts.BasicControls">
            <summary>
             BasicControls
            </summary>
        </member>
        <member name="F:MyCommonTexts.Close">
            <summary>
             Close
            </summary>
        </member>
        <member name="F:MyCommonTexts.ControlName_DownOrCrouch">
            <summary>
             ControlName_DownOrCrouch
            </summary>
        </member>
        <member name="F:MyCommonTexts.ControlName_FirstOrThirdPerson">
            <summary>
             ControlName_FirstOrThirdPerson
            </summary>
        </member>
        <member name="F:MyCommonTexts.ControlName_Forward">
            <summary>
             ControlName_Forward
            </summary>
        </member>
        <member name="F:MyCommonTexts.NextPage">
            <summary>
             NextPage
            </summary>
        </member>
        <member name="F:MyCommonTexts.NotificationNeedShowHelpScreen">
            <summary>
             NotificationNeedShowHelpScreen
            </summary>
        </member>
        <member name="F:MyCommonTexts.PreviousPage">
            <summary>
             PreviousPage
            </summary>
        </member>
        <member name="F:MyCommonTexts.ShowControlsHints">
            <summary>
             ShowControlsHints
            </summary>
        </member>
        <member name="F:MyCommonTexts.SteamGuide">
            <summary>
             SteamGuide
            </summary>
        </member>
        <member name="F:MyCommonTexts.ControlName_UpOrJump">
            <summary>
             ControlName_UpOrJump
            </summary>
        </member>
        <member name="F:MyCommonTexts.ControlName_CubeRotateVerticalNeg">
            <summary>
             ControlName_CubeRotateVerticalNeg
            </summary>
        </member>
        <member name="F:MyCommonTexts.ControlName_CubeRotateVerticalPos">
            <summary>
             ControlName_CubeRotateVerticalPos
            </summary>
        </member>
        <member name="F:MyCommonTexts.ControlName_CubeRotateHorizontalNeg">
            <summary>
             ControlName_CubeRotateHorizontalNeg
            </summary>
        </member>
        <member name="F:MyCommonTexts.ControlName_CubeRotateHorizontalPos">
            <summary>
             ControlName_CubeRotateHorizontalPos
            </summary>
        </member>
        <member name="F:MyCommonTexts.ControlName_CubeRotateRollNeg">
            <summary>
             ControlName_CubeRotateRollNeg
            </summary>
        </member>
        <member name="F:MyCommonTexts.ControlName_CubeRotateRollPos">
            <summary>
             ControlName_CubeRotateRollPos
            </summary>
        </member>
        <member name="F:MyCommonTexts.ControlName_Slot0">
            <summary>
             ControlName_Slot0
            </summary>
        </member>
        <member name="F:MyCommonTexts.ControlName_Slot1">
            <summary>
             ControlName_Slot1
            </summary>
        </member>
        <member name="F:MyCommonTexts.ControlName_Slot2">
            <summary>
             ControlName_Slot2
            </summary>
        </member>
        <member name="F:MyCommonTexts.ControlName_Slot3">
            <summary>
             ControlName_Slot3
            </summary>
        </member>
        <member name="F:MyCommonTexts.ControlName_Slot4">
            <summary>
             ControlName_Slot4
            </summary>
        </member>
        <member name="F:MyCommonTexts.ControlName_Slot5">
            <summary>
             ControlName_Slot5
            </summary>
        </member>
        <member name="F:MyCommonTexts.ControlName_Slot6">
            <summary>
             ControlName_Slot6
            </summary>
        </member>
        <member name="F:MyCommonTexts.ControlName_Slot7">
            <summary>
             ControlName_Slot7
            </summary>
        </member>
        <member name="F:MyCommonTexts.ControlName_Slot8">
            <summary>
             ControlName_Slot8
            </summary>
        </member>
        <member name="F:MyCommonTexts.ControlName_Slot9">
            <summary>
             ControlName_Slot9
            </summary>
        </member>
        <member name="F:MyCommonTexts.MessageBoxTextAreYouSureYouWantToQuickLoad">
            <summary>
             MessageBoxTextAreYouSureYouWantToQuickLoad
            </summary>
        </member>
        <member name="F:MyCommonTexts.MessageBoxTextAreYouSureYouWantToQuickSave">
            <summary>
             MessageBoxTextAreYouSureYouWantToQuickSave
            </summary>
        </member>
        <member name="F:MyCommonTexts.ControlName_ToolbarConfig">
            <summary>
             ControlName_ToolbarConfig
            </summary>
        </member>
        <member name="F:MyCommonTexts.ControlName_HoldToLookAround">
            <summary>
             ControlName_HoldToLookAround
            </summary>
        </member>
        <member name="F:MyCommonTexts.ControlName_ToggleSignalsMode">
            <summary>
             ControlName_ToggleSignalsMode
            </summary>
        </member>
        <member name="F:MyCommonTexts.ControlName_ToggleSignalsMode_Tooltip">
            <summary>
             ControlName_ToggleSignalsMode_Tooltip
            </summary>
        </member>
        <member name="F:MyCommonTexts.ControlName_SpectatorLock">
            <summary>
             ControlName_SpectatorLock
            </summary>
        </member>
        <member name="F:MyCommonTexts.ControlName_SpectatorSwitchMode">
            <summary>
             ControlName_SpectatorSwitchMode
            </summary>
        </member>
        <member name="F:MyCommonTexts.ControlName_SpectatorNextPlayer">
            <summary>
             ControlName_SpectatorNextPlayer
            </summary>
        </member>
        <member name="F:MyCommonTexts.ControlName_SpectatorPrevPlayer">
            <summary>
             ControlName_SpectatorPrevPlayer
            </summary>
        </member>
        <member name="F:MyCommonTexts.ControlName_HoldToSprint">
            <summary>
             ControlName_HoldToSprint
            </summary>
        </member>
        <member name="F:MyCommonTexts.LoadingPleaseWait">
            <summary>
             LoadingPleaseWait
            </summary>
        </member>
        <member name="F:MyCommonTexts.NoPlaceToCreateGrid">
            <summary>
             NoPlaceToCreateGrid
            </summary>
        </member>
        <member name="F:MyCommonTexts.ControlName_HudOnOff">
            <summary>
             ControlName_HudOnOff
            </summary>
        </member>
        <member name="F:MyCommonTexts.ScreenCubeBuilderHint">
            <summary>
             ScreenCubeBuilderHint
            </summary>
        </member>
        <member name="F:MyCommonTexts.Saved">
            <summary>
             Saved
            </summary>
        </member>
        <member name="F:MyCommonTexts.HideWeapon">
            <summary>
             HideWeapon
            </summary>
        </member>
        <member name="F:MyCommonTexts.Thrust">
            <summary>
             Thrust
            </summary>
        </member>
        <member name="F:MyCommonTexts.SomeWorldFilesCouldNotBeLoaded">
            <summary>
             SomeWorldFilesCouldNotBeLoaded
            </summary>
        </member>
        <member name="F:MyCommonTexts.WorldFileIsCorruptedAndCouldNotBeLoaded">
            <summary>
             WorldFileIsCorruptedAndCouldNotBeLoaded
            </summary>
        </member>
        <member name="F:MyCommonTexts.WorldFileIsContainsModsFromNotConsentedUGCAndCouldNotBeLoaded">
            <summary>
             WorldFileIsContainsModsFromNotConsentedUGCAndCouldNotBeLoaded
            </summary>
        </member>
        <member name="F:MyCommonTexts.NotAbleToUseBecauseNotConsentedToUGC">
            <summary>
             NotAbleToUseBecauseNotConsentedToUGC
            </summary>
        </member>
        <member name="F:MyCommonTexts.ToolTipNewWorldCustomWorld">
            <summary>
             ToolTipNewWorldCustomWorld
            </summary>
        </member>
        <member name="F:MyCommonTexts.ToolTipVideoOptionsRenderQuality">
            <summary>
             ToolTipVideoOptionsRenderQuality
            </summary>
        </member>
        <member name="F:MyCommonTexts.ToolTipVideoOptionsVideoAdapter">
            <summary>
             ToolTipVideoOptionsVideoAdapter
            </summary>
        </member>
        <member name="F:MyCommonTexts.ToolTipVideoOptionsVideoMode">
            <summary>
             ToolTipVideoOptionsVideoMode
            </summary>
        </member>
        <member name="F:MyCommonTexts.ToolTipVideoOptionsHardwareCursor">
            <summary>
             ToolTipVideoOptionsHardwareCursor
            </summary>
        </member>
        <member name="F:MyCommonTexts.ToolTipVideoOptionsCaptureMouse">
            <summary>
             ToolTipVideoOptionsCaptureMouse
            </summary>
        </member>
        <member name="F:MyCommonTexts.ToolTipVideoOptionsVerticalSync">
            <summary>
             ToolTipVideoOptionsVerticalSync
            </summary>
        </member>
        <member name="F:MyCommonTexts.ToolTipVideoOptionsFieldOfView">
            <summary>
             ToolTipVideoOptionsFieldOfView
            </summary>
        </member>
        <member name="F:MyCommonTexts.MessageBoxTextRestartNeededAfterAdapterSwitch">
            <summary>
             MessageBoxTextRestartNeededAfterAdapterSwitch
            </summary>
        </member>
        <member name="F:MyCommonTexts.ToolTipGameOptionsShowControlsHints">
            <summary>
             ToolTipGameOptionsShowControlsHints
            </summary>
        </member>
        <member name="F:MyCommonTexts.WorldNotSaved">
            <summary>
             WorldNotSaved
            </summary>
        </member>
        <member name="F:MyCommonTexts.WorldNotSavedPathTooLong">
            <summary>
             WorldNotSavedPathTooLong
            </summary>
        </member>
        <member name="F:MyCommonTexts.NotificationMemoryOverload">
            <summary>
             NotificationMemoryOverload
            </summary>
        </member>
        <member name="F:MyCommonTexts.BetterGCIsAvailable">
            <summary>
             BetterGCIsAvailable
            </summary>
        </member>
        <member name="F:MyCommonTexts.MessageBoxCaptionWarning">
            <summary>
             MessageBoxCaptionWarning
            </summary>
        </member>
        <member name="F:MyCommonTexts.MessageBoxTextOpenBrowser">
            <summary>
             MessageBoxTextOpenBrowser
            </summary>
        </member>
        <member name="F:MyCommonTexts.MessageBoxTextConfirmExperimental">
            <summary>
             MessageBoxTextConfirmExperimental
            </summary>
        </member>
        <member name="F:MyCommonTexts.MessageBoxTextConfirmCloudDisabled">
            <summary>
             MessageBoxTextConfirmCloudDisabled
            </summary>
        </member>
        <member name="F:MyCommonTexts.MessageBoxTextNoSavedWorlds">
            <summary>
             MessageBoxTextNoSavedWorlds
            </summary>
        </member>
        <member name="F:MyCommonTexts.MessageBoxCaptionVideoTutorial">
            <summary>
             MessageBoxCaptionVideoTutorial
            </summary>
        </member>
        <member name="F:MyCommonTexts.MessageBoxTextSaveChangesBeforeExit">
            <summary>
             MessageBoxTextSaveChangesBeforeExit
            </summary>
        </member>
        <member name="F:MyCommonTexts.ErrorNameAlreadyExists">
            <summary>
             ErrorNameAlreadyExists
            </summary>
        </member>
        <member name="F:MyCommonTexts.NotificationBuildingFormat">
            <summary>
             NotificationBuildingFormat
            </summary>
        </member>
        <member name="F:MyCommonTexts.NotificationColorFormat">
            <summary>
             NotificationColorFormat
            </summary>
        </member>
        <member name="F:MyCommonTexts.NotificationHideHintsInGameOptions">
            <summary>
             NotificationHideHintsInGameOptions
            </summary>
        </member>
        <member name="F:MyCommonTexts.NotificationHudHideFormat">
            <summary>
             NotificationHudHideFormat
            </summary>
        </member>
        <member name="F:MyCommonTexts.NotificationRotationFormat">
            <summary>
             NotificationRotationFormat
            </summary>
        </member>
        <member name="F:MyCommonTexts.NotificationScreenFormat">
            <summary>
             NotificationScreenFormat
            </summary>
        </member>
        <member name="F:MyCommonTexts.NotificationSlotEquipFormat">
            <summary>
             NotificationSlotEquipFormat
            </summary>
        </member>
        <member name="F:MyCommonTexts.NotificationToolDisabled">
            <summary>
             NotificationToolDisabled
            </summary>
        </member>
        <member name="F:MyCommonTexts.NotificationUnlimitedBuildingFormat">
            <summary>
             NotificationUnlimitedBuildingFormat
            </summary>
        </member>
        <member name="F:MyCommonTexts.ControlDescQuickLoad">
            <summary>
             ControlDescQuickLoad
            </summary>
        </member>
        <member name="F:MyCommonTexts.ControlDescQuickSave">
            <summary>
             ControlDescQuickSave
            </summary>
        </member>
        <member name="F:MyCommonTexts.MouseWheel">
            <summary>
             MouseWheel
            </summary>
        </member>
        <member name="F:MyCommonTexts.ScreenCubeBuilderBuildingBlocks">
            <summary>
             ScreenCubeBuilderBuildingBlocks
            </summary>
        </member>
        <member name="F:MyCommonTexts.ScreenCubeBuilderCreativeMode">
            <summary>
             ScreenCubeBuilderCreativeMode
            </summary>
        </member>
        <member name="F:MyCommonTexts.ScreenCubeBuilderSubtitle">
            <summary>
             ScreenCubeBuilderSubtitle
            </summary>
        </member>
        <member name="F:MyCommonTexts.ScreenCubeBuilderToolbar">
            <summary>
             ScreenCubeBuilderToolbar
            </summary>
        </member>
        <member name="F:MyCommonTexts.ScreenCubeBuilderToolbarConfig">
            <summary>
             ScreenCubeBuilderToolbarConfig
            </summary>
        </member>
        <member name="F:MyCommonTexts.LoadScreenButtonPublish">
            <summary>
             LoadScreenButtonPublish
            </summary>
        </member>
        <member name="F:MyCommonTexts.MessageBoxTextWorldPublished">
            <summary>
             MessageBoxTextWorldPublished
            </summary>
        </member>
        <member name="F:MyCommonTexts.MessageBoxTextWorldPublishedBrowser">
            <summary>
             MessageBoxTextWorldPublishedBrowser
            </summary>
        </member>
        <member name="F:MyCommonTexts.MessageBoxTextWorldPublishFailed">
            <summary>
             MessageBoxTextWorldPublishFailed
            </summary>
        </member>
        <member name="F:MyCommonTexts.MessageBoxTextCloudExtractError">
            <summary>
             MessageBoxTextCloudExtractError
            </summary>
        </member>
        <member name="F:MyCommonTexts.MessageBoxTextLoadWorldError">
            <summary>
             MessageBoxTextLoadWorldError
            </summary>
        </member>
        <member name="F:MyCommonTexts.MessageBoxTextModPublishFailed">
            <summary>
             MessageBoxTextModPublishFailed
            </summary>
        </member>
        <member name="F:MyCommonTexts.ProgressTextPublishingWorld">
            <summary>
             ProgressTextPublishingWorld
            </summary>
        </member>
        <member name="F:MyCommonTexts.ProgressTextUploadingWorld">
            <summary>
             ProgressTextUploadingWorld
            </summary>
        </member>
        <member name="F:MyCommonTexts.ScreenMenuButtonSubscribedWorlds">
            <summary>
             ScreenMenuButtonSubscribedWorlds
            </summary>
        </member>
        <member name="F:MyCommonTexts.ProgressTextCreatingWorld">
            <summary>
             ProgressTextCreatingWorld
            </summary>
        </member>
        <member name="F:MyCommonTexts.ScreenCaptionWorkshop">
            <summary>
             ScreenCaptionWorkshop
            </summary>
        </member>
        <member name="F:MyCommonTexts.ScreenMenuButtonRecommend">
            <summary>
             ScreenMenuButtonRecommend
            </summary>
        </member>
        <member name="F:MyCommonTexts.MessageBoxCaptionWorldPublished">
            <summary>
             MessageBoxCaptionWorldPublished
            </summary>
        </member>
        <member name="F:MyCommonTexts.MessageBoxCaptionWorldPublishFailed">
            <summary>
             MessageBoxCaptionWorldPublishFailed
            </summary>
        </member>
        <member name="F:MyCommonTexts.MessageBoxCaptionModPublished">
            <summary>
             MessageBoxCaptionModPublished
            </summary>
        </member>
        <member name="F:MyCommonTexts.MessageBoxCaptionModPublishFailed">
            <summary>
             MessageBoxCaptionModPublishFailed
            </summary>
        </member>
        <member name="F:MyCommonTexts.ScreenLoadSubscribedWorldCopyAndLoad">
            <summary>
             ScreenLoadSubscribedWorldCopyAndLoad
            </summary>
        </member>
        <member name="F:MyCommonTexts.LoadScreenButtonTooltipPublish">
            <summary>
             LoadScreenButtonTooltipPublish
            </summary>
        </member>
        <member name="F:MyCommonTexts.ToolTipMenuSubscribedWorlds">
            <summary>
             ToolTipMenuSubscribedWorlds
            </summary>
        </member>
        <member name="F:MyCommonTexts.MessageBoxCaptionDoYouWishToPublishWorld">
            <summary>
             MessageBoxCaptionDoYouWishToPublishWorld
            </summary>
        </member>
        <member name="F:MyCommonTexts.MessageBoxCaptionDoYouWishToUpdateWorld">
            <summary>
             MessageBoxCaptionDoYouWishToUpdateWorld
            </summary>
        </member>
        <member name="F:MyCommonTexts.MessageBoxTextDoYouWishToUpdateWorld">
            <summary>
             MessageBoxTextDoYouWishToUpdateWorld
            </summary>
        </member>
        <member name="F:MyCommonTexts.MessageBoxCaptionDoYouWishToPublishMod">
            <summary>
             MessageBoxCaptionDoYouWishToPublishMod
            </summary>
        </member>
        <member name="F:MyCommonTexts.MessageBoxCaptionDoYouWishToUpdateMod">
            <summary>
             MessageBoxCaptionDoYouWishToUpdateMod
            </summary>
        </member>
        <member name="F:MyCommonTexts.MessageBoxTextDoYouWishToUpdateMod">
            <summary>
             MessageBoxTextDoYouWishToUpdateMod
            </summary>
        </member>
        <member name="F:MyCommonTexts.ScreenLoadSubscribedWorldBrowseWorkshop">
            <summary>
             ScreenLoadSubscribedWorldBrowseWorkshop
            </summary>
        </member>
        <member name="F:MyCommonTexts.ScreenLoadSubscribedWorldRefresh">
            <summary>
             ScreenLoadSubscribedWorldRefresh
            </summary>
        </member>
        <member name="F:MyCommonTexts.NotificationNoWeaponSelected">
            <summary>
             NotificationNoWeaponSelected
            </summary>
        </member>
        <member name="F:MyCommonTexts.NotificationSwitchedToWeaponType">
            <summary>
             NotificationSwitchedToWeaponType
            </summary>
        </member>
        <member name="F:MyCommonTexts.NotificationInertiaDampenersOff">
            <summary>
             NotificationInertiaDampenersOff
            </summary>
        </member>
        <member name="F:MyCommonTexts.NotificationInertiaDampenersOn">
            <summary>
             NotificationInertiaDampenersOn
            </summary>
        </member>
        <member name="F:MyCommonTexts.LoadScreenButtonDelete">
            <summary>
             LoadScreenButtonDelete
            </summary>
        </member>
        <member name="F:MyCommonTexts.ScreenCaptionEditSettings">
            <summary>
             ScreenCaptionEditSettings
            </summary>
        </member>
        <member name="F:MyCommonTexts.ScreenCaptionSaveAs">
            <summary>
             ScreenCaptionSaveAs
            </summary>
        </member>
        <member name="F:MyCommonTexts.ScreenMenuButtonHelp">
            <summary>
             ScreenMenuButtonHelp
            </summary>
        </member>
        <member name="F:MyCommonTexts.ScreenMenuButtonLoadWorld">
            <summary>
             ScreenMenuButtonLoadWorld
            </summary>
        </member>
        <member name="F:MyCommonTexts.ScreenMenuButtonNewWorld">
            <summary>
             ScreenMenuButtonNewWorld
            </summary>
        </member>
        <member name="F:MyCommonTexts.ScreenMenuButtonOptions">
            <summary>
             ScreenMenuButtonOptions
            </summary>
        </member>
        <member name="F:MyCommonTexts.ScreenNewWorldButtonCustomWorld">
            <summary>
             ScreenNewWorldButtonCustomWorld
            </summary>
        </member>
        <member name="F:MyCommonTexts.ScreenOptionsButtonControls">
            <summary>
             ScreenOptionsButtonControls
            </summary>
        </member>
        <member name="F:MyCommonTexts.MessageBoxCaptionResetControlsToDefault">
            <summary>
             MessageBoxCaptionResetControlsToDefault
            </summary>
        </member>
        <member name="F:MyCommonTexts.MessageBoxTextResetControlsToDefault">
            <summary>
             MessageBoxTextResetControlsToDefault
            </summary>
        </member>
        <member name="F:MyCommonTexts.ScreenshotFailed">
            <summary>
             ScreenshotFailed
            </summary>
        </member>
        <member name="F:MyCommonTexts.ScreenshotSaved">
            <summary>
             ScreenshotSaved
            </summary>
        </member>
        <member name="F:MyCommonTexts.ExportToObjComplete">
            <summary>
             ExportToObjComplete
            </summary>
        </member>
        <member name="F:MyCommonTexts.ExportToObjFailed">
            <summary>
             ExportToObjFailed
            </summary>
        </member>
        <member name="F:MyCommonTexts.ScreenLoadSubscribedWorldOpenInWorkshop">
            <summary>
             ScreenLoadSubscribedWorldOpenInWorkshop
            </summary>
        </member>
        <member name="F:MyCommonTexts.ToolTipWorkshopBrowseWorkshop">
            <summary>
             ToolTipWorkshopBrowseWorkshop
            </summary>
        </member>
        <member name="F:MyCommonTexts.ToolTipWorkshopCopyAndLoad">
            <summary>
             ToolTipWorkshopCopyAndLoad
            </summary>
        </member>
        <member name="F:MyCommonTexts.ToolTipWorkshopOpenInWorkshop">
            <summary>
             ToolTipWorkshopOpenInWorkshop
            </summary>
        </member>
        <member name="F:MyCommonTexts.ToolTipWorkshopRefresh">
            <summary>
             ToolTipWorkshopRefresh
            </summary>
        </member>
        <member name="F:MyCommonTexts.SettingSymmetryX">
            <summary>
             SettingSymmetryX
            </summary>
        </member>
        <member name="F:MyCommonTexts.SettingSymmetryXOffset">
            <summary>
             SettingSymmetryXOffset
            </summary>
        </member>
        <member name="F:MyCommonTexts.SettingSymmetryY">
            <summary>
             SettingSymmetryY
            </summary>
        </member>
        <member name="F:MyCommonTexts.SettingSymmetryYOffset">
            <summary>
             SettingSymmetryYOffset
            </summary>
        </member>
        <member name="F:MyCommonTexts.SettingSymmetryZ">
            <summary>
             SettingSymmetryZ
            </summary>
        </member>
        <member name="F:MyCommonTexts.SettingSymmetryZOffset">
            <summary>
             SettingSymmetryZOffset
            </summary>
        </member>
        <member name="F:MyCommonTexts.NotificationPickupObject">
            <summary>
             NotificationPickupObject
            </summary>
        </member>
        <member name="F:MyCommonTexts.CubeBuilderPasteNotification">
            <summary>
             CubeBuilderPasteNotification
            </summary>
        </member>
        <member name="F:MyCommonTexts.MessageBoxTextErrorLoadingEntities">
            <summary>
             MessageBoxTextErrorLoadingEntities
            </summary>
        </member>
        <member name="F:MyCommonTexts.MessageBoxTextErrorLoadingScripting">
            <summary>
             MessageBoxTextErrorLoadingScripting
            </summary>
        </member>
        <member name="F:MyCommonTexts.MessageBoxTextAreYouSureToMoveGridToClipboard">
            <summary>
             MessageBoxTextAreYouSureToMoveGridToClipboard
            </summary>
        </member>
        <member name="F:MyCommonTexts.MessageBoxTextAreYouSureToDeleteGrid">
            <summary>
             MessageBoxTextAreYouSureToDeleteGrid
            </summary>
        </member>
        <member name="F:MyCommonTexts.MessageBoxTextMemoryLimitReachedDuringLoad">
            <summary>
             MessageBoxTextMemoryLimitReachedDuringLoad
            </summary>
        </member>
        <member name="F:MyCommonTexts.ScreenOptionsControls_Keyboard2">
            <summary>
             ScreenOptionsControls_Keyboard2
            </summary>
        </member>
        <member name="F:MyCommonTexts.DialogTextDownloadingWorld">
            <summary>
             DialogTextDownloadingWorld
            </summary>
        </member>
        <member name="F:MyCommonTexts.DialogTextDownloadWorldFailed">
            <summary>
             DialogTextDownloadWorldFailed
            </summary>
        </member>
        <member name="F:MyCommonTexts.DialogTextCheckServerStatus">
            <summary>
             DialogTextCheckServerStatus
            </summary>
        </member>
        <member name="F:MyCommonTexts.DialogTextJoiningWorld">
            <summary>
             DialogTextJoiningWorld
            </summary>
        </member>
        <member name="F:MyCommonTexts.DialogTextJoinWorldFailed">
            <summary>
             DialogTextJoinWorldFailed
            </summary>
        </member>
        <member name="F:MyCommonTexts.GpuUnderMinimumNotification">
            <summary>
             GpuUnderMinimumNotification
            </summary>
        </member>
        <member name="F:MyCommonTexts.ShowRotationHints">
            <summary>
             ShowRotationHints
            </summary>
        </member>
        <member name="F:MyCommonTexts.ToolTipGameOptionsShowRotationHints">
            <summary>
             ToolTipGameOptionsShowRotationHints
            </summary>
        </member>
        <member name="F:MyCommonTexts.UnknownControl_Unassigned">
            <summary>
             UnknownControl_Unassigned
            </summary>
        </member>
        <member name="F:MyCommonTexts.ScreenOptionsGame_BuildingMode">
            <summary>
             ScreenOptionsGame_BuildingMode
            </summary>
        </member>
        <member name="F:MyCommonTexts.ScreenOptionsGame_Line">
            <summary>
             ScreenOptionsGame_Line
            </summary>
        </member>
        <member name="F:MyCommonTexts.ScreenOptionsGame_Plane">
            <summary>
             ScreenOptionsGame_Plane
            </summary>
        </member>
        <member name="F:MyCommonTexts.ScreenOptionsGame_SingleBlock">
            <summary>
             ScreenOptionsGame_SingleBlock
            </summary>
        </member>
        <member name="F:MyCommonTexts.ControlName_Suicide">
            <summary>
             ControlName_Suicide
            </summary>
        </member>
        <member name="F:MyCommonTexts.MultiplayerErrorStartingServer">
            <summary>
             MultiplayerErrorStartingServer
            </summary>
        </member>
        <member name="F:MyCommonTexts.AlreadyUsedBySomebodyElse">
            <summary>
             AlreadyUsedBySomebodyElse
            </summary>
        </member>
        <member name="F:MyCommonTexts.MultiplayerJoinFriendsGames">
            <summary>
             MultiplayerJoinFriendsGames
            </summary>
        </member>
        <member name="F:MyCommonTexts.ScreenCaptionPlayers">
            <summary>
             ScreenCaptionPlayers
            </summary>
        </member>
        <member name="F:MyCommonTexts.ScreenPlayersLobby_Friends">
            <summary>
             ScreenPlayersLobby_Friends
            </summary>
        </member>
        <member name="F:MyCommonTexts.ScreenPlayersLobby_Private">
            <summary>
             ScreenPlayersLobby_Private
            </summary>
        </member>
        <member name="F:MyCommonTexts.ScreenPlayersLobby_Public">
            <summary>
             ScreenPlayersLobby_Public
            </summary>
        </member>
        <member name="F:MyCommonTexts.ScreenPlayers_FactionName">
            <summary>
             ScreenPlayers_FactionName
            </summary>
        </member>
        <member name="F:MyCommonTexts.ScreenPlayers_FactionTag">
            <summary>
             ScreenPlayers_FactionTag
            </summary>
        </member>
        <member name="F:MyCommonTexts.ScreenPlayers_Factions">
            <summary>
             ScreenPlayers_Factions
            </summary>
        </member>
        <member name="F:MyCommonTexts.ScreenPlayers_GameOwner">
            <summary>
             ScreenPlayers_GameOwner
            </summary>
        </member>
        <member name="F:MyCommonTexts.ScreenPlayers_Invite">
            <summary>
             ScreenPlayers_Invite
            </summary>
        </member>
        <member name="F:MyCommonTexts.ScreenPlayers_Kick">
            <summary>
             ScreenPlayers_Kick
            </summary>
        </member>
        <member name="F:MyCommonTexts.ScreenPlayers_PlayerName">
            <summary>
             ScreenPlayers_PlayerName
            </summary>
        </member>
        <member name="F:MyCommonTexts.DialogDownloadWorld_WorldDoesNotExists">
            <summary>
             DialogDownloadWorld_WorldDoesNotExists
            </summary>
        </member>
        <member name="F:MyCommonTexts.MessageBoxCaptionKicked">
            <summary>
             MessageBoxCaptionKicked
            </summary>
        </member>
        <member name="F:MyCommonTexts.MessageBoxTextYouHaveBeenKicked">
            <summary>
             MessageBoxTextYouHaveBeenKicked
            </summary>
        </member>
        <member name="F:MyCommonTexts.NotificationPasteFailed">
            <summary>
             NotificationPasteFailed
            </summary>
        </member>
        <member name="F:MyCommonTexts.WorldSettings_OnlineModeFriends">
            <summary>
             WorldSettings_OnlineModeFriends
            </summary>
        </member>
        <member name="F:MyCommonTexts.WorldSettings_Author">
            <summary>
             WorldSettings_Author
            </summary>
        </member>
        <member name="F:MyCommonTexts.WorldSettings_Rating">
            <summary>
             WorldSettings_Rating
            </summary>
        </member>
        <member name="F:MyCommonTexts.WorldSettings_Tooltip_Refresh">
            <summary>
             WorldSettings_Tooltip_Refresh
            </summary>
        </member>
        <member name="F:MyCommonTexts.WorldSettings_Tooltip_ToggleThumbnails">
            <summary>
             WorldSettings_Tooltip_ToggleThumbnails
            </summary>
        </member>
        <member name="F:MyCommonTexts.MessageBoxTextAreYouSureYouWantToReconnect">
            <summary>
             MessageBoxTextAreYouSureYouWantToReconnect
            </summary>
        </member>
        <member name="F:MyCommonTexts.NotificationMultiplayerDisabled">
            <summary>
             NotificationMultiplayerDisabled
            </summary>
        </member>
        <member name="F:MyCommonTexts.SteamIsOfflinePleaseRestart">
            <summary>
             SteamIsOfflinePleaseRestart
            </summary>
        </member>
        <member name="F:MyCommonTexts.InventoryScreen_InstallInProgress">
            <summary>
             InventoryScreen_InstallInProgress
            </summary>
        </member>
        <member name="F:MyCommonTexts.MultiplayerCompatibleVersions">
            <summary>
             MultiplayerCompatibleVersions
            </summary>
        </member>
        <member name="F:MyCommonTexts.MaxPlayers">
            <summary>
             MaxPlayers
            </summary>
        </member>
        <member name="F:MyCommonTexts.DialogWaitingForWorldData">
            <summary>
             DialogWaitingForWorldData
            </summary>
        </member>
        <member name="F:MyCommonTexts.MultiplayerErrorConnectionFailed">
            <summary>
             MultiplayerErrorConnectionFailed
            </summary>
        </member>
        <member name="F:MyCommonTexts.MultiplayerStateConnectingToServer">
            <summary>
             MultiplayerStateConnectingToServer
            </summary>
        </member>
        <member name="F:MyCommonTexts.MultiplayerStateWaitingForServer">
            <summary>
             MultiplayerStateWaitingForServer
            </summary>
        </member>
        <member name="F:MyCommonTexts.HarvestingWarningInventoryMightBeTruncatedAreYouSure">
            <summary>
             HarvestingWarningInventoryMightBeTruncatedAreYouSure
            </summary>
        </member>
        <member name="F:MyCommonTexts.ScreenCaptionFriendWorlds">
            <summary>
             ScreenCaptionFriendWorlds
            </summary>
        </member>
        <member name="F:MyCommonTexts.ScreenCaptionPublicWorlds">
            <summary>
             ScreenCaptionPublicWorlds
            </summary>
        </member>
        <member name="F:MyCommonTexts.ControlName_CubeColorChange">
            <summary>
             ControlName_CubeColorChange
            </summary>
        </member>
        <member name="F:MyCommonTexts.ControlName_BuildPlanner">
            <summary>
             ControlName_BuildPlanner
            </summary>
        </member>
        <member name="F:MyCommonTexts.NotificationWeaponDisabledInSettings">
            <summary>
             NotificationWeaponDisabledInSettings
            </summary>
        </member>
        <member name="F:MyCommonTexts.ControlDescPlayersList">
            <summary>
             ControlDescPlayersList
            </summary>
        </member>
        <member name="F:MyCommonTexts.ScreenMenuButtonPlayers">
            <summary>
             ScreenMenuButtonPlayers
            </summary>
        </member>
        <member name="F:MyCommonTexts.ItemDamagedDescription">
            <summary>
             ItemDamagedDescription
            </summary>
        </member>
        <member name="F:MyCommonTexts.MultiplaterJoin_ServerIsNotResponding">
            <summary>
             MultiplaterJoin_ServerIsNotResponding
            </summary>
        </member>
        <member name="F:MyCommonTexts.UnsupportedAspectRatio">
            <summary>
             UnsupportedAspectRatio
            </summary>
        </member>
        <member name="F:MyCommonTexts.OnlyFriendsCanJoinThisGame">
            <summary>
             OnlyFriendsCanJoinThisGame
            </summary>
        </member>
        <member name="F:MyCommonTexts.LobbyDoesntExist">
            <summary>
             LobbyDoesntExist
            </summary>
        </member>
        <member name="F:MyCommonTexts.LobbyNotAllowed">
            <summary>
             LobbyNotAllowed
            </summary>
        </member>
        <member name="F:MyCommonTexts.LobbyFull">
            <summary>
             LobbyFull
            </summary>
        </member>
        <member name="F:MyCommonTexts.LobbyError">
            <summary>
             LobbyError
            </summary>
        </member>
        <member name="F:MyCommonTexts.LobbyBanned">
            <summary>
             LobbyBanned
            </summary>
        </member>
        <member name="F:MyCommonTexts.LobbyLimited">
            <summary>
             LobbyLimited
            </summary>
        </member>
        <member name="F:MyCommonTexts.LobbyClanDisabled">
            <summary>
             LobbyClanDisabled
            </summary>
        </member>
        <member name="F:MyCommonTexts.LobbyCommunityBan">
            <summary>
             LobbyCommunityBan
            </summary>
        </member>
        <member name="F:MyCommonTexts.LobbyMemberBlockedYou">
            <summary>
             LobbyMemberBlockedYou
            </summary>
        </member>
        <member name="F:MyCommonTexts.LobbyYouBlockedMember">
            <summary>
             LobbyYouBlockedMember
            </summary>
        </member>
        <member name="F:MyCommonTexts.LobbyCancelled">
            <summary>
             LobbyCancelled
            </summary>
        </member>
        <member name="F:MyCommonTexts.LobbyLostInternetConnection">
            <summary>
             LobbyLostInternetConnection
            </summary>
        </member>
        <member name="F:MyCommonTexts.LobbyServiceUnavailable">
            <summary>
             LobbyServiceUnavailable
            </summary>
        </member>
        <member name="F:MyCommonTexts.LobbyNoDirectConnections">
            <summary>
             LobbyNoDirectConnections
            </summary>
        </member>
        <member name="F:MyCommonTexts.LobbyVersionMismatch">
            <summary>
             LobbyVersionMismatch
            </summary>
        </member>
        <member name="F:MyCommonTexts.LobbyUserMultiplayerRestricted">
            <summary>
             LobbyUserMultiplayerRestricted
            </summary>
        </member>
        <member name="F:MyCommonTexts.LobbyConnectionProblems">
            <summary>
             LobbyConnectionProblems
            </summary>
        </member>
        <member name="F:MyCommonTexts.LobbyInvalidPasscode">
            <summary>
             LobbyInvalidPasscode
            </summary>
        </member>
        <member name="F:MyCommonTexts.LobbyNoUser">
            <summary>
             LobbyNoUser
            </summary>
        </member>
        <member name="F:MyCommonTexts.ToolTipWorldSettingsDescription">
            <summary>
             ToolTipWorldSettingsDescription
            </summary>
        </member>
        <member name="F:MyCommonTexts.ScreenOptionsGame_UIOpacity">
            <summary>
             ScreenOptionsGame_UIOpacity
            </summary>
        </member>
        <member name="F:MyCommonTexts.ScreenOptionsGame_UIBkOpacity">
            <summary>
             ScreenOptionsGame_UIBkOpacity
            </summary>
        </member>
        <member name="F:MyCommonTexts.ScreenOptionsGame_HUDBkOpacity">
            <summary>
             ScreenOptionsGame_HUDBkOpacity
            </summary>
        </member>
        <member name="F:MyCommonTexts.NotificationInventoryFull">
            <summary>
             NotificationInventoryFull
            </summary>
        </member>
        <member name="F:MyCommonTexts.NotificationInventoryNotEmpty">
            <summary>
             NotificationInventoryNotEmpty
            </summary>
        </member>
        <member name="F:MyCommonTexts.OutOfAmmo">
            <summary>
             OutOfAmmo
            </summary>
        </member>
        <member name="F:MyCommonTexts.NotificationMissingComponentToPlaceBlockFormat">
            <summary>
             NotificationMissingComponentToPlaceBlockFormat
            </summary>
        </member>
        <member name="F:MyCommonTexts.JoinGame_ColumnTitle_GameMode">
            <summary>
             JoinGame_ColumnTitle_GameMode
            </summary>
        </member>
        <member name="F:MyCommonTexts.JoinGame_ColumnTitle_Players">
            <summary>
             JoinGame_ColumnTitle_Players
            </summary>
        </member>
        <member name="F:MyCommonTexts.JoinGame_ColumnTitle_Username">
            <summary>
             JoinGame_ColumnTitle_Username
            </summary>
        </member>
        <member name="F:MyCommonTexts.JoinGame_ColumnTitle_World">
            <summary>
             JoinGame_ColumnTitle_World
            </summary>
        </member>
        <member name="F:MyCommonTexts.JoinGame_ColumnTitle_WorldSize">
            <summary>
             JoinGame_ColumnTitle_WorldSize
            </summary>
        </member>
        <member name="F:MyCommonTexts.MessageBoxTextSuicide">
            <summary>
             MessageBoxTextSuicide
            </summary>
        </member>
        <member name="F:MyCommonTexts.MultiplayerErrorServerHasLeft">
            <summary>
             MultiplayerErrorServerHasLeft
            </summary>
        </member>
        <member name="F:MyCommonTexts.MultiplayerErrorAppVersionMismatch">
            <summary>
             MultiplayerErrorAppVersionMismatch
            </summary>
        </member>
        <member name="F:MyCommonTexts.NotificationRespawn">
            <summary>
             NotificationRespawn
            </summary>
        </member>
        <member name="F:MyCommonTexts.HudBlockInfo_Required">
            <summary>
             HudBlockInfo_Required
            </summary>
        </member>
        <member name="F:MyCommonTexts.JoinGame_GameTypeToolTip_MultipliersFormat">
            <summary>
             JoinGame_GameTypeToolTip_MultipliersFormat
            </summary>
        </member>
        <member name="F:MyCommonTexts.NotificationClientConnected">
            <summary>
             NotificationClientConnected
            </summary>
        </member>
        <member name="F:MyCommonTexts.NotificationClientDisconnected">
            <summary>
             NotificationClientDisconnected
            </summary>
        </member>
        <member name="F:MyCommonTexts.MultiplayerError_IncorrectVersion">
            <summary>
             MultiplayerError_IncorrectVersion
            </summary>
        </member>
        <member name="F:MyCommonTexts.MultiplayerError_FamilyShareDisabled">
            <summary>
             MultiplayerError_FamilyShareDisabled
            </summary>
        </member>
        <member name="F:MyCommonTexts.ShowCrosshair">
            <summary>
             ShowCrosshair
            </summary>
        </member>
        <member name="F:MyCommonTexts.ToolTipGameOptionsShowCrosshair">
            <summary>
             ToolTipGameOptionsShowCrosshair
            </summary>
        </member>
        <member name="F:MyCommonTexts.MessageBoxTextSavingInProgress">
            <summary>
             MessageBoxTextSavingInProgress
            </summary>
        </member>
        <member name="F:MyCommonTexts.ScreenOptionsGame_LocalizationWarning">
            <summary>
             ScreenOptionsGame_LocalizationWarning
            </summary>
        </member>
        <member name="F:MyCommonTexts.ScreenOptionsGame_MoreInfo">
            <summary>
             ScreenOptionsGame_MoreInfo
            </summary>
        </member>
        <member name="F:MyCommonTexts.Multiplayer_IndirectConnection">
            <summary>
             Multiplayer_IndirectConnection
            </summary>
        </member>
        <member name="F:MyCommonTexts.Multiplayer_NoConnection">
            <summary>
             Multiplayer_NoConnection
            </summary>
        </member>
        <member name="F:MyCommonTexts.GamePaused">
            <summary>
             GamePaused
            </summary>
        </member>
        <member name="F:MyCommonTexts.ControlDescPauseGame">
            <summary>
             ControlDescPauseGame
            </summary>
        </member>
        <member name="F:MyCommonTexts.ControlName_PauseGame">
            <summary>
             ControlName_PauseGame
            </summary>
        </member>
        <member name="F:MyCommonTexts.KeysPause">
            <summary>
             KeysPause
            </summary>
        </member>
        <member name="F:MyCommonTexts.NotificationWeaponNotWorking">
            <summary>
             NotificationWeaponNotWorking
            </summary>
        </member>
        <member name="F:MyCommonTexts.DialogAmount_AddAmountCaption">
            <summary>
             DialogAmount_AddAmountCaption
            </summary>
        </member>
        <member name="F:MyCommonTexts.DialogAmount_SetValueCaption">
            <summary>
             DialogAmount_SetValueCaption
            </summary>
        </member>
        <member name="F:MyCommonTexts.NotificationHealthCritical">
            <summary>
             NotificationHealthCritical
            </summary>
        </member>
        <member name="F:MyCommonTexts.NotificationHealthLow">
            <summary>
             NotificationHealthLow
            </summary>
        </member>
        <member name="F:MyCommonTexts.MultiplayerError_DifferentData">
            <summary>
             MultiplayerError_DifferentData
            </summary>
        </member>
        <member name="F:MyCommonTexts.MultiplayerJoin_IncompatibleGameDataLabel">
            <summary>
             MultiplayerJoin_IncompatibleGameDataLabel
            </summary>
        </member>
        <member name="F:MyCommonTexts.ScreenPlayers_Rank">
            <summary>
             ScreenPlayers_Rank
            </summary>
        </member>
        <member name="F:MyCommonTexts.MultiplayerJoinServers">
            <summary>
             MultiplayerJoinServers
            </summary>
        </member>
        <member name="F:MyCommonTexts.MultiplayerErrorAlreadyJoined">
            <summary>
             MultiplayerErrorAlreadyJoined
            </summary>
        </member>
        <member name="F:MyCommonTexts.MultiplayerErrorIncorrectTime">
            <summary>
             MultiplayerErrorIncorrectTime
            </summary>
        </member>
        <member name="F:MyCommonTexts.MultiplayerErrorNotInGroup">
            <summary>
             MultiplayerErrorNotInGroup
            </summary>
        </member>
        <member name="F:MyCommonTexts.MultiplayerErrorServerFull">
            <summary>
             MultiplayerErrorServerFull
            </summary>
        </member>
        <member name="F:MyCommonTexts.MultiplayerErrorSteamServersOffline">
            <summary>
             MultiplayerErrorSteamServersOffline
            </summary>
        </member>
        <member name="F:MyCommonTexts.MultiplayerErrorTicketInvalid">
            <summary>
             MultiplayerErrorTicketInvalid
            </summary>
        </member>
        <member name="F:MyCommonTexts.MultiplayerJoinLANServers">
            <summary>
             MultiplayerJoinLANServers
            </summary>
        </member>
        <member name="F:MyCommonTexts.JoinGame_TabTitle_Friends">
            <summary>
             JoinGame_TabTitle_Friends
            </summary>
        </member>
        <member name="F:MyCommonTexts.JoinGame_TabTitle_LAN">
            <summary>
             JoinGame_TabTitle_LAN
            </summary>
        </member>
        <member name="F:MyCommonTexts.JoinGame_TabTitle_Lobbies">
            <summary>
             JoinGame_TabTitle_Lobbies
            </summary>
        </member>
        <member name="F:MyCommonTexts.JoinGame_TabTitle_Servers">
            <summary>
             JoinGame_TabTitle_Servers
            </summary>
        </member>
        <member name="F:MyCommonTexts.JoinGame_Title">
            <summary>
             JoinGame_Title
            </summary>
        </member>
        <member name="F:MyCommonTexts.JoinGame_ColumnTitle_Ping">
            <summary>
             JoinGame_ColumnTitle_Ping
            </summary>
        </member>
        <member name="F:MyCommonTexts.JoinGame_ColumnTitle_Server">
            <summary>
             JoinGame_ColumnTitle_Server
            </summary>
        </member>
        <member name="F:MyCommonTexts.MultiplayerErrorLoggedInElseWhere">
            <summary>
             MultiplayerErrorLoggedInElseWhere
            </summary>
        </member>
        <member name="F:MyCommonTexts.MultiplayerErrorNoLicenseOrExpired">
            <summary>
             MultiplayerErrorNoLicenseOrExpired
            </summary>
        </member>
        <member name="F:MyCommonTexts.MultiplayerErrorTicketAlreadyUsed">
            <summary>
             MultiplayerErrorTicketAlreadyUsed
            </summary>
        </member>
        <member name="F:MyCommonTexts.MultiplayerErrorNotFound">
            <summary>
             MultiplayerErrorNotFound
            </summary>
        </member>
        <member name="F:MyCommonTexts.MultiplayerErrorTicketCanceled">
            <summary>
             MultiplayerErrorTicketCanceled
            </summary>
        </member>
        <member name="F:MyCommonTexts.MultiplayerErrorUserNotConnected">
            <summary>
             MultiplayerErrorUserNotConnected
            </summary>
        </member>
        <member name="F:MyCommonTexts.MultiplayerErrorVACBanned">
            <summary>
             MultiplayerErrorVACBanned
            </summary>
        </member>
        <member name="F:MyCommonTexts.MultiplayerErrorVACCheckTimedOut">
            <summary>
             MultiplayerErrorVACCheckTimedOut
            </summary>
        </member>
        <member name="F:MyCommonTexts.MultiplayerJoinAllowedGroups">
            <summary>
             MultiplayerJoinAllowedGroups
            </summary>
        </member>
        <member name="F:MyCommonTexts.NewsDownloadingFailed">
            <summary>
             NewsDownloadingFailed
            </summary>
        </member>
        <member name="F:MyCommonTexts.MessageBoxCaptionInfo">
            <summary>
             MessageBoxCaptionInfo
            </summary>
        </member>
        <member name="F:MyCommonTexts.LoadingNeedsXML">
            <summary>
             LoadingNeedsXML
            </summary>
        </member>
        <member name="F:MyCommonTexts.MultiplayerErrorGroupIdInvalid">
            <summary>
             MultiplayerErrorGroupIdInvalid
            </summary>
        </member>
        <member name="F:MyCommonTexts.JoinGame_TabTooltip_LAN">
            <summary>
             JoinGame_TabTooltip_LAN
            </summary>
        </member>
        <member name="F:MyCommonTexts.JoinGame_TabTooltip_Lobbies">
            <summary>
             JoinGame_TabTooltip_Lobbies
            </summary>
        </member>
        <member name="F:MyCommonTexts.JoinGame_TabTooltip_Servers">
            <summary>
             JoinGame_TabTooltip_Servers
            </summary>
        </member>
        <member name="F:MyCommonTexts.PlayerCharacterColor">
            <summary>
             PlayerCharacterColor
            </summary>
        </member>
        <member name="F:MyCommonTexts.NotificationHintPressToUseWardrobe">
            <summary>
             NotificationHintPressToUseWardrobe
            </summary>
        </member>
        <member name="F:MyCommonTexts.ScreenOptionsVideo_WindowMode">
            <summary>
             ScreenOptionsVideo_WindowMode
            </summary>
        </member>
        <member name="F:MyCommonTexts.ScreenOptionsVideo_WindowMode_Fullscreen">
            <summary>
             ScreenOptionsVideo_WindowMode_Fullscreen
            </summary>
        </member>
        <member name="F:MyCommonTexts.ScreenOptionsVideo_WindowMode_FullscreenWindow">
            <summary>
             ScreenOptionsVideo_WindowMode_FullscreenWindow
            </summary>
        </member>
        <member name="F:MyCommonTexts.ScreenOptionsVideo_WindowMode_Window">
            <summary>
             ScreenOptionsVideo_WindowMode_Window
            </summary>
        </member>
        <member name="F:MyCommonTexts.SpectatorControls">
            <summary>
             SpectatorControls
            </summary>
        </member>
        <member name="F:MyCommonTexts.SpectatorControls_Delta_Desc">
            <summary>
             SpectatorControls_Delta_Desc
            </summary>
        </member>
        <member name="F:MyCommonTexts.MultiplayerErrorBannedByAdmins">
            <summary>
             MultiplayerErrorBannedByAdmins
            </summary>
        </member>
        <member name="F:MyCommonTexts.MultiplayerErrorBannedByAdminsWithDialog">
            <summary>
             MultiplayerErrorBannedByAdminsWithDialog
            </summary>
        </member>
        <member name="F:MyCommonTexts.MessageBoxTextYouHaveBeenBanned">
            <summary>
             MessageBoxTextYouHaveBeenBanned
            </summary>
        </member>
        <member name="F:MyCommonTexts.ScreenPlayers_Ban">
            <summary>
             ScreenPlayers_Ban
            </summary>
        </member>
        <member name="F:MyCommonTexts.HudMarker_ReturnToWorld">
            <summary>
             HudMarker_ReturnToWorld
            </summary>
        </member>
        <member name="F:MyCommonTexts.NotificationLeavingWorld">
            <summary>
             NotificationLeavingWorld
            </summary>
        </member>
        <member name="F:MyCommonTexts.ScreenCaptionAdvancedSettings">
            <summary>
             ScreenCaptionAdvancedSettings
            </summary>
        </member>
        <member name="F:MyCommonTexts.Spectator">
            <summary>
             Spectator
            </summary>
        </member>
        <member name="F:MyCommonTexts.SpectatorControls_Delta">
            <summary>
             SpectatorControls_Delta
            </summary>
        </member>
        <member name="F:MyCommonTexts.SpectatorControls_Free">
            <summary>
             SpectatorControls_Free
            </summary>
        </member>
        <member name="F:MyCommonTexts.SpectatorControls_None">
            <summary>
             SpectatorControls_None
            </summary>
        </member>
        <member name="F:MyCommonTexts.SpectatorControls_Static">
            <summary>
             SpectatorControls_Static
            </summary>
        </member>
        <member name="F:MyCommonTexts.MessageBoxErrorFactionsNameAlreadyExists">
            <summary>
             MessageBoxErrorFactionsNameAlreadyExists
            </summary>
        </member>
        <member name="F:MyCommonTexts.MessageBoxErrorFactionsTagAlreadyExists">
            <summary>
             MessageBoxErrorFactionsTagAlreadyExists
            </summary>
        </member>
        <member name="F:MyCommonTexts.MessageBoxErrorFactionsNameTooShort">
            <summary>
             MessageBoxErrorFactionsNameTooShort
            </summary>
        </member>
        <member name="F:MyCommonTexts.Edit">
            <summary>
             Edit
            </summary>
        </member>
        <member name="F:MyCommonTexts.Kick">
            <summary>
             Kick
            </summary>
        </member>
        <member name="F:MyCommonTexts.Leader">
            <summary>
             Leader
            </summary>
        </member>
        <member name="F:MyCommonTexts.Member">
            <summary>
             Member
            </summary>
        </member>
        <member name="F:MyCommonTexts.MessageBoxConfirmFactionsKickPlayer">
            <summary>
             MessageBoxConfirmFactionsKickPlayer
            </summary>
        </member>
        <member name="F:MyCommonTexts.MessageBoxConfirmFactionsLeave">
            <summary>
             MessageBoxConfirmFactionsLeave
            </summary>
        </member>
        <member name="F:MyCommonTexts.Promote">
            <summary>
             Promote
            </summary>
        </member>
        <member name="F:MyCommonTexts.Demote">
            <summary>
             Demote
            </summary>
        </member>
        <member name="F:MyCommonTexts.AccessDenied">
            <summary>
             AccessDenied
            </summary>
        </member>
        <member name="F:MyCommonTexts.Founder">
            <summary>
             Founder
            </summary>
        </member>
        <member name="F:MyCommonTexts.Status">
            <summary>
             Status
            </summary>
        </member>
        <member name="F:MyCommonTexts.Accept">
            <summary>
             Accept
            </summary>
        </member>
        <member name="F:MyCommonTexts.Deny">
            <summary>
             Deny
            </summary>
        </member>
        <member name="F:MyCommonTexts.MessageBoxConfirmFactionsAcceptJoin">
            <summary>
             MessageBoxConfirmFactionsAcceptJoin
            </summary>
        </member>
        <member name="F:MyCommonTexts.MessageBoxConfirmFactionsDenyJoin">
            <summary>
             MessageBoxConfirmFactionsDenyJoin
            </summary>
        </member>
        <member name="F:MyCommonTexts.MessageBoxConfirmFactionsDemote">
            <summary>
             MessageBoxConfirmFactionsDemote
            </summary>
        </member>
        <member name="F:MyCommonTexts.MessageBoxConfirmFactionsPromote">
            <summary>
             MessageBoxConfirmFactionsPromote
            </summary>
        </member>
        <member name="F:MyCommonTexts.Applicant">
            <summary>
             Applicant
            </summary>
        </member>
        <member name="F:MyCommonTexts.Tag">
            <summary>
             Tag
            </summary>
        </member>
        <member name="F:MyCommonTexts.SessionDeleteFailed">
            <summary>
             SessionDeleteFailed
            </summary>
        </member>
        <member name="F:MyCommonTexts.Medicals_Title">
            <summary>
             Medicals_Title
            </summary>
        </member>
        <member name="F:MyCommonTexts.MessageBoxTextChangeOwner">
            <summary>
             MessageBoxTextChangeOwner
            </summary>
        </member>
        <member name="F:MyCommonTexts.Respawn">
            <summary>
             Respawn
            </summary>
        </member>
        <member name="F:MyCommonTexts.MultiplayerJoinSameGameData">
            <summary>
             MultiplayerJoinSameGameData
            </summary>
        </member>
        <member name="F:MyCommonTexts.Refresh">
            <summary>
             Refresh
            </summary>
        </member>
        <member name="F:MyCommonTexts.PlayerInfo_Dead">
            <summary>
             PlayerInfo_Dead
            </summary>
        </member>
        <member name="F:MyCommonTexts.ScreenMods_ActiveMods">
            <summary>
             ScreenMods_ActiveMods
            </summary>
        </member>
        <member name="F:MyCommonTexts.ScreenMods_AvailableMods">
            <summary>
             ScreenMods_AvailableMods
            </summary>
        </member>
        <member name="F:MyCommonTexts.ToolTipScreenMods_MoveLeft">
            <summary>
             ToolTipScreenMods_MoveLeft
            </summary>
        </member>
        <member name="F:MyCommonTexts.ToolTipScreenMods_MoveLeftAll">
            <summary>
             ToolTipScreenMods_MoveLeftAll
            </summary>
        </member>
        <member name="F:MyCommonTexts.ToolTipScreenMods_MoveRight">
            <summary>
             ToolTipScreenMods_MoveRight
            </summary>
        </member>
        <member name="F:MyCommonTexts.ToolTipScreenMods_MoveRightAll">
            <summary>
             ToolTipScreenMods_MoveRightAll
            </summary>
        </member>
        <member name="F:MyCommonTexts.WorldSettings_Mods">
            <summary>
             WorldSettings_Mods
            </summary>
        </member>
        <member name="F:MyCommonTexts.WorldSettings_Advanced">
            <summary>
             WorldSettings_Advanced
            </summary>
        </member>
        <member name="F:MyCommonTexts.ToolTipWorkshopOpenModInWorkshop">
            <summary>
             ToolTipWorkshopOpenModInWorkshop
            </summary>
        </member>
        <member name="F:MyCommonTexts.ToolTipWorkshopRefreshMod">
            <summary>
             ToolTipWorkshopRefreshMod
            </summary>
        </member>
        <member name="F:MyCommonTexts.JoinGame_SearchLabel">
            <summary>
             JoinGame_SearchLabel
            </summary>
        </member>
        <member name="F:MyCommonTexts.ProgressTextDownloadingMods">
            <summary>
             ProgressTextDownloadingMods
            </summary>
        </member>
        <member name="F:MyCommonTexts.NotificationClientCannotSave">
            <summary>
             NotificationClientCannotSave
            </summary>
        </member>
        <member name="F:MyCommonTexts.ToolTipScreenMods_MoveDown">
            <summary>
             ToolTipScreenMods_MoveDown
            </summary>
        </member>
        <member name="F:MyCommonTexts.ToolTipScreenMods_MoveUp">
            <summary>
             ToolTipScreenMods_MoveUp
            </summary>
        </member>
        <member name="F:MyCommonTexts.ToolTipScreenMods_MoveBottom">
            <summary>
             ToolTipScreenMods_MoveBottom
            </summary>
        </member>
        <member name="F:MyCommonTexts.ToolTipScreenMods_MoveTop">
            <summary>
             ToolTipScreenMods_MoveTop
            </summary>
        </member>
        <member name="F:MyCommonTexts.MessageBoxTextCannotCreateGroup">
            <summary>
             MessageBoxTextCannotCreateGroup
            </summary>
        </member>
        <member name="F:MyCommonTexts.MessageBoxTextCannotDeleteGroup">
            <summary>
             MessageBoxTextCannotDeleteGroup
            </summary>
        </member>
        <member name="F:MyCommonTexts.MessageBoxTextYouHaveBeenKickedFromFaction">
            <summary>
             MessageBoxTextYouHaveBeenKickedFromFaction
            </summary>
        </member>
        <member name="F:MyCommonTexts.MessageBoxTextYouHaveBeenAcceptedToFaction">
            <summary>
             MessageBoxTextYouHaveBeenAcceptedToFaction
            </summary>
        </member>
        <member name="F:MyCommonTexts.MessageBoxTextYouCannotJoinToFaction">
            <summary>
             MessageBoxTextYouCannotJoinToFaction
            </summary>
        </member>
        <member name="F:MyCommonTexts.MessageBoxTextApplicantCannotJoinToFaction">
            <summary>
             MessageBoxTextApplicantCannotJoinToFaction
            </summary>
        </member>
        <member name="F:MyCommonTexts.ControlName_ToolbarDown">
            <summary>
             ControlName_ToolbarDown
            </summary>
        </member>
        <member name="F:MyCommonTexts.ControlName_ToolbarUp">
            <summary>
             ControlName_ToolbarUp
            </summary>
        </member>
        <member name="F:MyCommonTexts.DialogTextDownloadModsFailed">
            <summary>
             DialogTextDownloadModsFailed
            </summary>
        </member>
        <member name="F:MyCommonTexts.DialogTextDownloadModsFailedSteamOffline">
            <summary>
             DialogTextDownloadModsFailedSteamOffline
            </summary>
        </member>
        <member name="F:MyCommonTexts.ProgressTextCheckingMods">
            <summary>
             ProgressTextCheckingMods
            </summary>
        </member>
        <member name="F:MyCommonTexts.ScreenDebugOfficial_Caption">
            <summary>
             ScreenDebugOfficial_Caption
            </summary>
        </member>
        <member name="F:MyCommonTexts.ScreenDebugOfficial_EnableDebugDraw">
            <summary>
             ScreenDebugOfficial_EnableDebugDraw
            </summary>
        </member>
        <member name="F:MyCommonTexts.ScreenDebugOfficial_ErrorLogCaption">
            <summary>
             ScreenDebugOfficial_ErrorLogCaption
            </summary>
        </member>
        <member name="F:MyCommonTexts.ScreenDebugOfficial_ModelDummies">
            <summary>
             ScreenDebugOfficial_ModelDummies
            </summary>
        </member>
        <member name="F:MyCommonTexts.ScreenDebugOfficial_MountPoints">
            <summary>
             ScreenDebugOfficial_MountPoints
            </summary>
        </member>
        <member name="F:MyCommonTexts.ScreenDebugOfficial_NoErrorText">
            <summary>
             ScreenDebugOfficial_NoErrorText
            </summary>
        </member>
        <member name="F:MyCommonTexts.ScreenDebugOfficial_PhysicsPrimitives">
            <summary>
             ScreenDebugOfficial_PhysicsPrimitives
            </summary>
        </member>
        <member name="F:MyCommonTexts.ScreenDebugOfficial_OpenErrorLog">
            <summary>
             ScreenDebugOfficial_OpenErrorLog
            </summary>
        </member>
        <member name="F:MyCommonTexts.ScreenDebugOfficial_ReloadTextures">
            <summary>
             ScreenDebugOfficial_ReloadTextures
            </summary>
        </member>
        <member name="F:MyCommonTexts.DialogTextLocalModsDisabledInMultiplayer">
            <summary>
             DialogTextLocalModsDisabledInMultiplayer
            </summary>
        </member>
        <member name="F:MyCommonTexts.ScreenMods_LocalMod">
            <summary>
             ScreenMods_LocalMod
            </summary>
        </member>
        <member name="F:MyCommonTexts.ScreenMods_MissingDetails">
            <summary>
             ScreenMods_MissingDetails
            </summary>
        </member>
        <member name="F:MyCommonTexts.ScreenMods_MissingLocalMod">
            <summary>
             ScreenMods_MissingLocalMod
            </summary>
        </member>
        <member name="F:MyCommonTexts.ScreenMods_WorkshopMod">
            <summary>
             ScreenMods_WorkshopMod
            </summary>
        </member>
        <member name="F:MyCommonTexts.ScreenDebugOfficial_ReloadModels">
            <summary>
             ScreenDebugOfficial_ReloadModels
            </summary>
        </member>
        <member name="F:MyCommonTexts.ScreenDebugOfficial_CopyErrorLogToClipboard">
            <summary>
             ScreenDebugOfficial_CopyErrorLogToClipboard
            </summary>
        </member>
        <member name="F:MyCommonTexts.NotificationLeavingWorld_Creative">
            <summary>
             NotificationLeavingWorld_Creative
            </summary>
        </member>
        <member name="F:MyCommonTexts.PlayerCharacterModel">
            <summary>
             PlayerCharacterModel
            </summary>
        </member>
        <member name="F:MyCommonTexts.JoinGame_ColumnTitle_Mods">
            <summary>
             JoinGame_ColumnTitle_Mods
            </summary>
        </member>
        <member name="F:MyCommonTexts.NotificationHintPressToUse">
            <summary>
             NotificationHintPressToUse
            </summary>
        </member>
        <member name="F:MyCommonTexts.JoinGame_SelectServerToShowModList">
            <summary>
             JoinGame_SelectServerToShowModList
            </summary>
        </member>
        <member name="F:MyCommonTexts.ScreenMods_SearchLabel">
            <summary>
             ScreenMods_SearchLabel
            </summary>
        </member>
        <member name="F:MyCommonTexts.JoinGame_BadModsListResponse">
            <summary>
             JoinGame_BadModsListResponse
            </summary>
        </member>
        <member name="F:MyCommonTexts.HudWarnings">
            <summary>
             HudWarnings
            </summary>
        </member>
        <member name="F:MyCommonTexts.DialogTextIncompatibleWorldVersion">
            <summary>
             DialogTextIncompatibleWorldVersion
            </summary>
        </member>
        <member name="F:MyCommonTexts.MessageBoxTextPublishFailed_AccessDenied">
            <summary>
             MessageBoxTextPublishFailed_AccessDenied
            </summary>
        </member>
        <member name="F:MyCommonTexts.MessageBoxTextPublishFailed_FileNotFound">
            <summary>
             MessageBoxTextPublishFailed_FileNotFound
            </summary>
        </member>
        <member name="F:MyCommonTexts.ScreenDebugOfficial_SavePrefab">
            <summary>
             ScreenDebugOfficial_SavePrefab
            </summary>
        </member>
        <member name="F:MyCommonTexts.ToolTipSaveShip">
            <summary>
             ToolTipSaveShip
            </summary>
        </member>
        <member name="F:MyCommonTexts.AddNewNPC">
            <summary>
             AddNewNPC
            </summary>
        </member>
        <member name="F:MyCommonTexts.DisplayName_BlueprintClass_Tools">
            <summary>
             DisplayName_BlueprintClass_Tools
            </summary>
        </member>
        <member name="F:MyCommonTexts.DisplayName_BlueprintClass_BasicTools">
            <summary>
             DisplayName_BlueprintClass_BasicTools
            </summary>
        </member>
        <member name="F:MyCommonTexts.ScreenCaptionWorkshopTags">
            <summary>
             ScreenCaptionWorkshopTags
            </summary>
        </member>
        <member name="F:MyCommonTexts.WorkshopTagsHeader">
            <summary>
             WorkshopTagsHeader
            </summary>
        </member>
        <member name="F:MyCommonTexts.WorkshopTagsServicesHeader">
            <summary>
             WorkshopTagsServicesHeader
            </summary>
        </member>
        <member name="F:MyCommonTexts.WorkshopTag_Animation">
            <summary>
             WorkshopTag_Animation
            </summary>
        </member>
        <member name="F:MyCommonTexts.WorkshopTag_Block">
            <summary>
             WorkshopTag_Block
            </summary>
        </member>
        <member name="F:MyCommonTexts.WorkshopTag_Character">
            <summary>
             WorkshopTag_Character
            </summary>
        </member>
        <member name="F:MyCommonTexts.WorkshopTag_Other">
            <summary>
             WorkshopTag_Other
            </summary>
        </member>
        <member name="F:MyCommonTexts.WorkshopTag_Skybox">
            <summary>
             WorkshopTag_Skybox
            </summary>
        </member>
        <member name="F:MyCommonTexts.WorkshopTag_InventoryManagement">
            <summary>
             WorkshopTag_InventoryManagement
            </summary>
        </member>
        <member name="F:MyCommonTexts.WorkshopTag_Visualization">
            <summary>
             WorkshopTag_Visualization
            </summary>
        </member>
        <member name="F:MyCommonTexts.WorkshopTag_Autopilot">
            <summary>
             WorkshopTag_Autopilot
            </summary>
        </member>
        <member name="F:MyCommonTexts.WorkshopTag_NoScripts">
            <summary>
             WorkshopTag_NoScripts
            </summary>
        </member>
        <member name="F:MyCommonTexts.WorkshopTag_ServerScripts">
            <summary>
             WorkshopTag_ServerScripts
            </summary>
        </member>
        <member name="F:MyCommonTexts.WorkshopTag_Fonts">
            <summary>
             WorkshopTag_Fonts
            </summary>
        </member>
        <member name="F:MyCommonTexts.MessageBoxTextPublishFailed_OwnerMismatchMod">
            <summary>
             MessageBoxTextPublishFailed_OwnerMismatchMod
            </summary>
        </member>
        <member name="F:MyCommonTexts.MessageBoxErrorModLoadingFailure">
            <summary>
             MessageBoxErrorModLoadingFailure
            </summary>
        </member>
        <member name="F:MyCommonTexts.RenderIterpolation">
            <summary>
             RenderIterpolation
            </summary>
        </member>
        <member name="F:MyCommonTexts.ToolTipVideoOptionRenderIterpolation">
            <summary>
             ToolTipVideoOptionRenderIterpolation
            </summary>
        </member>
        <member name="F:MyCommonTexts.WorkshopTag_ModPack">
            <summary>
             WorkshopTag_ModPack
            </summary>
        </member>
        <member name="F:MyCommonTexts.CustomText">
            <summary>
             CustomText
            </summary>
        </member>
        <member name="F:MyCommonTexts.ScreenCubeBuilderBlockCategories">
            <summary>
             ScreenCubeBuilderBlockCategories
            </summary>
        </member>
        <member name="F:MyCommonTexts.ScreenCubeBuilderBlockSearch">
            <summary>
             ScreenCubeBuilderBlockSearch
            </summary>
        </member>
        <member name="F:MyCommonTexts.ControlDescCopyPasteMove">
            <summary>
             ControlDescCopyPasteMove
            </summary>
        </member>
        <member name="F:MyCommonTexts.WorkshopTag_Script">
            <summary>
             WorkshopTag_Script
            </summary>
        </member>
        <member name="F:MyCommonTexts.NotificationCopyPasteBlockNotAvailable">
            <summary>
             NotificationCopyPasteBlockNotAvailable
            </summary>
        </member>
        <member name="F:MyCommonTexts.ConvertingObjs">
            <summary>
             ConvertingObjs
            </summary>
        </member>
        <member name="F:MyCommonTexts.ConvertToObjDone">
            <summary>
             ConvertToObjDone
            </summary>
        </member>
        <member name="F:MyCommonTexts.ExportingToObj">
            <summary>
             ExportingToObj
            </summary>
        </member>
        <member name="F:MyCommonTexts.MessageBoxTextDoYouWantToPasteGridWithMissingBlocks">
            <summary>
             MessageBoxTextDoYouWantToPasteGridWithMissingBlocks
            </summary>
        </member>
        <member name="F:MyCommonTexts.NotificationCopyPasteFloatingObjectNotAvailable">
            <summary>
             NotificationCopyPasteFloatingObjectNotAvailable
            </summary>
        </member>
        <member name="F:MyCommonTexts.ShipWelder_HelpOthers">
            <summary>
             ShipWelder_HelpOthers
            </summary>
        </member>
        <member name="F:MyCommonTexts.PlacingObjectsToScene">
            <summary>
             PlacingObjectsToScene
            </summary>
        </member>
        <member name="F:MyCommonTexts.ControlTypeSystems3">
            <summary>
             ControlTypeSystems3
            </summary>
        </member>
        <member name="F:MyCommonTexts.NotificationSwitchedToWeapon">
            <summary>
             NotificationSwitchedToWeapon
            </summary>
        </member>
        <member name="F:MyCommonTexts.Thrust_Back">
            <summary>
             Thrust_Back
            </summary>
        </member>
        <member name="F:MyCommonTexts.Thrust_Down">
            <summary>
             Thrust_Down
            </summary>
        </member>
        <member name="F:MyCommonTexts.Thrust_Forward">
            <summary>
             Thrust_Forward
            </summary>
        </member>
        <member name="F:MyCommonTexts.Thrust_Left">
            <summary>
             Thrust_Left
            </summary>
        </member>
        <member name="F:MyCommonTexts.Thrust_Right">
            <summary>
             Thrust_Right
            </summary>
        </member>
        <member name="F:MyCommonTexts.Thrust_Up">
            <summary>
             Thrust_Up
            </summary>
        </member>
        <member name="F:MyCommonTexts.SelectBlueprint">
            <summary>
             SelectBlueprint
            </summary>
        </member>
        <member name="F:MyCommonTexts.DisplayName_Animation_Facepalm">
            <summary>
             DisplayName_Animation_Facepalm
            </summary>
        </member>
        <member name="F:MyCommonTexts.AvailableBlueprints">
            <summary>
             AvailableBlueprints
            </summary>
        </member>
        <member name="F:MyCommonTexts.VoxelHandProperty_Sphere_Radius">
            <summary>
             VoxelHandProperty_Sphere_Radius
            </summary>
        </member>
        <member name="F:MyCommonTexts.VoxelHandProperty_Box_Width">
            <summary>
             VoxelHandProperty_Box_Width
            </summary>
        </member>
        <member name="F:MyCommonTexts.VoxelHandProperty_Box_Depth">
            <summary>
             VoxelHandProperty_Box_Depth
            </summary>
        </member>
        <member name="F:MyCommonTexts.VoxelHandProperty_Box_Height">
            <summary>
             VoxelHandProperty_Box_Height
            </summary>
        </member>
        <member name="F:MyCommonTexts.VoxelHandSettingScreen_HandDistance">
            <summary>
             VoxelHandSettingScreen_HandDistance
            </summary>
        </member>
        <member name="F:MyCommonTexts.VoxelHandSettingScreen_HandSettings">
            <summary>
             VoxelHandSettingScreen_HandSettings
            </summary>
        </member>
        <member name="F:MyCommonTexts.VoxelHandSettingScreen_HandTransparency">
            <summary>
             VoxelHandSettingScreen_HandTransparency
            </summary>
        </member>
        <member name="F:MyCommonTexts.VoxelHandSettingScreen_ShapeSettings">
            <summary>
             VoxelHandSettingScreen_ShapeSettings
            </summary>
        </member>
        <member name="F:MyCommonTexts.VoxelHandProperty_Capsule_Length">
            <summary>
             VoxelHandProperty_Capsule_Length
            </summary>
        </member>
        <member name="F:MyCommonTexts.VoxelHandProperty_Capsule_Radius">
            <summary>
             VoxelHandProperty_Capsule_Radius
            </summary>
        </member>
        <member name="F:MyCommonTexts.ExportToObjModded">
            <summary>
             ExportToObjModded
            </summary>
        </member>
        <member name="F:MyCommonTexts.VoxelHandSettingScreen_HandSnapToVoxel">
            <summary>
             VoxelHandSettingScreen_HandSnapToVoxel
            </summary>
        </member>
        <member name="F:MyCommonTexts.VoxelHandSettingScreen_FreezePhysics">
            <summary>
             VoxelHandSettingScreen_FreezePhysics
            </summary>
        </member>
        <member name="F:MyCommonTexts.VoxelHandProperty_AutoLevel_Area">
            <summary>
             VoxelHandProperty_AutoLevel_Area
            </summary>
        </member>
        <member name="F:MyCommonTexts.VoxelHandProperty_AutoLevel_Axis">
            <summary>
             VoxelHandProperty_AutoLevel_Axis
            </summary>
        </member>
        <member name="F:MyCommonTexts.VoxelHandProperty_AutoLevel_AxisX">
            <summary>
             VoxelHandProperty_AutoLevel_AxisX
            </summary>
        </member>
        <member name="F:MyCommonTexts.VoxelHandProperty_AutoLevel_AxisY">
            <summary>
             VoxelHandProperty_AutoLevel_AxisY
            </summary>
        </member>
        <member name="F:MyCommonTexts.VoxelHandProperty_AutoLevel_AxisZ">
            <summary>
             VoxelHandProperty_AutoLevel_AxisZ
            </summary>
        </member>
        <member name="F:MyCommonTexts.VoxelHandSettingScreen_HandMaterial">
            <summary>
             VoxelHandSettingScreen_HandMaterial
            </summary>
        </member>
        <member name="F:MyCommonTexts.NotificationNewFactionChatMessage">
            <summary>
             NotificationNewFactionChatMessage
            </summary>
        </member>
        <member name="F:MyCommonTexts.NotificationNewGlobalChatMessage">
            <summary>
             NotificationNewGlobalChatMessage
            </summary>
        </member>
        <member name="F:MyCommonTexts.NotificationNewPlayerChatMessage">
            <summary>
             NotificationNewPlayerChatMessage
            </summary>
        </member>
        <member name="F:MyCommonTexts.ErrorDescriptionTooLong">
            <summary>
             ErrorDescriptionTooLong
            </summary>
        </member>
        <member name="F:MyCommonTexts.ErrorStartSessionNoUser">
            <summary>
             ErrorStartSessionNoUser
            </summary>
        </member>
        <member name="F:MyCommonTexts.ErrorJoinSessionNoUser">
            <summary>
             ErrorJoinSessionNoUser
            </summary>
        </member>
        <member name="F:MyCommonTexts.Description">
            <summary>
             Description
            </summary>
        </member>
        <member name="F:MyCommonTexts.TooltipScreenMods_SelectCategories">
            <summary>
             TooltipScreenMods_SelectCategories
            </summary>
        </member>
        <member name="F:MyCommonTexts.JoinGame_GameTypeToolTip_ViewDistance">
            <summary>
             JoinGame_GameTypeToolTip_ViewDistance
            </summary>
        </member>
        <member name="F:MyCommonTexts.VoxelHandSettingScreen_HandProjectToVoxel">
            <summary>
             VoxelHandSettingScreen_HandProjectToVoxel
            </summary>
        </member>
        <member name="F:MyCommonTexts.ControlDescNextVoxelMaterial">
            <summary>
             ControlDescNextVoxelMaterial
            </summary>
        </member>
        <member name="F:MyCommonTexts.ControlDescOpenVoxelHandSettings">
            <summary>
             ControlDescOpenVoxelHandSettings
            </summary>
        </member>
        <member name="F:MyCommonTexts.ControlDescPreviousVoxelMaterial">
            <summary>
             ControlDescPreviousVoxelMaterial
            </summary>
        </member>
        <member name="F:MyCommonTexts.BlueprintsMessageBoxDesc_Replace">
            <summary>
             BlueprintsMessageBoxDesc_Replace
            </summary>
        </member>
        <member name="F:MyCommonTexts.BlueprintsMessageBoxTitle_Replace">
            <summary>
             BlueprintsMessageBoxTitle_Replace
            </summary>
        </member>
        <member name="F:MyCommonTexts.NotificationTextPanelReadOnly">
            <summary>
             NotificationTextPanelReadOnly
            </summary>
        </member>
        <member name="F:MyCommonTexts.MessageBoxTextTooLongText">
            <summary>
             MessageBoxTextTooLongText
            </summary>
        </member>
        <member name="F:MyCommonTexts.ControlDescExportModel">
            <summary>
             ControlDescExportModel
            </summary>
        </member>
        <member name="F:MyCommonTexts.VoxelHandSettingScreen_HandShowGizmos">
            <summary>
             VoxelHandSettingScreen_HandShowGizmos
            </summary>
        </member>
        <member name="F:MyCommonTexts.NotificationRotationFormatCombined">
            <summary>
             NotificationRotationFormatCombined
            </summary>
        </member>
        <member name="F:MyCommonTexts.NotificationCompoundBuildingFormat">
            <summary>
             NotificationCompoundBuildingFormat
            </summary>
        </member>
        <member name="F:MyCommonTexts.NotificationSwitchBuildingModeFormat">
            <summary>
             NotificationSwitchBuildingModeFormat
            </summary>
        </member>
        <member name="F:MyCommonTexts.ControlName_SwitchWalk">
            <summary>
             ControlName_SwitchWalk
            </summary>
        </member>
        <member name="F:MyCommonTexts.JoinGame_TabTooltip_Favorites">
            <summary>
             JoinGame_TabTooltip_Favorites
            </summary>
        </member>
        <member name="F:MyCommonTexts.JoinGame_TabTitle_Favorites">
            <summary>
             JoinGame_TabTitle_Favorites
            </summary>
        </member>
        <member name="F:MyCommonTexts.JoinGame_TabTitle_History">
            <summary>
             JoinGame_TabTitle_History
            </summary>
        </member>
        <member name="F:MyCommonTexts.JoinGame_TabTooltip_Friends">
            <summary>
             JoinGame_TabTooltip_Friends
            </summary>
        </member>
        <member name="F:MyCommonTexts.JoinGame_TabTooltip_History">
            <summary>
             JoinGame_TabTooltip_History
            </summary>
        </member>
        <member name="F:MyCommonTexts.JoinGame_Favorites_Add">
            <summary>
             JoinGame_Favorites_Add
            </summary>
        </member>
        <member name="F:MyCommonTexts.JoinGame_Favorites_Remove">
            <summary>
             JoinGame_Favorites_Remove
            </summary>
        </member>
        <member name="F:MyCommonTexts.ControlName_VoxelHandSettings">
            <summary>
             ControlName_VoxelHandSettings
            </summary>
        </member>
        <member name="F:MyCommonTexts.NotificationVoxelHandHintFormat">
            <summary>
             NotificationVoxelHandHintFormat
            </summary>
        </member>
        <member name="F:MyCommonTexts.NotificationVoxelMaterialFormat">
            <summary>
             NotificationVoxelMaterialFormat
            </summary>
        </member>
        <member name="F:MyCommonTexts.BotSettingsScreen_EnableBotsDebugging">
            <summary>
             BotSettingsScreen_EnableBotsDebugging
            </summary>
        </member>
        <member name="F:MyCommonTexts.BotSettingsScreen_NextBot">
            <summary>
             BotSettingsScreen_NextBot
            </summary>
        </member>
        <member name="F:MyCommonTexts.BotSettingsScreen_PreviousBot">
            <summary>
             BotSettingsScreen_PreviousBot
            </summary>
        </member>
        <member name="F:MyCommonTexts.BotSettingsScreen_Title">
            <summary>
             BotSettingsScreen_Title
            </summary>
        </member>
        <member name="F:MyCommonTexts.ScreenDebugOfficial_BotSettings">
            <summary>
             ScreenDebugOfficial_BotSettings
            </summary>
        </member>
        <member name="F:MyCommonTexts.ReportBug">
            <summary>
             ReportBug
            </summary>
        </member>
        <member name="F:MyCommonTexts.ControlName_ToolbarNextItem">
            <summary>
             ControlName_ToolbarNextItem
            </summary>
        </member>
        <member name="F:MyCommonTexts.ControlName_ToolbarPreviousItem">
            <summary>
             ControlName_ToolbarPreviousItem
            </summary>
        </member>
        <member name="F:MyCommonTexts.ControlTypeToolsOrWeapons2">
            <summary>
             ControlTypeToolsOrWeapons2
            </summary>
        </member>
        <member name="F:MyCommonTexts.ControlName_BuildMode">
            <summary>
             ControlName_BuildMode
            </summary>
        </member>
        <member name="F:MyCommonTexts.NotificationCubePlacementModeChanged">
            <summary>
             NotificationCubePlacementModeChanged
            </summary>
        </member>
        <member name="F:MyCommonTexts.NotificationCubePlacementMode_LocalCoordSystem">
            <summary>
             NotificationCubePlacementMode_LocalCoordSystem
            </summary>
        </member>
        <member name="F:MyCommonTexts.NotificationCubePlacementMode_FreePlacement">
            <summary>
             NotificationCubePlacementMode_FreePlacement
            </summary>
        </member>
        <member name="F:MyCommonTexts.NotificationCubePlacementMode_GravityAligned">
            <summary>
             NotificationCubePlacementMode_GravityAligned
            </summary>
        </member>
        <member name="F:MyCommonTexts.ControlHintCubePlacementMode">
            <summary>
             ControlHintCubePlacementMode
            </summary>
        </member>
        <member name="F:MyCommonTexts.ControlHintCubePlacementMode_LocalCoordSystem">
            <summary>
             ControlHintCubePlacementMode_LocalCoordSystem
            </summary>
        </member>
        <member name="F:MyCommonTexts.ControlHintCubePlacementMode_FreePlacement">
            <summary>
             ControlHintCubePlacementMode_FreePlacement
            </summary>
        </member>
        <member name="F:MyCommonTexts.ControlHintCubePlacementMode_GravityAligned">
            <summary>
             ControlHintCubePlacementMode_GravityAligned
            </summary>
        </member>
        <member name="F:MyCommonTexts.NotificationCubePlacementUnable">
            <summary>
             NotificationCubePlacementUnable
            </summary>
        </member>
        <member name="F:MyCommonTexts.ScreenControlMenu_Title">
            <summary>
             ScreenControlMenu_Title
            </summary>
        </member>
        <member name="F:MyCommonTexts.ControlName_ControlMenu">
            <summary>
             ControlName_ControlMenu
            </summary>
        </member>
        <member name="F:MyCommonTexts.ControlMenuItemValue_Off">
            <summary>
             ControlMenuItemValue_Off
            </summary>
        </member>
        <member name="F:MyCommonTexts.ControlMenuItemValue_On">
            <summary>
             ControlMenuItemValue_On
            </summary>
        </member>
        <member name="F:MyCommonTexts.MessageBoxTextErrorFeatureNotAvailableYet">
            <summary>
             MessageBoxTextErrorFeatureNotAvailableYet
            </summary>
        </member>
        <member name="F:MyCommonTexts.NotificationMaximumNumberBots">
            <summary>
             NotificationMaximumNumberBots
            </summary>
        </member>
        <member name="F:MyCommonTexts.Hud_BuildMode">
            <summary>
             Hud_BuildMode
            </summary>
        </member>
        <member name="F:MyCommonTexts.NotificationJoystickCompoundBuildingFormat">
            <summary>
             NotificationJoystickCompoundBuildingFormat
            </summary>
        </member>
        <member name="F:MyCommonTexts.NotificationJoystickControlMenuFormat">
            <summary>
             NotificationJoystickControlMenuFormat
            </summary>
        </member>
        <member name="F:MyCommonTexts.NotificationJoystickMenus">
            <summary>
             NotificationJoystickMenus
            </summary>
        </member>
        <member name="F:MyCommonTexts.NotificationJoystickSlotEquipFormat">
            <summary>
             NotificationJoystickSlotEquipFormat
            </summary>
        </member>
        <member name="F:MyCommonTexts.NotificationJoystickUnlimitedBuildingFormat">
            <summary>
             NotificationJoystickUnlimitedBuildingFormat
            </summary>
        </member>
        <member name="F:MyCommonTexts.NotificationJoystickVoxelMaterialFormat">
            <summary>
             NotificationJoystickVoxelMaterialFormat
            </summary>
        </member>
        <member name="F:MyCommonTexts.Notification_GameplayOptions">
            <summary>
             Notification_GameplayOptions
            </summary>
        </member>
        <member name="F:MyCommonTexts.NotificationHintJoystickPressToOpenInventory">
            <summary>
             NotificationHintJoystickPressToOpenInventory
            </summary>
        </member>
        <member name="F:MyCommonTexts.NotificationHintPressToOpenBuildMode">
            <summary>
             NotificationHintPressToOpenBuildMode
            </summary>
        </member>
        <member name="F:MyCommonTexts.WorldSettings_Physics">
            <summary>
             WorldSettings_Physics
            </summary>
        </member>
        <member name="F:MyCommonTexts.WorldSettings_Physics_Fast">
            <summary>
             WorldSettings_Physics_Fast
            </summary>
        </member>
        <member name="F:MyCommonTexts.WorldSettings_Physics_Normal">
            <summary>
             WorldSettings_Physics_Normal
            </summary>
        </member>
        <member name="F:MyCommonTexts.WorldSettings_Physics_Precise">
            <summary>
             WorldSettings_Physics_Precise
            </summary>
        </member>
        <member name="F:MyCommonTexts.WorldSettings_Physics_Tooltip">
            <summary>
             WorldSettings_Physics_Tooltip
            </summary>
        </member>
        <member name="F:MyCommonTexts.ScreenCaptionGraphicsOptions">
            <summary>
             ScreenCaptionGraphicsOptions
            </summary>
        </member>
        <member name="F:MyCommonTexts.ScreenGraphicsOptions_AnisotropicFiltering">
            <summary>
             ScreenGraphicsOptions_AnisotropicFiltering
            </summary>
        </member>
        <member name="F:MyCommonTexts.ScreenGraphicsOptions_AnisotropicFiltering_Off">
            <summary>
             ScreenGraphicsOptions_AnisotropicFiltering_Off
            </summary>
        </member>
        <member name="F:MyCommonTexts.ScreenGraphicsOptions_AntiAliasing">
            <summary>
             ScreenGraphicsOptions_AntiAliasing
            </summary>
        </member>
        <member name="F:MyCommonTexts.ScreenGraphicsOptions_AntiAliasing_None">
            <summary>
             ScreenGraphicsOptions_AntiAliasing_None
            </summary>
        </member>
        <member name="F:MyCommonTexts.ScreenGraphicsOptions_FoliageDetails">
            <summary>
             ScreenGraphicsOptions_FoliageDetails
            </summary>
        </member>
        <member name="F:MyCommonTexts.ScreenGraphicsOptions_FoliageDetails_Disabled">
            <summary>
             ScreenGraphicsOptions_FoliageDetails_Disabled
            </summary>
        </member>
        <member name="F:MyCommonTexts.ScreenGraphicsOptions_FoliageDetails_High">
            <summary>
             ScreenGraphicsOptions_FoliageDetails_High
            </summary>
        </member>
        <member name="F:MyCommonTexts.ScreenGraphicsOptions_FoliageDetails_Low">
            <summary>
             ScreenGraphicsOptions_FoliageDetails_Low
            </summary>
        </member>
        <member name="F:MyCommonTexts.ScreenGraphicsOptions_FoliageDetails_Medium">
            <summary>
             ScreenGraphicsOptions_FoliageDetails_Medium
            </summary>
        </member>
        <member name="F:MyCommonTexts.ScreenGraphicsOptions_MultiThreadedRendering">
            <summary>
             ScreenGraphicsOptions_MultiThreadedRendering
            </summary>
        </member>
        <member name="F:MyCommonTexts.ScreenGraphicsOptions_QualityPreset">
            <summary>
             ScreenGraphicsOptions_QualityPreset
            </summary>
        </member>
        <member name="F:MyCommonTexts.ScreenGraphicsOptions_QualityPreset_Custom">
            <summary>
             ScreenGraphicsOptions_QualityPreset_Custom
            </summary>
        </member>
        <member name="F:MyCommonTexts.ScreenGraphicsOptions_QualityPreset_High">
            <summary>
             ScreenGraphicsOptions_QualityPreset_High
            </summary>
        </member>
        <member name="F:MyCommonTexts.ScreenGraphicsOptions_QualityPreset_Low">
            <summary>
             ScreenGraphicsOptions_QualityPreset_Low
            </summary>
        </member>
        <member name="F:MyCommonTexts.ScreenGraphicsOptions_QualityPreset_Medium">
            <summary>
             ScreenGraphicsOptions_QualityPreset_Medium
            </summary>
        </member>
        <member name="F:MyCommonTexts.ScreenGraphicsOptions_ShadowMapResolution_High">
            <summary>
             ScreenGraphicsOptions_ShadowMapResolution_High
            </summary>
        </member>
        <member name="F:MyCommonTexts.ScreenGraphicsOptions_ShadowMapResolution_Extreme">
            <summary>
             ScreenGraphicsOptions_ShadowMapResolution_Extreme
            </summary>
        </member>
        <member name="F:MyCommonTexts.ScreenGraphicsOptions_ShadowMapResolution_Disabled">
            <summary>
             ScreenGraphicsOptions_ShadowMapResolution_Disabled
            </summary>
        </member>
        <member name="F:MyCommonTexts.ScreenGraphicsOptions_ShadowMapResolution_Low">
            <summary>
             ScreenGraphicsOptions_ShadowMapResolution_Low
            </summary>
        </member>
        <member name="F:MyCommonTexts.ScreenGraphicsOptions_TextureQuality">
            <summary>
             ScreenGraphicsOptions_TextureQuality
            </summary>
        </member>
        <member name="F:MyCommonTexts.ScreenGraphicsOptions_TextureQuality_High">
            <summary>
             ScreenGraphicsOptions_TextureQuality_High
            </summary>
        </member>
        <member name="F:MyCommonTexts.ScreenGraphicsOptions_TextureQuality_Low">
            <summary>
             ScreenGraphicsOptions_TextureQuality_Low
            </summary>
        </member>
        <member name="F:MyCommonTexts.ScreenGraphicsOptions_TextureQuality_Medium">
            <summary>
             ScreenGraphicsOptions_TextureQuality_Medium
            </summary>
        </member>
        <member name="F:MyCommonTexts.ControlName_VoiceChat">
            <summary>
             ControlName_VoiceChat
            </summary>
        </member>
        <member name="F:MyCommonTexts.ControlName_CubeSizeMode">
            <summary>
             ControlName_CubeSizeMode
            </summary>
        </member>
        <member name="F:MyCommonTexts.ControlName_CubeSizeMode_Tooltip">
            <summary>
             ControlName_CubeSizeMode_Tooltip
            </summary>
        </member>
        <member name="F:MyCommonTexts.EnableVoiceChat">
            <summary>
             EnableVoiceChat
            </summary>
        </member>
        <member name="F:MyCommonTexts.PushToTalk">
            <summary>
             PushToTalk
            </summary>
        </member>
        <member name="F:MyCommonTexts.MicSensitivity">
            <summary>
             MicSensitivity
            </summary>
        </member>
        <member name="F:MyCommonTexts.ScreenGraphicsOptions_Tonemapping">
            <summary>
             ScreenGraphicsOptions_Tonemapping
            </summary>
        </member>
        <member name="F:MyCommonTexts.WorldSettings_VegetationDistance">
            <summary>
             WorldSettings_VegetationDistance
            </summary>
        </member>
        <member name="F:MyCommonTexts.WorldSettings_GrassDrawDistance">
            <summary>
             WorldSettings_GrassDrawDistance
            </summary>
        </member>
        <member name="F:MyCommonTexts.WorldSettings_GrassDensity">
            <summary>
             WorldSettings_GrassDensity
            </summary>
        </member>
        <member name="F:MyCommonTexts.MessageBoxTextGuideQuestion">
            <summary>
             MessageBoxTextGuideQuestion
            </summary>
        </member>
        <member name="F:MyCommonTexts.NotificationIncompleteGrid">
            <summary>
             NotificationIncompleteGrid
            </summary>
        </member>
        <member name="F:MyCommonTexts.ScreenPlayers_Muted">
            <summary>
             ScreenPlayers_Muted
            </summary>
        </member>
        <member name="F:MyCommonTexts.ScreenPlayers_Muted_Voice">
            <summary>
             ScreenPlayers_Muted_Voice
            </summary>
        </member>
        <member name="F:MyCommonTexts.VoiceChatVolume">
            <summary>
             VoiceChatVolume
            </summary>
        </member>
        <member name="F:MyCommonTexts.JoinGame_ColumnTitle_RemainingTime">
            <summary>
             JoinGame_ColumnTitle_RemainingTime
            </summary>
        </member>
        <member name="F:MyCommonTexts.JoinGame_Lobby">
            <summary>
             JoinGame_Lobby
            </summary>
        </member>
        <member name="F:MyCommonTexts.JoinGame_Waiting">
            <summary>
             JoinGame_Waiting
            </summary>
        </member>
        <member name="F:MyCommonTexts.MultiplayerErrorSessionEnded">
            <summary>
             MultiplayerErrorSessionEnded
            </summary>
        </member>
        <member name="F:MyCommonTexts.ScreenDebugAdminMenu_EnableAdminMode">
            <summary>
             ScreenDebugAdminMenu_EnableAdminMode
            </summary>
        </member>
        <member name="F:MyCommonTexts.ScreenDebugAdminMenu_EnableAdminMode_Tooltip">
            <summary>
             ScreenDebugAdminMenu_EnableAdminMode_Tooltip
            </summary>
        </member>
        <member name="F:MyCommonTexts.ScreenPlayers_Demote">
            <summary>
             ScreenPlayers_Demote
            </summary>
        </member>
        <member name="F:MyCommonTexts.ScreenPlayers_Profile">
            <summary>
             ScreenPlayers_Profile
            </summary>
        </member>
        <member name="F:MyCommonTexts.ScreenPlayers_Promote">
            <summary>
             ScreenPlayers_Promote
            </summary>
        </member>
        <member name="F:MyCommonTexts.ScreenDebugAdminMenu_Accelerating">
            <summary>
             ScreenDebugAdminMenu_Accelerating
            </summary>
        </member>
        <member name="F:MyCommonTexts.ScreenDebugAdminMenu_DistanceFromPlayer">
            <summary>
             ScreenDebugAdminMenu_DistanceFromPlayer
            </summary>
        </member>
        <member name="F:MyCommonTexts.ScreenDebugAdminMenu_DistanceFromPlayer_Tooltip">
            <summary>
             ScreenDebugAdminMenu_DistanceFromPlayer_Tooltip
            </summary>
        </member>
        <member name="F:MyCommonTexts.ScreenDebugAdminMenu_PlayerLogoutAge">
            <summary>
             ScreenDebugAdminMenu_PlayerLogoutAge
            </summary>
        </member>
        <member name="F:MyCommonTexts.ScreenDebugAdminMenu_PlayerLogoutAge_Tooltip">
            <summary>
             ScreenDebugAdminMenu_PlayerLogoutAge_Tooltip
            </summary>
        </member>
        <member name="F:MyCommonTexts.ScreenDebugAdminMenu_OptimalGridCount">
            <summary>
             ScreenDebugAdminMenu_OptimalGridCount
            </summary>
        </member>
        <member name="F:MyCommonTexts.ScreenDebugAdminMenu_OptimalGridCount_Tooltip">
            <summary>
             ScreenDebugAdminMenu_OptimalGridCount_Tooltip
            </summary>
        </member>
        <member name="F:MyCommonTexts.ScreenDebugAdminMenu_Linear">
            <summary>
             ScreenDebugAdminMenu_Linear
            </summary>
        </member>
        <member name="F:MyCommonTexts.ScreenDebugAdminMenu_WithBlockCount">
            <summary>
             ScreenDebugAdminMenu_WithBlockCount
            </summary>
        </member>
        <member name="F:MyCommonTexts.ScreenDebugAdminMenu_WithBlockCount_Tooltip">
            <summary>
             ScreenDebugAdminMenu_WithBlockCount_Tooltip
            </summary>
        </member>
        <member name="F:MyCommonTexts.ScreenDebugAdminMenu_RemoveTrash">
            <summary>
             ScreenDebugAdminMenu_RemoveTrash
            </summary>
        </member>
        <member name="F:MyCommonTexts.ScreenDebugAdminMenu_PauseTrashButton">
            <summary>
             ScreenDebugAdminMenu_PauseTrashButton
            </summary>
        </member>
        <member name="F:MyCommonTexts.ScreenDebugAdminMenu_ResumeTrashButton">
            <summary>
             ScreenDebugAdminMenu_ResumeTrashButton
            </summary>
        </member>
        <member name="F:MyCommonTexts.ScreenDebugAdminMenu_PauseTrashButtonTooltip">
            <summary>
             ScreenDebugAdminMenu_PauseTrashButtonTooltip
            </summary>
        </member>
        <member name="F:MyCommonTexts.ScreenDebugAdminMenu_ReplicateEverything">
            <summary>
             ScreenDebugAdminMenu_ReplicateEverything
            </summary>
        </member>
        <member name="F:MyCommonTexts.ScreenDebugAdminMenu_ReplicateEverything_Tooltip">
            <summary>
             ScreenDebugAdminMenu_ReplicateEverything_Tooltip
            </summary>
        </member>
        <member name="F:MyCommonTexts.ScreenDebugAdminMenu_CurrentValue">
            <summary>
             ScreenDebugAdminMenu_CurrentValue
            </summary>
        </member>
        <member name="F:MyCommonTexts.ScreenDebugAdminMenu_CycleObjects">
            <summary>
             ScreenDebugAdminMenu_CycleObjects
            </summary>
        </member>
        <member name="F:MyCommonTexts.ScreenDebugAdminMenu_Next">
            <summary>
             ScreenDebugAdminMenu_Next
            </summary>
        </member>
        <member name="F:MyCommonTexts.ScreenDebugAdminMenu_Previous">
            <summary>
             ScreenDebugAdminMenu_Previous
            </summary>
        </member>
        <member name="F:MyCommonTexts.ScreenDebugAdminMenu_First">
            <summary>
             ScreenDebugAdminMenu_First
            </summary>
        </member>
        <member name="F:MyCommonTexts.ScreenDebugAdminMenu_Remove">
            <summary>
             ScreenDebugAdminMenu_Remove
            </summary>
        </member>
        <member name="F:MyCommonTexts.ScreenDebugAdminMenu_Add">
            <summary>
             ScreenDebugAdminMenu_Add
            </summary>
        </member>
        <member name="F:MyCommonTexts.ScreenDebugAdminMenu_Stop">
            <summary>
             ScreenDebugAdminMenu_Stop
            </summary>
        </member>
        <member name="F:MyCommonTexts.DisplayName_Flammables">
            <summary>
             DisplayName_Flammables
            </summary>
        </member>
        <member name="F:MyCommonTexts.MessageBoxErrorFactionsTag">
            <summary>
             MessageBoxErrorFactionsTag
            </summary>
        </member>
        <member name="F:MyCommonTexts.Multiplayer_LastMsg">
            <summary>
             Multiplayer_LastMsg
            </summary>
        </member>
        <member name="F:MyCommonTexts.NPCIdentityAdded">
            <summary>
             NPCIdentityAdded
            </summary>
        </member>
        <member name="F:MyCommonTexts.ToolTipGameOptionsUIOpacity">
            <summary>
             ToolTipGameOptionsUIOpacity
            </summary>
        </member>
        <member name="F:MyCommonTexts.ToolTipGameOptionsUIBkOpacity">
            <summary>
             ToolTipGameOptionsUIBkOpacity
            </summary>
        </member>
        <member name="F:MyCommonTexts.ToolTipGameOptionsHUDBkOpacity">
            <summary>
             ToolTipGameOptionsHUDBkOpacity
            </summary>
        </member>
        <member name="F:MyCommonTexts.WorldSettings_GameMode">
            <summary>
             WorldSettings_GameMode
            </summary>
        </member>
        <member name="F:MyCommonTexts.ScreenDebugAdminMenu_LargeGrids">
            <summary>
             ScreenDebugAdminMenu_LargeGrids
            </summary>
        </member>
        <member name="F:MyCommonTexts.ScreenDebugAdminMenu_SmallGrids">
            <summary>
             ScreenDebugAdminMenu_SmallGrids
            </summary>
        </member>
        <member name="F:MyCommonTexts.BlockPropertiesText_Type">
            <summary>
             BlockPropertiesText_Type
            </summary>
        </member>
        <member name="F:MyCommonTexts.DetailLargeGrid">
            <summary>
             DetailLargeGrid
            </summary>
        </member>
        <member name="F:MyCommonTexts.DetailSmallGrid">
            <summary>
             DetailSmallGrid
            </summary>
        </member>
        <member name="F:MyCommonTexts.DetailStaticGrid">
            <summary>
             DetailStaticGrid
            </summary>
        </member>
        <member name="F:MyCommonTexts.ScreenOptionsGame_ReleasingAltResetsCamera">
            <summary>
             ScreenOptionsGame_ReleasingAltResetsCamera
            </summary>
        </member>
        <member name="F:MyCommonTexts.ToolTipGameOptionsReleasingAltResetsCamera">
            <summary>
             ToolTipGameOptionsReleasingAltResetsCamera
            </summary>
        </member>
        <member name="F:MyCommonTexts.MessageBoxCaptionNotReady">
            <summary>
             MessageBoxCaptionNotReady
            </summary>
        </member>
        <member name="F:MyCommonTexts.MessageBoxTextNotReady">
            <summary>
             MessageBoxTextNotReady
            </summary>
        </member>
        <member name="F:MyCommonTexts.MessageBoxF12Question">
            <summary>
             MessageBoxF12Question
            </summary>
        </member>
        <member name="F:MyCommonTexts.MessageBoxTextF12Question">
            <summary>
             MessageBoxTextF12Question
            </summary>
        </member>
        <member name="F:MyCommonTexts.NotificationStatNotEnough">
            <summary>
             NotificationStatNotEnough
            </summary>
        </member>
        <member name="F:MyCommonTexts.NotificationStatZero">
            <summary>
             NotificationStatZero
            </summary>
        </member>
        <member name="F:MyCommonTexts.MuteWhenNotInFocus">
            <summary>
             MuteWhenNotInFocus
            </summary>
        </member>
        <member name="F:MyCommonTexts.ControlTypeNavigation2">
            <summary>
             ControlTypeNavigation2
            </summary>
        </member>
        <member name="F:MyCommonTexts.ScreenLoadSubscribedWorldCopyWorld">
            <summary>
             ScreenLoadSubscribedWorldCopyWorld
            </summary>
        </member>
        <member name="F:MyCommonTexts.NotificationResearchUnlocked">
            <summary>
             NotificationResearchUnlocked
            </summary>
        </member>
        <member name="F:MyCommonTexts.NotificationResearchKnown">
            <summary>
             NotificationResearchKnown
            </summary>
        </member>
        <member name="F:MyCommonTexts.MessageBoxTextWorldExistsDownloadOverwrite">
            <summary>
             MessageBoxTextWorldExistsDownloadOverwrite
            </summary>
        </member>
        <member name="F:MyCommonTexts.MessageBoxTextWorldExistsOverwrite">
            <summary>
             MessageBoxTextWorldExistsOverwrite
            </summary>
        </member>
        <member name="F:MyCommonTexts.ToolTipWorkshopCopyWorld">
            <summary>
             ToolTipWorkshopCopyWorld
            </summary>
        </member>
        <member name="F:MyCommonTexts.SignalMode_Switch_DefaultMode">
            <summary>
             SignalMode_Switch_DefaultMode
            </summary>
        </member>
        <member name="F:MyCommonTexts.SignalMode_Switch_FullDisplay">
            <summary>
             SignalMode_Switch_FullDisplay
            </summary>
        </member>
        <member name="F:MyCommonTexts.SignalMode_Switch_NoNames">
            <summary>
             SignalMode_Switch_NoNames
            </summary>
        </member>
        <member name="F:MyCommonTexts.SignalMode_Switch_Off">
            <summary>
             SignalMode_Switch_Off
            </summary>
        </member>
        <member name="F:MyCommonTexts.Notification_CannotManipulateDoor">
            <summary>
             Notification_CannotManipulateDoor
            </summary>
        </member>
        <member name="F:MyCommonTexts.AudioSettings_UseMusicController">
            <summary>
             AudioSettings_UseMusicController
            </summary>
        </member>
        <member name="F:MyCommonTexts.ControlName_ChangeBlockVariants">
            <summary>
             ControlName_ChangeBlockVariants
            </summary>
        </member>
        <member name="F:MyCommonTexts.MessageBoxLastSessionNotFound">
            <summary>
             MessageBoxLastSessionNotFound
            </summary>
        </member>
        <member name="F:MyCommonTexts.NewGame_SelectionLabel">
            <summary>
             NewGame_SelectionLabel
            </summary>
        </member>
        <member name="F:MyCommonTexts.ScreenCaptionNewGame">
            <summary>
             ScreenCaptionNewGame
            </summary>
        </member>
        <member name="F:MyCommonTexts.ScreenMenuButtonContinueGame">
            <summary>
             ScreenMenuButtonContinueGame
            </summary>
        </member>
        <member name="F:MyCommonTexts.ScreenMenuButtonCustomGame">
            <summary>
             ScreenMenuButtonCustomGame
            </summary>
        </member>
        <member name="F:MyCommonTexts.ScreenMenuButtonJoinGame">
            <summary>
             ScreenMenuButtonJoinGame
            </summary>
        </member>
        <member name="F:MyCommonTexts.ScreenMenuButtonLoadGame">
            <summary>
             ScreenMenuButtonLoadGame
            </summary>
        </member>
        <member name="F:MyCommonTexts.ScreenMenuButtonCampaign">
            <summary>
             ScreenMenuButtonCampaign
            </summary>
        </member>
        <member name="F:MyCommonTexts.ScreenMenuButtonQuickStart">
            <summary>
             ScreenMenuButtonQuickStart
            </summary>
        </member>
        <member name="F:MyCommonTexts.Created">
            <summary>
             Created
            </summary>
        </member>
        <member name="F:MyCommonTexts.LoadScreenButtonBackups">
            <summary>
             LoadScreenButtonBackups
            </summary>
        </member>
        <member name="F:MyCommonTexts.SaveBrowserMissingBackup">
            <summary>
             SaveBrowserMissingBackup
            </summary>
        </member>
        <member name="F:MyCommonTexts.ScreenOptionsGame_Skin">
            <summary>
             ScreenOptionsGame_Skin
            </summary>
        </member>
        <member name="F:MyCommonTexts.ScreenOptionsGame_SkinWarning">
            <summary>
             ScreenOptionsGame_SkinWarning
            </summary>
        </member>
        <member name="F:MyCommonTexts.LoadingDialogServerIsLoadingWorld">
            <summary>
             LoadingDialogServerIsLoadingWorld
            </summary>
        </member>
        <member name="F:MyCommonTexts.AudioSettings_ShipSoundsBasedOnSpeed">
            <summary>
             AudioSettings_ShipSoundsBasedOnSpeed
            </summary>
        </member>
        <member name="F:MyCommonTexts.ScreenMenuButtonContinue">
            <summary>
             ScreenMenuButtonContinue
            </summary>
        </member>
        <member name="F:MyCommonTexts.Void">
            <summary>
             Void
            </summary>
        </member>
        <member name="F:MyCommonTexts.NotificationPerformanceLow">
            <summary>
             NotificationPerformanceLow
            </summary>
        </member>
        <member name="F:MyCommonTexts.PerformanceWarningAreaAI">
            <summary>
             PerformanceWarningAreaAI
            </summary>
        </member>
        <member name="F:MyCommonTexts.PerformanceWarningAreaBlocks">
            <summary>
             PerformanceWarningAreaBlocks
            </summary>
        </member>
        <member name="F:MyCommonTexts.PerformanceWarningAreaConveyor">
            <summary>
             PerformanceWarningAreaConveyor
            </summary>
        </member>
        <member name="F:MyCommonTexts.PerformanceWarningAreaGrid">
            <summary>
             PerformanceWarningAreaGrid
            </summary>
        </member>
        <member name="F:MyCommonTexts.PerformanceWarningAreaGyro">
            <summary>
             PerformanceWarningAreaGyro
            </summary>
        </member>
        <member name="F:MyCommonTexts.PerformanceWarningAreaOxygen">
            <summary>
             PerformanceWarningAreaOxygen
            </summary>
        </member>
        <member name="F:MyCommonTexts.PerformanceWarningAreaPhysics">
            <summary>
             PerformanceWarningAreaPhysics
            </summary>
        </member>
        <member name="F:MyCommonTexts.PerformanceWarningAreaRenderFrame">
            <summary>
             PerformanceWarningAreaRenderFrame
            </summary>
        </member>
        <member name="F:MyCommonTexts.PerformanceWarningAreaRenderGPU">
            <summary>
             PerformanceWarningAreaRenderGPU
            </summary>
        </member>
        <member name="F:MyCommonTexts.PerformanceWarningAreaScripts">
            <summary>
             PerformanceWarningAreaScripts
            </summary>
        </member>
        <member name="F:MyCommonTexts.ScreenOptionsGame_EnablePerformanceWarnings">
            <summary>
             ScreenOptionsGame_EnablePerformanceWarnings
            </summary>
        </member>
        <member name="F:MyCommonTexts.ToolTipGameOptionsEnablePerformanceWarnings">
            <summary>
             ToolTipGameOptionsEnablePerformanceWarnings
            </summary>
        </member>
        <member name="F:MyCommonTexts.PerformanceWarningAreaLights">
            <summary>
             PerformanceWarningAreaLights
            </summary>
        </member>
        <member name="F:MyCommonTexts.PerformanceWarningHeading">
            <summary>
             PerformanceWarningHeading
            </summary>
        </member>
        <member name="F:MyCommonTexts.PerformanceWarningAreaAIDescription">
            <summary>
             PerformanceWarningAreaAIDescription
            </summary>
        </member>
        <member name="F:MyCommonTexts.PerformanceWarningAreaBlocksDescription">
            <summary>
             PerformanceWarningAreaBlocksDescription
            </summary>
        </member>
        <member name="F:MyCommonTexts.PerformanceWarningAreaConveyorDescription">
            <summary>
             PerformanceWarningAreaConveyorDescription
            </summary>
        </member>
        <member name="F:MyCommonTexts.PerformanceWarningAreaGridDescription">
            <summary>
             PerformanceWarningAreaGridDescription
            </summary>
        </member>
        <member name="F:MyCommonTexts.PerformanceWarningAreaGyroDescription">
            <summary>
             PerformanceWarningAreaGyroDescription
            </summary>
        </member>
        <member name="F:MyCommonTexts.PerformanceWarningAreaLightsDescription">
            <summary>
             PerformanceWarningAreaLightsDescription
            </summary>
        </member>
        <member name="F:MyCommonTexts.PerformanceWarningAreaOxygenDescription">
            <summary>
             PerformanceWarningAreaOxygenDescription
            </summary>
        </member>
        <member name="F:MyCommonTexts.PerformanceWarningAreaRenderFrameDescription">
            <summary>
             PerformanceWarningAreaRenderFrameDescription
            </summary>
        </member>
        <member name="F:MyCommonTexts.PerformanceWarningAreaRenderGPUDescription">
            <summary>
             PerformanceWarningAreaRenderGPUDescription
            </summary>
        </member>
        <member name="F:MyCommonTexts.PerformanceWarningAreaScriptsDescription">
            <summary>
             PerformanceWarningAreaScriptsDescription
            </summary>
        </member>
        <member name="F:MyCommonTexts.PerformanceWarningAreaModsDescription">
            <summary>
             PerformanceWarningAreaModsDescription
            </summary>
        </member>
        <member name="F:MyCommonTexts.PerformanceWarningHelpHeader">
            <summary>
             PerformanceWarningHelpHeader
            </summary>
        </member>
        <member name="F:MyCommonTexts.NotificationBlocksLeft">
            <summary>
             NotificationBlocksLeft
            </summary>
        </member>
        <member name="F:MyCommonTexts.PlayerMaxBlocks">
            <summary>
             PlayerMaxBlocks
            </summary>
        </member>
        <member name="F:MyCommonTexts.BuiltBy">
            <summary>
             BuiltBy
            </summary>
        </member>
        <member name="F:MyCommonTexts.ScreenTerminalInfo_Assign">
            <summary>
             ScreenTerminalInfo_Assign
            </summary>
        </member>
        <member name="F:MyCommonTexts.ScreenTerminalInfo_Blocks">
            <summary>
             ScreenTerminalInfo_Blocks
            </summary>
        </member>
        <member name="F:MyCommonTexts.MessageBoxTextConfirmAcceptTransferGrid">
            <summary>
             MessageBoxTextConfirmAcceptTransferGrid
            </summary>
        </member>
        <member name="F:MyCommonTexts.MessageBoxTextConfirmDeleteGrid">
            <summary>
             MessageBoxTextConfirmDeleteGrid
            </summary>
        </member>
        <member name="F:MyCommonTexts.MessageBoxTextConfirmTransferGrid">
            <summary>
             MessageBoxTextConfirmTransferGrid
            </summary>
        </member>
        <member name="F:MyCommonTexts.MessageBoxTextNotEnoughFreeBlocksForTransfer">
            <summary>
             MessageBoxTextNotEnoughFreeBlocksForTransfer
            </summary>
        </member>
        <member name="F:MyCommonTexts.ScreenTerminalInfo_Overview">
            <summary>
             ScreenTerminalInfo_Overview
            </summary>
        </member>
        <member name="F:MyCommonTexts.ScreenTerminalInfo_YouBuilt">
            <summary>
             ScreenTerminalInfo_YouBuilt
            </summary>
        </member>
        <member name="F:MyCommonTexts.MessageBoxTextPlayerNotOnline">
            <summary>
             MessageBoxTextPlayerNotOnline
            </summary>
        </member>
        <member name="F:MyCommonTexts.MessageBoxTextConvertToShipFail">
            <summary>
             MessageBoxTextConvertToShipFail
            </summary>
        </member>
        <member name="F:MyCommonTexts.WorldSettings_BlockLimits">
            <summary>
             WorldSettings_BlockLimits
            </summary>
        </member>
        <member name="F:MyCommonTexts.MessageBoxTextBlockLimitDisableWarning">
            <summary>
             MessageBoxTextBlockLimitDisableWarning
            </summary>
        </member>
        <member name="F:MyCommonTexts.MessageBoxTextBlockLimitsInMP">
            <summary>
             MessageBoxTextBlockLimitsInMP
            </summary>
        </member>
        <member name="F:MyCommonTexts.ToolTipWorldSettingsBlockLimits">
            <summary>
             ToolTipWorldSettingsBlockLimits
            </summary>
        </member>
        <member name="F:MyCommonTexts.PerformanceWarningIssuesBlocks">
            <summary>
             PerformanceWarningIssuesBlocks
            </summary>
        </member>
        <member name="F:MyCommonTexts.PerformanceWarningIssuesGraphics">
            <summary>
             PerformanceWarningIssuesGraphics
            </summary>
        </member>
        <member name="F:MyCommonTexts.PerformanceWarningIssuesOther">
            <summary>
             PerformanceWarningIssuesOther
            </summary>
        </member>
        <member name="F:MyCommonTexts.ScreenOptionsButtonGraphics">
            <summary>
             ScreenOptionsButtonGraphics
            </summary>
        </member>
        <member name="F:MyCommonTexts.PerformanceWarningShowAll">
            <summary>
             PerformanceWarningShowAll
            </summary>
        </member>
        <member name="F:MyCommonTexts.ToolTipPerformanceWarningShowAll">
            <summary>
             ToolTipPerformanceWarningShowAll
            </summary>
        </member>
        <member name="F:MyCommonTexts.PerformanceWarningLastOccurrence">
            <summary>
             PerformanceWarningLastOccurrence
            </summary>
        </member>
        <member name="F:MyCommonTexts.PerformanceWarningTooManyBlocks">
            <summary>
             PerformanceWarningTooManyBlocks
            </summary>
        </member>
        <member name="F:MyCommonTexts.AudioSettings_EnableReverb">
            <summary>
             AudioSettings_EnableReverb
            </summary>
        </member>
        <member name="F:MyCommonTexts.ScreenGraphicsOptions_AmbientOcclusion">
            <summary>
             ScreenGraphicsOptions_AmbientOcclusion
            </summary>
        </member>
        <member name="F:MyCommonTexts.ScreenGraphicsOptions_AmbientOcclusion_HBAO">
            <summary>
             ScreenGraphicsOptions_AmbientOcclusion_HBAO
            </summary>
        </member>
        <member name="F:MyCommonTexts.ScreenGraphicsOptions_AmbientOcclusion_None">
            <summary>
             ScreenGraphicsOptions_AmbientOcclusion_None
            </summary>
        </member>
        <member name="F:MyCommonTexts.MessageBoxCaptionDoYouWishToPublishCampaign">
            <summary>
             MessageBoxCaptionDoYouWishToPublishCampaign
            </summary>
        </member>
        <member name="F:MyCommonTexts.MessageBoxCaptionCampaignPublished">
            <summary>
             MessageBoxCaptionCampaignPublished
            </summary>
        </member>
        <member name="F:MyCommonTexts.MessageBoxCaptionModCampaignPublishFailed">
            <summary>
             MessageBoxCaptionModCampaignPublishFailed
            </summary>
        </member>
        <member name="F:MyCommonTexts.ScreenDebugAdminMenu_EntityName">
            <summary>
             ScreenDebugAdminMenu_EntityName
            </summary>
        </member>
        <member name="F:MyCommonTexts.Multiplayer_HighPing">
            <summary>
             Multiplayer_HighPing
            </summary>
        </member>
        <member name="F:MyCommonTexts.Multiplayer_PoorConnection">
            <summary>
             Multiplayer_PoorConnection
            </summary>
        </member>
        <member name="F:MyCommonTexts.General_Experimental">
            <summary>
             General_Experimental
            </summary>
        </member>
        <member name="F:MyCommonTexts.General_InstallInProgress">
            <summary>
             General_InstallInProgress
            </summary>
        </member>
        <member name="F:MyCommonTexts.General_SteamOffline">
            <summary>
             General_SteamOffline
            </summary>
        </member>
        <member name="F:MyCommonTexts.Performance_LowOnMemory">
            <summary>
             Performance_LowOnMemory
            </summary>
        </member>
        <member name="F:MyCommonTexts.Multiplayer_LowSimSpeed">
            <summary>
             Multiplayer_LowSimSpeed
            </summary>
        </member>
        <member name="F:MyCommonTexts.NewGameScreen_Description">
            <summary>
             NewGameScreen_Description
            </summary>
        </member>
        <member name="F:MyCommonTexts.WorkshopScreen_Description">
            <summary>
             WorkshopScreen_Description
            </summary>
        </member>
        <member name="F:MyCommonTexts.WorldSettingsScreen_Description">
            <summary>
             WorldSettingsScreen_Description
            </summary>
        </member>
        <member name="F:MyCommonTexts.BlueprintsScreen_Description">
            <summary>
             BlueprintsScreen_Description
            </summary>
        </member>
        <member name="F:MyCommonTexts.ScriptsScreen_Description">
            <summary>
             ScriptsScreen_Description
            </summary>
        </member>
        <member name="F:MyCommonTexts.ScreenCaptionNewsletter">
            <summary>
             ScreenCaptionNewsletter
            </summary>
        </member>
        <member name="F:MyCommonTexts.ScreenNewsletterConfirmationMessage">
            <summary>
             ScreenNewsletterConfirmationMessage
            </summary>
        </member>
        <member name="F:MyCommonTexts.ScreenNewsletterEmailLabel">
            <summary>
             ScreenNewsletterEmailLabel
            </summary>
        </member>
        <member name="F:MyCommonTexts.ScreenNewsletterNoInterestCheckbox">
            <summary>
             ScreenNewsletterNoInterestCheckbox
            </summary>
        </member>
        <member name="F:MyCommonTexts.ScreenNewsletterSubtitle">
            <summary>
             ScreenNewsletterSubtitle
            </summary>
        </member>
        <member name="F:MyCommonTexts.ScreenGraphicsOptions_ModelQuality">
            <summary>
             ScreenGraphicsOptions_ModelQuality
            </summary>
        </member>
        <member name="F:MyCommonTexts.IncompatibleDataNotification">
            <summary>
             IncompatibleDataNotification
            </summary>
        </member>
        <member name="F:MyCommonTexts.MessageBoxTextCampaignBeforeExit">
            <summary>
             MessageBoxTextCampaignBeforeExit
            </summary>
        </member>
        <member name="F:MyCommonTexts.MessageBoxTextAnyWorldBeforeExit">
            <summary>
             MessageBoxTextAnyWorldBeforeExit
            </summary>
        </member>
        <member name="F:MyCommonTexts.ScreenOptionsButtonDisplay">
            <summary>
             ScreenOptionsButtonDisplay
            </summary>
        </member>
        <member name="F:MyCommonTexts.Functional">
            <summary>
             Functional
            </summary>
        </member>
        <member name="F:MyCommonTexts.Hack">
            <summary>
             Hack
            </summary>
        </member>
        <member name="F:MyCommonTexts.CubeBuilderNoBlueprintPermission">
            <summary>
             CubeBuilderNoBlueprintPermission
            </summary>
        </member>
        <member name="F:MyCommonTexts.MultiplayerErrorKickedByAdmins">
            <summary>
             MultiplayerErrorKickedByAdmins
            </summary>
        </member>
        <member name="F:MyCommonTexts.MultiplayerJoinHasPassword">
            <summary>
             MultiplayerJoinHasPassword
            </summary>
        </member>
        <member name="F:MyCommonTexts.MultiplayerJoinOnlinePlayers">
            <summary>
             MultiplayerJoinOnlinePlayers
            </summary>
        </member>
        <member name="F:MyCommonTexts.MultiplayerJoinConnect">
            <summary>
             MultiplayerJoinConnect
            </summary>
        </member>
        <member name="F:MyCommonTexts.MultiplayerJoinDirectConnect">
            <summary>
             MultiplayerJoinDirectConnect
            </summary>
        </member>
        <member name="F:MyCommonTexts.MultiplayerJoinIPError">
            <summary>
             MultiplayerJoinIPError
            </summary>
        </member>
        <member name="F:MyCommonTexts.ServerDetails_Map">
            <summary>
             ServerDetails_Map
            </summary>
        </member>
        <member name="F:MyCommonTexts.ServerDetails_Server">
            <summary>
             ServerDetails_Server
            </summary>
        </member>
        <member name="F:MyCommonTexts.ServerDetails_Version">
            <summary>
             ServerDetails_Version
            </summary>
        </member>
        <member name="F:MyCommonTexts.ServerDetails_GameMode">
            <summary>
             ServerDetails_GameMode
            </summary>
        </member>
        <member name="F:MyCommonTexts.ServerDetails_InventorySizeMultiplier">
            <summary>
             ServerDetails_InventorySizeMultiplier
            </summary>
        </member>
        <member name="F:MyCommonTexts.ServerDetails_MaxPlayers">
            <summary>
             ServerDetails_MaxPlayers
            </summary>
        </member>
        <member name="F:MyCommonTexts.ServerDetails_EnableCopyPaste">
            <summary>
             ServerDetails_EnableCopyPaste
            </summary>
        </member>
        <member name="F:MyCommonTexts.ServerDetails_EnableSpectator">
            <summary>
             ServerDetails_EnableSpectator
            </summary>
        </member>
        <member name="F:MyCommonTexts.ServerDetails_AutoSaveInMinutes">
            <summary>
             ServerDetails_AutoSaveInMinutes
            </summary>
        </member>
        <member name="F:MyCommonTexts.ServerDetails_EnableRespawnShips">
            <summary>
             ServerDetails_EnableRespawnShips
            </summary>
        </member>
        <member name="F:MyCommonTexts.ServerDetails_FloraDensityMultiplier">
            <summary>
             ServerDetails_FloraDensityMultiplier
            </summary>
        </member>
        <member name="F:MyCommonTexts.ServerDetails_AddFavorite">
            <summary>
             ServerDetails_AddFavorite
            </summary>
        </member>
        <member name="F:MyCommonTexts.ServerDetails_IPAddress">
            <summary>
             ServerDetails_IPAddress
            </summary>
        </member>
        <member name="F:MyCommonTexts.ServerDetails_ModDownloadSize">
            <summary>
             ServerDetails_ModDownloadSize
            </summary>
        </member>
        <member name="F:MyCommonTexts.ServerDetails_ModError">
            <summary>
             ServerDetails_ModError
            </summary>
        </member>
        <member name="F:MyCommonTexts.ServerDetails_PlayerError">
            <summary>
             ServerDetails_PlayerError
            </summary>
        </member>
        <member name="F:MyCommonTexts.ServerDetails_ServerEmpty">
            <summary>
             ServerDetails_ServerEmpty
            </summary>
        </member>
        <member name="F:MyCommonTexts.ServerDetails_Settings">
            <summary>
             ServerDetails_Settings
            </summary>
        </member>
        <member name="F:MyCommonTexts.ServerDetails_WorldSettings">
            <summary>
             ServerDetails_WorldSettings
            </summary>
        </member>
        <member name="F:MyCommonTexts.Any">
            <summary>
             Any
            </summary>
        </member>
        <member name="F:MyCommonTexts.ScreenLoadSubscribedWorldPause">
            <summary>
             ScreenLoadSubscribedWorldPause
            </summary>
        </member>
        <member name="F:MyCommonTexts.ScreenLoadSubscribedWorldResume">
            <summary>
             ScreenLoadSubscribedWorldResume
            </summary>
        </member>
        <member name="F:MyCommonTexts.ServerDetails_SettingError">
            <summary>
             ServerDetails_SettingError
            </summary>
        </member>
        <member name="F:MyCommonTexts.ServerSearch_Clear">
            <summary>
             ServerSearch_Clear
            </summary>
        </member>
        <member name="F:MyCommonTexts.ServerSearch_Defaults">
            <summary>
             ServerSearch_Defaults
            </summary>
        </member>
        <member name="F:MyCommonTexts.ServerSearch_EnableAdvanced">
            <summary>
             ServerSearch_EnableAdvanced
            </summary>
        </member>
        <member name="F:MyCommonTexts.ServerSearch_EnableAdvancedTooltip">
            <summary>
             ServerSearch_EnableAdvancedTooltip
            </summary>
        </member>
        <member name="F:MyCommonTexts.ServerSearch_EnableNumericTooltip">
            <summary>
             ServerSearch_EnableNumericTooltip
            </summary>
        </member>
        <member name="F:MyCommonTexts.JoinGame_DirectConnect">
            <summary>
             JoinGame_DirectConnect
            </summary>
        </member>
        <member name="F:MyCommonTexts.JoinGame_ServerDetails">
            <summary>
             JoinGame_ServerDetails
            </summary>
        </member>
        <member name="F:MyCommonTexts.ServerDetails_NoMods">
            <summary>
             ServerDetails_NoMods
            </summary>
        </member>
        <member name="F:MyCommonTexts.ServerSearch_Exclusive">
            <summary>
             ServerSearch_Exclusive
            </summary>
        </member>
        <member name="F:MyCommonTexts.ServerSearch_ExclusiveTooltip">
            <summary>
             ServerSearch_ExclusiveTooltip
            </summary>
        </member>
        <member name="F:MyCommonTexts.NextNews">
            <summary>
             NextNews
            </summary>
        </member>
        <member name="F:MyCommonTexts.LatestNews">
            <summary>
             LatestNews
            </summary>
        </member>
        <member name="F:MyCommonTexts.PreviousNews">
            <summary>
             PreviousNews
            </summary>
        </member>
        <member name="F:MyCommonTexts.ToolTipContinueGame">
            <summary>
             ToolTipContinueGame
            </summary>
        </member>
        <member name="F:MyCommonTexts.ToolTipExitToWindows">
            <summary>
             ToolTipExitToWindows
            </summary>
        </member>
        <member name="F:MyCommonTexts.DeveloperControls">
            <summary>
             DeveloperControls
            </summary>
        </member>
        <member name="F:MyCommonTexts.SelectToolbarPage">
            <summary>
             SelectToolbarPage
            </summary>
        </member>
        <member name="F:MyCommonTexts.ToolTipJoinGame">
            <summary>
             ToolTipJoinGame
            </summary>
        </member>
        <member name="F:MyCommonTexts.ToolTipLoadGame">
            <summary>
             ToolTipLoadGame
            </summary>
        </member>
        <member name="F:MyCommonTexts.ToolTipNewGame">
            <summary>
             ToolTipNewGame
            </summary>
        </member>
        <member name="F:MyCommonTexts.ToolTipOptions">
            <summary>
             ToolTipOptions
            </summary>
        </member>
        <member name="F:MyCommonTexts.ServerSearch">
            <summary>
             ServerSearch
            </summary>
        </member>
        <member name="F:MyCommonTexts.ServerDetails_RemoveFavorite">
            <summary>
             ServerDetails_RemoveFavorite
            </summary>
        </member>
        <member name="F:MyCommonTexts.ControlTypeView">
            <summary>
             ControlTypeView
            </summary>
        </member>
        <member name="F:MyCommonTexts.ScreenCaptionDisplay">
            <summary>
             ScreenCaptionDisplay
            </summary>
        </member>
        <member name="F:MyCommonTexts.Back">
            <summary>
             Back
            </summary>
        </member>
        <member name="F:MyCommonTexts.Start">
            <summary>
             Start
            </summary>
        </member>
        <member name="F:MyCommonTexts.ToolTipWorkshopPublish">
            <summary>
             ToolTipWorkshopPublish
            </summary>
        </member>
        <member name="F:MyCommonTexts.ModCrashedTheGame">
            <summary>
             ModCrashedTheGame
            </summary>
        </member>
        <member name="F:MyCommonTexts.ModCrashedTheGameInfo">
            <summary>
             ModCrashedTheGameInfo
            </summary>
        </member>
        <member name="F:MyCommonTexts.ScreenCaptionInventory">
            <summary>
             ScreenCaptionInventory
            </summary>
        </member>
        <member name="F:MyCommonTexts.Inventory_Icon">
            <summary>
             Inventory_Icon
            </summary>
        </member>
        <member name="F:MyCommonTexts.Inventory_Quantity">
            <summary>
             Inventory_Quantity
            </summary>
        </member>
        <member name="F:MyCommonTexts.ScreenLoadInventoryBrowseItems">
            <summary>
             ScreenLoadInventoryBrowseItems
            </summary>
        </member>
        <member name="F:MyCommonTexts.ScreenLoadInventoryOpenInStore">
            <summary>
             ScreenLoadInventoryOpenInStore
            </summary>
        </member>
        <member name="F:MyCommonTexts.ScreenLoadInventoryViewDetails">
            <summary>
             ScreenLoadInventoryViewDetails
            </summary>
        </member>
        <member name="F:MyCommonTexts.ToolTipInventoryOpenInStore">
            <summary>
             ToolTipInventoryOpenInStore
            </summary>
        </member>
        <member name="F:MyCommonTexts.ToolTipInventoryViewDetails">
            <summary>
             ToolTipInventoryViewDetails
            </summary>
        </member>
        <member name="F:MyCommonTexts.ScreenMenuButtonInventory">
            <summary>
             ScreenMenuButtonInventory
            </summary>
        </member>
        <member name="F:MyCommonTexts.ToolTipMenuInventory">
            <summary>
             ToolTipMenuInventory
            </summary>
        </member>
        <member name="F:MyCommonTexts.ScreenMenuButtonBack">
            <summary>
             ScreenMenuButtonBack
            </summary>
        </member>
        <member name="F:MyCommonTexts.ScreenMenuButtonPlay">
            <summary>
             ScreenMenuButtonPlay
            </summary>
        </member>
        <member name="F:MyCommonTexts.ScreenCaptionNewItem">
            <summary>
             ScreenCaptionNewItem
            </summary>
        </member>
        <member name="F:MyCommonTexts.ScreenNewItemVisit">
            <summary>
             ScreenNewItemVisit
            </summary>
        </member>
        <member name="F:MyCommonTexts.ScreenLoadInventoryAllItems">
            <summary>
             ScreenLoadInventoryAllItems
            </summary>
        </member>
        <member name="F:MyCommonTexts.ScreenLoadInventoryBoots">
            <summary>
             ScreenLoadInventoryBoots
            </summary>
        </member>
        <member name="F:MyCommonTexts.ScreenLoadInventoryCategories">
            <summary>
             ScreenLoadInventoryCategories
            </summary>
        </member>
        <member name="F:MyCommonTexts.ScreenLoadInventoryCharacter">
            <summary>
             ScreenLoadInventoryCharacter
            </summary>
        </member>
        <member name="F:MyCommonTexts.ScreenLoadInventoryGloves">
            <summary>
             ScreenLoadInventoryGloves
            </summary>
        </member>
        <member name="F:MyCommonTexts.ScreenLoadInventoryHelmet">
            <summary>
             ScreenLoadInventoryHelmet
            </summary>
        </member>
        <member name="F:MyCommonTexts.ScreenLoadInventoryInventoryGrid">
            <summary>
             ScreenLoadInventoryInventoryGrid
            </summary>
        </member>
        <member name="F:MyCommonTexts.ScreenLoadInventoryShowOwnedItems">
            <summary>
             ScreenLoadInventoryShowOwnedItems
            </summary>
        </member>
        <member name="F:MyCommonTexts.ScreenLoadInventorySuit">
            <summary>
             ScreenLoadInventorySuit
            </summary>
        </member>
        <member name="F:MyCommonTexts.ScreenLoadInventoryTools">
            <summary>
             ScreenLoadInventoryTools
            </summary>
        </member>
        <member name="F:MyCommonTexts.ScreenLoadInventoryHue">
            <summary>
             ScreenLoadInventoryHue
            </summary>
        </member>
        <member name="F:MyCommonTexts.ScreenLoadInventorySaturation">
            <summary>
             ScreenLoadInventorySaturation
            </summary>
        </member>
        <member name="F:MyCommonTexts.ScreenLoadInventoryValue">
            <summary>
             ScreenLoadInventoryValue
            </summary>
        </member>
        <member name="F:MyCommonTexts.ScreenLoadInventoryDrill">
            <summary>
             ScreenLoadInventoryDrill
            </summary>
        </member>
        <member name="F:MyCommonTexts.ScreenLoadInventoryGrinder">
            <summary>
             ScreenLoadInventoryGrinder
            </summary>
        </member>
        <member name="F:MyCommonTexts.ScreenLoadInventoryRifle">
            <summary>
             ScreenLoadInventoryRifle
            </summary>
        </member>
        <member name="F:MyCommonTexts.ScreenLoadInventoryWelder">
            <summary>
             ScreenLoadInventoryWelder
            </summary>
        </member>
        <member name="F:MyCommonTexts.ScreenLoadInventoryDeleteItem">
            <summary>
             ScreenLoadInventoryDeleteItem
            </summary>
        </member>
        <member name="F:MyCommonTexts.ScreenLoadInventoryDeleteItemMessageText">
            <summary>
             ScreenLoadInventoryDeleteItemMessageText
            </summary>
        </member>
        <member name="F:MyCommonTexts.ScreenLoadInventoryDeleteItemMessageTitle">
            <summary>
             ScreenLoadInventoryDeleteItemMessageTitle
            </summary>
        </member>
        <member name="F:MyCommonTexts.ScreenLoadInventorySellItem">
            <summary>
             ScreenLoadInventorySellItem
            </summary>
        </member>
        <member name="F:MyCommonTexts.ScreenLoadInventoryHideDuplicates">
            <summary>
             ScreenLoadInventoryHideDuplicates
            </summary>
        </member>
        <member name="F:MyCommonTexts.ScreenLoadInventoryToolType">
            <summary>
             ScreenLoadInventoryToolType
            </summary>
        </member>
        <member name="F:MyCommonTexts.ScreenLoadInventoryNoItem">
            <summary>
             ScreenLoadInventoryNoItem
            </summary>
        </member>
        <member name="F:MyCommonTexts.GpsContainerRemainingTimeMins">
            <summary>
             GpsContainerRemainingTimeMins
            </summary>
        </member>
        <member name="F:MyCommonTexts.GpsContainerRemainingTimeSec">
            <summary>
             GpsContainerRemainingTimeSec
            </summary>
        </member>
        <member name="F:MyCommonTexts.GpsContainerRemainingTimeSecs">
            <summary>
             GpsContainerRemainingTimeSecs
            </summary>
        </member>
        <member name="F:MyCommonTexts.GpsContainerRemainingTimeMinSec">
            <summary>
             GpsContainerRemainingTimeMinSec
            </summary>
        </member>
        <member name="F:MyCommonTexts.GpsContainerRemainingTimeMinSecs">
            <summary>
             GpsContainerRemainingTimeMinSecs
            </summary>
        </member>
        <member name="F:MyCommonTexts.ScreenLoadInventoryLeftClickTip">
            <summary>
             ScreenLoadInventoryLeftClickTip
            </summary>
        </member>
        <member name="F:MyCommonTexts.ScreenLoadInventoryRightClickTip">
            <summary>
             ScreenLoadInventoryRightClickTip
            </summary>
        </member>
        <member name="F:MyCommonTexts.ScreenLoadInventoryBuyItem">
            <summary>
             ScreenLoadInventoryBuyItem
            </summary>
        </member>
        <member name="F:MyCommonTexts.ScreenLoadInventoryToggleHelmet">
            <summary>
             ScreenLoadInventoryToggleHelmet
            </summary>
        </member>
        <member name="F:MyCommonTexts.ScreenCaptionClaimGameItem">
            <summary>
             ScreenCaptionClaimGameItem
            </summary>
        </member>
        <member name="F:MyCommonTexts.ScreenClaimItemText">
            <summary>
             ScreenClaimItemText
            </summary>
        </member>
        <member name="F:MyCommonTexts.ScreenCaptionNoGameItem">
            <summary>
             ScreenCaptionNoGameItem
            </summary>
        </member>
        <member name="F:MyCommonTexts.ScreenNoGameItemText">
            <summary>
             ScreenNoGameItemText
            </summary>
        </member>
        <member name="F:MyCommonTexts.ScreenMenuButtonInventoryTooltip">
            <summary>
             ScreenMenuButtonInventoryTooltip
            </summary>
        </member>
        <member name="F:MyCommonTexts.ScreenLoadInventoryBootsTooltip">
            <summary>
             ScreenLoadInventoryBootsTooltip
            </summary>
        </member>
        <member name="F:MyCommonTexts.ScreenLoadInventoryCancelTooltip">
            <summary>
             ScreenLoadInventoryCancelTooltip
            </summary>
        </member>
        <member name="F:MyCommonTexts.ScreenLoadInventoryCharacterFilterTooltip">
            <summary>
             ScreenLoadInventoryCharacterFilterTooltip
            </summary>
        </member>
        <member name="F:MyCommonTexts.ScreenLoadInventoryDrillTooltip">
            <summary>
             ScreenLoadInventoryDrillTooltip
            </summary>
        </member>
        <member name="F:MyCommonTexts.ScreenLoadInventoryDrillDisabledTooltip">
            <summary>
             ScreenLoadInventoryDrillDisabledTooltip
            </summary>
        </member>
        <member name="F:MyCommonTexts.ScreenLoadInventoryGlovesTooltip">
            <summary>
             ScreenLoadInventoryGlovesTooltip
            </summary>
        </member>
        <member name="F:MyCommonTexts.ScreenLoadInventoryGrinderTooltip">
            <summary>
             ScreenLoadInventoryGrinderTooltip
            </summary>
        </member>
        <member name="F:MyCommonTexts.ScreenLoadInventoryGrinderDisabledTooltip">
            <summary>
             ScreenLoadInventoryGrinderDisabledTooltip
            </summary>
        </member>
        <member name="F:MyCommonTexts.ScreenLoadInventoryHelmetTooltip">
            <summary>
             ScreenLoadInventoryHelmetTooltip
            </summary>
        </member>
        <member name="F:MyCommonTexts.ScreenLoadInventoryOkTooltip">
            <summary>
             ScreenLoadInventoryOkTooltip
            </summary>
        </member>
        <member name="F:MyCommonTexts.ScreenLoadInventoryRefreshTooltip">
            <summary>
             ScreenLoadInventoryRefreshTooltip
            </summary>
        </member>
        <member name="F:MyCommonTexts.ScreenLoadInventoryRifleTooltip">
            <summary>
             ScreenLoadInventoryRifleTooltip
            </summary>
        </member>
        <member name="F:MyCommonTexts.ScreenLoadInventoryRifleDisabledTooltip">
            <summary>
             ScreenLoadInventoryRifleDisabledTooltip
            </summary>
        </member>
        <member name="F:MyCommonTexts.ScreenLoadInventorySuitTooltip">
            <summary>
             ScreenLoadInventorySuitTooltip
            </summary>
        </member>
        <member name="F:MyCommonTexts.ScreenLoadInventoryToolsFilterTooltip">
            <summary>
             ScreenLoadInventoryToolsFilterTooltip
            </summary>
        </member>
        <member name="F:MyCommonTexts.ScreenLoadInventoryWelderTooltip">
            <summary>
             ScreenLoadInventoryWelderTooltip
            </summary>
        </member>
        <member name="F:MyCommonTexts.ScreenLoadInventoryWelderDisabledTooltip">
            <summary>
             ScreenLoadInventoryWelderDisabledTooltip
            </summary>
        </member>
        <member name="F:MyCommonTexts.Date">
            <summary>
             Date
            </summary>
        </member>
        <member name="F:MyCommonTexts.Delete">
            <summary>
             Delete
            </summary>
        </member>
        <member name="F:MyCommonTexts.Details">
            <summary>
             Details
            </summary>
        </member>
        <member name="F:MyCommonTexts.Error">
            <summary>
             Error
            </summary>
        </member>
        <member name="F:MyCommonTexts.Search">
            <summary>
             Search
            </summary>
        </member>
        <member name="F:MyCommonTexts.Select">
            <summary>
             Select
            </summary>
        </member>
        <member name="F:MyCommonTexts.Size">
            <summary>
             Size
            </summary>
        </member>
        <member name="F:MyCommonTexts.Snap">
            <summary>
             Snap
            </summary>
        </member>
        <member name="F:MyCommonTexts.TakeScreenshot">
            <summary>
             TakeScreenshot
            </summary>
        </member>
        <member name="F:MyCommonTexts.Cutscene_DeleteAllNodes_Caption">
            <summary>
             Cutscene_DeleteAllNodes_Caption
            </summary>
        </member>
        <member name="F:MyCommonTexts.Cutscene_DeleteAllNodes_Text">
            <summary>
             Cutscene_DeleteAllNodes_Text
            </summary>
        </member>
        <member name="F:MyCommonTexts.Cutscene_DeleteAll_Caption">
            <summary>
             Cutscene_DeleteAll_Caption
            </summary>
        </member>
        <member name="F:MyCommonTexts.Cutscene_DeleteAll_Text">
            <summary>
             Cutscene_DeleteAll_Text
            </summary>
        </member>
        <member name="F:MyCommonTexts.Cutscene_DeleteNode_Caption">
            <summary>
             Cutscene_DeleteNode_Caption
            </summary>
        </member>
        <member name="F:MyCommonTexts.Cutscene_DeleteNode_Text">
            <summary>
             Cutscene_DeleteNode_Text
            </summary>
        </member>
        <member name="F:MyCommonTexts.Cutscene_Delete_Caption">
            <summary>
             Cutscene_Delete_Caption
            </summary>
        </member>
        <member name="F:MyCommonTexts.Cutscene_New_Caption">
            <summary>
             Cutscene_New_Caption
            </summary>
        </member>
        <member name="F:MyCommonTexts.Cutscene_Revert_Caption">
            <summary>
             Cutscene_Revert_Caption
            </summary>
        </member>
        <member name="F:MyCommonTexts.Cutscene_Revert_Text">
            <summary>
             Cutscene_Revert_Text
            </summary>
        </member>
        <member name="F:MyCommonTexts.Cutscene_Unsaved_Caption">
            <summary>
             Cutscene_Unsaved_Caption
            </summary>
        </member>
        <member name="F:MyCommonTexts.Cutscene_Unsaved_Text">
            <summary>
             Cutscene_Unsaved_Text
            </summary>
        </member>
        <member name="F:MyCommonTexts.Cutscene_Tooltip_Action">
            <summary>
             Cutscene_Tooltip_Action
            </summary>
        </member>
        <member name="F:MyCommonTexts.Cutscene_Tooltip_AddNode">
            <summary>
             Cutscene_Tooltip_AddNode
            </summary>
        </member>
        <member name="F:MyCommonTexts.Cutscene_Tooltip_CanSkip">
            <summary>
             Cutscene_Tooltip_CanSkip
            </summary>
        </member>
        <member name="F:MyCommonTexts.Cutscene_Tooltip_ClearAll">
            <summary>
             Cutscene_Tooltip_ClearAll
            </summary>
        </member>
        <member name="F:MyCommonTexts.Cutscene_Tooltip_ClearAllCutscenes">
            <summary>
             Cutscene_Tooltip_ClearAllCutscenes
            </summary>
        </member>
        <member name="F:MyCommonTexts.Cutscene_Tooltip_CurrentNode">
            <summary>
             Cutscene_Tooltip_CurrentNode
            </summary>
        </member>
        <member name="F:MyCommonTexts.Cutscene_Tooltip_Delete">
            <summary>
             Cutscene_Tooltip_Delete
            </summary>
        </member>
        <member name="F:MyCommonTexts.Cutscene_Tooltip_Event">
            <summary>
             Cutscene_Tooltip_Event
            </summary>
        </member>
        <member name="F:MyCommonTexts.Cutscene_Tooltip_EventDelay">
            <summary>
             Cutscene_Tooltip_EventDelay
            </summary>
        </member>
        <member name="F:MyCommonTexts.Cutscene_Tooltip_EventDelay_Extended">
            <summary>
             Cutscene_Tooltip_EventDelay_Extended
            </summary>
        </member>
        <member name="F:MyCommonTexts.Cutscene_Tooltip_Events">
            <summary>
             Cutscene_Tooltip_Events
            </summary>
        </member>
        <member name="F:MyCommonTexts.Cutscene_Tooltip_Event_Extended">
            <summary>
             Cutscene_Tooltip_Event_Extended
            </summary>
        </member>
        <member name="F:MyCommonTexts.Cutscene_Tooltip_FOV">
            <summary>
             Cutscene_Tooltip_FOV
            </summary>
        </member>
        <member name="F:MyCommonTexts.Cutscene_Tooltip_FOVChange">
            <summary>
             Cutscene_Tooltip_FOVChange
            </summary>
        </member>
        <member name="F:MyCommonTexts.Cutscene_Tooltip_FOVChange_Extended">
            <summary>
             Cutscene_Tooltip_FOVChange_Extended
            </summary>
        </member>
        <member name="F:MyCommonTexts.Cutscene_Tooltip_FOV_Extended">
            <summary>
             Cutscene_Tooltip_FOV_Extended
            </summary>
        </member>
        <member name="F:MyCommonTexts.Cutscene_Tooltip_Instant">
            <summary>
             Cutscene_Tooltip_Instant
            </summary>
        </member>
        <member name="F:MyCommonTexts.Cutscene_Tooltip_LookAt">
            <summary>
             Cutscene_Tooltip_LookAt
            </summary>
        </member>
        <member name="F:MyCommonTexts.Cutscene_Tooltip_LookAt_Extended1">
            <summary>
             Cutscene_Tooltip_LookAt_Extended1
            </summary>
        </member>
        <member name="F:MyCommonTexts.Cutscene_Tooltip_LookAt_Extended2">
            <summary>
             Cutscene_Tooltip_LookAt_Extended2
            </summary>
        </member>
        <member name="F:MyCommonTexts.Cutscene_Tooltip_LookRot">
            <summary>
             Cutscene_Tooltip_LookRot
            </summary>
        </member>
        <member name="F:MyCommonTexts.Cutscene_Tooltip_LookRot_Extended">
            <summary>
             Cutscene_Tooltip_LookRot_Extended
            </summary>
        </member>
        <member name="F:MyCommonTexts.Cutscene_Tooltip_MoveDown">
            <summary>
             Cutscene_Tooltip_MoveDown
            </summary>
        </member>
        <member name="F:MyCommonTexts.Cutscene_Tooltip_MoveTo">
            <summary>
             Cutscene_Tooltip_MoveTo
            </summary>
        </member>
        <member name="F:MyCommonTexts.Cutscene_Tooltip_MoveTo_Extended1">
            <summary>
             Cutscene_Tooltip_MoveTo_Extended1
            </summary>
        </member>
        <member name="F:MyCommonTexts.Cutscene_Tooltip_MoveTo_Extended2">
            <summary>
             Cutscene_Tooltip_MoveTo_Extended2
            </summary>
        </member>
        <member name="F:MyCommonTexts.Cutscene_Tooltip_MoveUp">
            <summary>
             Cutscene_Tooltip_MoveUp
            </summary>
        </member>
        <member name="F:MyCommonTexts.Cutscene_Tooltip_New">
            <summary>
             Cutscene_Tooltip_New
            </summary>
        </member>
        <member name="F:MyCommonTexts.Cutscene_Tooltip_Nodes">
            <summary>
             Cutscene_Tooltip_Nodes
            </summary>
        </member>
        <member name="F:MyCommonTexts.Cutscene_Tooltip_None">
            <summary>
             Cutscene_Tooltip_None
            </summary>
        </member>
        <member name="F:MyCommonTexts.Cutscene_Tooltip_OverTime">
            <summary>
             Cutscene_Tooltip_OverTime
            </summary>
        </member>
        <member name="F:MyCommonTexts.Cutscene_Tooltip_Play">
            <summary>
             Cutscene_Tooltip_Play
            </summary>
        </member>
        <member name="F:MyCommonTexts.Cutscene_Tooltip_Play_Extended">
            <summary>
             Cutscene_Tooltip_Play_Extended
            </summary>
        </member>
        <member name="F:MyCommonTexts.Cutscene_Tooltip_PosRot">
            <summary>
             Cutscene_Tooltip_PosRot
            </summary>
        </member>
        <member name="F:MyCommonTexts.Cutscene_Tooltip_PosRot_Extended">
            <summary>
             Cutscene_Tooltip_PosRot_Extended
            </summary>
        </member>
        <member name="F:MyCommonTexts.Cutscene_Tooltip_Revert">
            <summary>
             Cutscene_Tooltip_Revert
            </summary>
        </member>
        <member name="F:MyCommonTexts.Cutscene_Tooltip_RotateLike">
            <summary>
             Cutscene_Tooltip_RotateLike
            </summary>
        </member>
        <member name="F:MyCommonTexts.Cutscene_Tooltip_RotateLike_Extended1">
            <summary>
             Cutscene_Tooltip_RotateLike_Extended1
            </summary>
        </member>
        <member name="F:MyCommonTexts.Cutscene_Tooltip_RotateLike_Extended2">
            <summary>
             Cutscene_Tooltip_RotateLike_Extended2
            </summary>
        </member>
        <member name="F:MyCommonTexts.Cutscene_Tooltip_Save">
            <summary>
             Cutscene_Tooltip_Save
            </summary>
        </member>
        <member name="F:MyCommonTexts.Cutscene_Tooltip_Selected">
            <summary>
             Cutscene_Tooltip_Selected
            </summary>
        </member>
        <member name="F:MyCommonTexts.Cutscene_Tooltip_Skippable">
            <summary>
             Cutscene_Tooltip_Skippable
            </summary>
        </member>
        <member name="F:MyCommonTexts.Cutscene_Tooltip_SkipWarning">
            <summary>
             Cutscene_Tooltip_SkipWarning
            </summary>
        </member>
        <member name="F:MyCommonTexts.Cutscene_Tooltip_Time">
            <summary>
             Cutscene_Tooltip_Time
            </summary>
        </member>
        <member name="F:MyCommonTexts.Cutscene_Tooltip_Time_Extended">
            <summary>
             Cutscene_Tooltip_Time_Extended
            </summary>
        </member>
        <member name="F:MyCommonTexts.Cutscene_Tooltip_TrackLook">
            <summary>
             Cutscene_Tooltip_TrackLook
            </summary>
        </member>
        <member name="F:MyCommonTexts.Cutscene_Tooltip_TrackPos">
            <summary>
             Cutscene_Tooltip_TrackPos
            </summary>
        </member>
        <member name="F:MyCommonTexts.Cutscene_Tooltip_TrackPosRot">
            <summary>
             Cutscene_Tooltip_TrackPosRot
            </summary>
        </member>
        <member name="F:MyCommonTexts.Cutscene_Tooltip_TrackRot">
            <summary>
             Cutscene_Tooltip_TrackRot
            </summary>
        </member>
        <member name="F:MyCommonTexts.Cutscene_Tooltip_Track_Extended1">
            <summary>
             Cutscene_Tooltip_Track_Extended1
            </summary>
        </member>
        <member name="F:MyCommonTexts.Cutscene_Tooltip_Track_Extended2">
            <summary>
             Cutscene_Tooltip_Track_Extended2
            </summary>
        </member>
        <member name="F:MyCommonTexts.Cutscene_Tooltip_Track_Extended3">
            <summary>
             Cutscene_Tooltip_Track_Extended3
            </summary>
        </member>
        <member name="F:MyCommonTexts.Cutscene_Tooltip_Track_Extended4">
            <summary>
             Cutscene_Tooltip_Track_Extended4
            </summary>
        </member>
        <member name="F:MyCommonTexts.Cutscene_Tooltip_Waypoints">
            <summary>
             Cutscene_Tooltip_Waypoints
            </summary>
        </member>
        <member name="F:MyCommonTexts.Cutscene_Tooltip_Waypoints_Extended">
            <summary>
             Cutscene_Tooltip_Waypoints_Extended
            </summary>
        </member>
        <member name="F:MyCommonTexts.Scripting_Tooltip_Cursors">
            <summary>
             Scripting_Tooltip_Cursors
            </summary>
        </member>
        <member name="F:MyCommonTexts.Debug">
            <summary>
             Debug
            </summary>
        </member>
        <member name="F:MyCommonTexts.Local">
            <summary>
             Local
            </summary>
        </member>
        <member name="F:MyCommonTexts.Official">
            <summary>
             Official
            </summary>
        </member>
        <member name="F:MyCommonTexts.Workshop">
            <summary>
             Workshop
            </summary>
        </member>
        <member name="F:MyCommonTexts.ColorPicker">
            <summary>
             ColorPicker
            </summary>
        </member>
        <member name="F:MyCommonTexts.Confirm">
            <summary>
             Confirm
            </summary>
        </member>
        <member name="F:MyCommonTexts.DeathScreen">
            <summary>
             DeathScreen
            </summary>
        </member>
        <member name="F:MyCommonTexts.Defaults">
            <summary>
             Defaults
            </summary>
        </member>
        <member name="F:MyCommonTexts.Hue">
            <summary>
             Hue
            </summary>
        </member>
        <member name="F:MyCommonTexts.Module_Attached">
            <summary>
             Module_Attached
            </summary>
        </member>
        <member name="F:MyCommonTexts.Module_Damaged">
            <summary>
             Module_Damaged
            </summary>
        </member>
        <member name="F:MyCommonTexts.Module_Functioning">
            <summary>
             Module_Functioning
            </summary>
        </member>
        <member name="F:MyCommonTexts.Module_Incompatible">
            <summary>
             Module_Incompatible
            </summary>
        </member>
        <member name="F:MyCommonTexts.Module_Off">
            <summary>
             Module_Off
            </summary>
        </member>
        <member name="F:MyCommonTexts.Module_Unknown">
            <summary>
             Module_Unknown
            </summary>
        </member>
        <member name="F:MyCommonTexts.Module_UsedSlots">
            <summary>
             Module_UsedSlots
            </summary>
        </member>
        <member name="F:MyCommonTexts.Saturation">
            <summary>
             Saturation
            </summary>
        </member>
        <member name="F:MyCommonTexts.SendMessage">
            <summary>
             SendMessage
            </summary>
        </member>
        <member name="F:MyCommonTexts.Unit_days">
            <summary>
             Unit_days
            </summary>
        </member>
        <member name="F:MyCommonTexts.Unit_hours">
            <summary>
             Unit_hours
            </summary>
        </member>
        <member name="F:MyCommonTexts.Unit_min">
            <summary>
             Unit_min
            </summary>
        </member>
        <member name="F:MyCommonTexts.Unit_sec">
            <summary>
             Unit_sec
            </summary>
        </member>
        <member name="F:MyCommonTexts.Unit_years">
            <summary>
             Unit_years
            </summary>
        </member>
        <member name="F:MyCommonTexts.Value">
            <summary>
             Value
            </summary>
        </member>
        <member name="F:MyCommonTexts.DefaultSaveName">
            <summary>
             DefaultSaveName
            </summary>
        </member>
        <member name="F:MyCommonTexts.ErrorPopup_Hotfix_Caption">
            <summary>
             ErrorPopup_Hotfix_Caption
            </summary>
        </member>
        <member name="F:MyCommonTexts.ErrorPopup_Hotfix_Text">
            <summary>
             ErrorPopup_Hotfix_Text
            </summary>
        </member>
        <member name="F:MyCommonTexts.ErrorPopup_Whitelist_Caption">
            <summary>
             ErrorPopup_Whitelist_Caption
            </summary>
        </member>
        <member name="F:MyCommonTexts.ErrorPopup_Whitelist_Text">
            <summary>
             ErrorPopup_Whitelist_Text
            </summary>
        </member>
        <member name="F:MyCommonTexts.ToolTipWorkshopBrowseWorkshop_Steam">
            <summary>
             ToolTipWorkshopBrowseWorkshop_Steam
            </summary>
        </member>
        <member name="F:MyCommonTexts.ToolTipWorkshopOpenInWorkshop_Steam">
            <summary>
             ToolTipWorkshopOpenInWorkshop_Steam
            </summary>
        </member>
        <member name="F:MyCommonTexts.ToolTipWorkshopOpenModInWorkshop_Steam">
            <summary>
             ToolTipWorkshopOpenModInWorkshop_Steam
            </summary>
        </member>
        <member name="F:MyCommonTexts.Faction_PlayerApplied">
            <summary>
             Faction_PlayerApplied
            </summary>
        </member>
        <member name="F:MyCommonTexts.Faction_PlayerJoined">
            <summary>
             Faction_PlayerJoined
            </summary>
        </member>
        <member name="F:MyCommonTexts.Faction_PlayerLeft">
            <summary>
             Faction_PlayerLeft
            </summary>
        </member>
        <member name="F:MyCommonTexts.Cutscene_Delete_Text">
            <summary>
             Cutscene_Delete_Text
            </summary>
        </member>
        <member name="F:MyCommonTexts.ScreenWardrobeOld_Cancel">
            <summary>
             ScreenWardrobeOld_Cancel
            </summary>
        </member>
        <member name="F:MyCommonTexts.ScreenWardrobeOld_Hue">
            <summary>
             ScreenWardrobeOld_Hue
            </summary>
        </member>
        <member name="F:MyCommonTexts.ScreenWardrobeOld_Ok">
            <summary>
             ScreenWardrobeOld_Ok
            </summary>
        </member>
        <member name="F:MyCommonTexts.ScreenWardrobeOld_Saturation">
            <summary>
             ScreenWardrobeOld_Saturation
            </summary>
        </member>
        <member name="F:MyCommonTexts.ScreenWardrobeOld_Value">
            <summary>
             ScreenWardrobeOld_Value
            </summary>
        </member>
        <member name="F:MyCommonTexts.DownloadingMods">
            <summary>
             DownloadingMods
            </summary>
        </member>
        <member name="F:MyCommonTexts.DownloadingMods_Completed">
            <summary>
             DownloadingMods_Completed
            </summary>
        </member>
        <member name="F:MyCommonTexts.CraftButton">
            <summary>
             CraftButton
            </summary>
        </member>
        <member name="F:MyCommonTexts.ScreenLoadInventoryCraftedLabel">
            <summary>
             ScreenLoadInventoryCraftedLabel
            </summary>
        </member>
        <member name="F:MyCommonTexts.ScreenLoadInventoryCraftTooltip">
            <summary>
             ScreenLoadInventoryCraftTooltip
            </summary>
        </member>
        <member name="F:MyCommonTexts.ScreenLoadInventoryCurrencyCost">
            <summary>
             ScreenLoadInventoryCurrencyCost
            </summary>
        </member>
        <member name="F:MyCommonTexts.ScreenLoadInventoryCurrencyCurrent">
            <summary>
             ScreenLoadInventoryCurrencyCurrent
            </summary>
        </member>
        <member name="F:MyCommonTexts.ScreenLoadInventoryRecycleItem">
            <summary>
             ScreenLoadInventoryRecycleItem
            </summary>
        </member>
        <member name="F:MyCommonTexts.ScreenLoadInventoryRecycling">
            <summary>
             ScreenLoadInventoryRecycling
            </summary>
        </member>
        <member name="F:MyCommonTexts.ScreenLoadInventoryRecyclingFilterTooltip">
            <summary>
             ScreenLoadInventoryRecyclingFilterTooltip
            </summary>
        </member>
        <member name="F:MyCommonTexts.ScreenLoadInventoryShowOnlyDuplicates">
            <summary>
             ScreenLoadInventoryShowOnlyDuplicates
            </summary>
        </member>
        <member name="F:MyCommonTexts.ScreenLoadInventoryRecycleItemMessageText">
            <summary>
             ScreenLoadInventoryRecycleItemMessageText
            </summary>
        </member>
        <member name="F:MyCommonTexts.ScreenLoadInventoryRecycleItemMessageTitle">
            <summary>
             ScreenLoadInventoryRecycleItemMessageTitle
            </summary>
        </member>
        <member name="F:MyCommonTexts.ScreenLoadInventorySelectRarity">
            <summary>
             ScreenLoadInventorySelectRarity
            </summary>
        </member>
        <member name="F:MyCommonTexts.ScreenLoadInventoryColoring">
            <summary>
             ScreenLoadInventoryColoring
            </summary>
        </member>
        <member name="F:MyCommonTexts.Common">
            <summary>
             Common
            </summary>
        </member>
        <member name="F:MyCommonTexts.Exceptional">
            <summary>
             Exceptional
            </summary>
        </member>
        <member name="F:MyCommonTexts.Rare">
            <summary>
             Rare
            </summary>
        </member>
        <member name="F:MyCommonTexts.Uncommon">
            <summary>
             Uncommon
            </summary>
        </member>
        <member name="F:MyCommonTexts.Unusual">
            <summary>
             Unusual
            </summary>
        </member>
        <member name="F:MyCommonTexts.AudioSettings_EnableDoppler">
            <summary>
             AudioSettings_EnableDoppler
            </summary>
        </member>
        <member name="F:MyCommonTexts.ToolTipAudioOptionsEnableDoppler">
            <summary>
             ToolTipAudioOptionsEnableDoppler
            </summary>
        </member>
        <member name="F:MyCommonTexts.Blueprint_Sort_Label">
            <summary>
             Blueprint_Sort_Label
            </summary>
        </member>
        <member name="F:MyCommonTexts.SortBy_CreationDate">
            <summary>
             SortBy_CreationDate
            </summary>
        </member>
        <member name="F:MyCommonTexts.SortBy_Name">
            <summary>
             SortBy_Name
            </summary>
        </member>
        <member name="F:MyCommonTexts.SortBy_None">
            <summary>
             SortBy_None
            </summary>
        </member>
        <member name="F:MyCommonTexts.SortBy_SubscribeDate">
            <summary>
             SortBy_SubscribeDate
            </summary>
        </member>
        <member name="F:MyCommonTexts.SortBy_UpdateDate">
            <summary>
             SortBy_UpdateDate
            </summary>
        </member>
        <member name="F:MyCommonTexts.DialogAmount_ParsingError">
            <summary>
             DialogAmount_ParsingError
            </summary>
        </member>
        <member name="F:MyCommonTexts.DialogAmount_RangeError">
            <summary>
             DialogAmount_RangeError
            </summary>
        </member>
        <member name="F:MyCommonTexts.WarningUnsafeGrids">
            <summary>
             WarningUnsafeGrids
            </summary>
        </member>
        <member name="F:MyCommonTexts.PerformanceWarningCombination">
            <summary>
             PerformanceWarningCombination
            </summary>
        </member>
        <member name="F:MyCommonTexts.PerformanceWarningHeading_Connection">
            <summary>
             PerformanceWarningHeading_Connection
            </summary>
        </member>
        <member name="F:MyCommonTexts.PerformanceWarningHeading_Saving">
            <summary>
             PerformanceWarningHeading_Saving
            </summary>
        </member>
        <member name="F:MyCommonTexts.PerformanceWarningHeading_SimSpeed">
            <summary>
             PerformanceWarningHeading_SimSpeed
            </summary>
        </member>
        <member name="F:MyCommonTexts.PerformanceWarningHeading_ReducedReplicationRange">
            <summary>
             PerformanceWarningHeading_ReducedReplicationRange
            </summary>
        </member>
        <member name="F:MyCommonTexts.PerformanceWarningHeading_UnsafeGrids">
            <summary>
             PerformanceWarningHeading_UnsafeGrids
            </summary>
        </member>
        <member name="F:MyCommonTexts.PerformanceWarningHeading_InstallInProgress">
            <summary>
             PerformanceWarningHeading_InstallInProgress
            </summary>
        </member>
        <member name="F:MyCommonTexts.PerformanceWarningHeading_ExperimentalMode">
            <summary>
             PerformanceWarningHeading_ExperimentalMode
            </summary>
        </member>
        <member name="F:MyCommonTexts.PerformanceWarningInfoText">
            <summary>
             PerformanceWarningInfoText
            </summary>
        </member>
        <member name="F:MyCommonTexts.PerformanceWarningIssues">
            <summary>
             PerformanceWarningIssues
            </summary>
        </member>
        <member name="F:MyCommonTexts.PerformanceWarningIssuesGeneral">
            <summary>
             PerformanceWarningIssuesGeneral
            </summary>
        </member>
        <member name="F:MyCommonTexts.PerformanceWarningIssuesServer">
            <summary>
             PerformanceWarningIssuesServer
            </summary>
        </member>
        <member name="F:MyCommonTexts.PerformanceWarningIssuesServer_Direct">
            <summary>
             PerformanceWarningIssuesServer_Direct
            </summary>
        </member>
        <member name="F:MyCommonTexts.PerformanceWarningIssuesServer_Latency">
            <summary>
             PerformanceWarningIssuesServer_Latency
            </summary>
        </member>
        <member name="F:MyCommonTexts.PerformanceWarningIssuesServer_NoConnection">
            <summary>
             PerformanceWarningIssuesServer_NoConnection
            </summary>
        </member>
        <member name="F:MyCommonTexts.PerformanceWarningIssuesServer_Response">
            <summary>
             PerformanceWarningIssuesServer_Response
            </summary>
        </member>
        <member name="F:MyCommonTexts.PerformanceWarningIssuesServer_Saving">
            <summary>
             PerformanceWarningIssuesServer_Saving
            </summary>
        </member>
        <member name="F:MyCommonTexts.PerformanceWarningIssuesServer_Simspeed">
            <summary>
             PerformanceWarningIssuesServer_Simspeed
            </summary>
        </member>
        <member name="F:MyCommonTexts.PerformanceWarningIssuesServer_PoorConnection">
            <summary>
             PerformanceWarningIssuesServer_PoorConnection
            </summary>
        </member>
        <member name="F:MyCommonTexts.PerformanceWarningIssuesServer_ReducedReplicationRange">
            <summary>
             PerformanceWarningIssuesServer_ReducedReplicationRange
            </summary>
        </member>
        <member name="F:MyCommonTexts.GeneralWarningIssues_Experimental">
            <summary>
             GeneralWarningIssues_Experimental
            </summary>
        </member>
        <member name="F:MyCommonTexts.GeneralWarningIssues_InstallInProgress">
            <summary>
             GeneralWarningIssues_InstallInProgress
            </summary>
        </member>
        <member name="F:MyCommonTexts.GeneralWarningIssues_SteamOffline">
            <summary>
             GeneralWarningIssues_SteamOffline
            </summary>
        </member>
        <member name="F:MyCommonTexts.PerformanceWarningIssues_LowOnMemory">
            <summary>
             PerformanceWarningIssues_LowOnMemory
            </summary>
        </member>
        <member name="F:MyCommonTexts.PerformanceWarningIssuesUnsafeGrids">
            <summary>
             PerformanceWarningIssuesUnsafeGrids
            </summary>
        </member>
        <member name="F:MyCommonTexts.ScreenTerminalInfo_UnsafeBlocks">
            <summary>
             ScreenTerminalInfo_UnsafeBlocks
            </summary>
        </member>
        <member name="F:MyCommonTexts.ControlDescF6">
            <summary>
             ControlDescF6
            </summary>
        </member>
        <member name="F:MyCommonTexts.ControlDescF7">
            <summary>
             ControlDescF7
            </summary>
        </member>
        <member name="F:MyCommonTexts.ControlDescF8">
            <summary>
             ControlDescF8
            </summary>
        </member>
        <member name="F:MyCommonTexts.ControlDescF9">
            <summary>
             ControlDescF9
            </summary>
        </member>
        <member name="F:MyCommonTexts.ControlDescMoveToSpectator">
            <summary>
             ControlDescMoveToSpectator
            </summary>
        </member>
        <member name="F:MyCommonTexts.HelpScreenHeader">
            <summary>
             HelpScreenHeader
            </summary>
        </member>
        <member name="F:MyCommonTexts.HelpScreen_AdvancedCamera">
            <summary>
             HelpScreen_AdvancedCamera
            </summary>
        </member>
        <member name="F:MyCommonTexts.HelpScreen_BuildPlanner">
            <summary>
             HelpScreen_BuildPlanner
            </summary>
        </member>
        <member name="F:MyCommonTexts.HelpScreen_AdvancedColorPicker">
            <summary>
             HelpScreen_AdvancedColorPicker
            </summary>
        </member>
        <member name="F:MyCommonTexts.HelpScreen_AdvancedControls">
            <summary>
             HelpScreen_AdvancedControls
            </summary>
        </member>
        <member name="F:MyCommonTexts.HelpScreen_Gamepad">
            <summary>
             HelpScreen_Gamepad
            </summary>
        </member>
        <member name="F:MyCommonTexts.HelpScreen_GamepadAdvanced">
            <summary>
             HelpScreen_GamepadAdvanced
            </summary>
        </member>
        <member name="F:MyCommonTexts.HelpScreen_GamepadTips">
            <summary>
             HelpScreen_GamepadTips
            </summary>
        </member>
        <member name="F:MyCommonTexts.HelpScreen_AdvancedDescription">
            <summary>
             HelpScreen_AdvancedDescription
            </summary>
        </member>
        <member name="F:MyCommonTexts.HelpScreen_AdvancedGeneral">
            <summary>
             HelpScreen_AdvancedGeneral
            </summary>
        </member>
        <member name="F:MyCommonTexts.HelpScreen_AdvancedGridsAndBlueprints">
            <summary>
             HelpScreen_AdvancedGridsAndBlueprints
            </summary>
        </member>
        <member name="F:MyCommonTexts.HelpScreen_AdvancedSpectator">
            <summary>
             HelpScreen_AdvancedSpectator
            </summary>
        </member>
        <member name="F:MyCommonTexts.HelpScreen_AdvancedVoxelHands">
            <summary>
             HelpScreen_AdvancedVoxelHands
            </summary>
        </member>
        <member name="F:MyCommonTexts.HelpScreen_Description">
            <summary>
             HelpScreen_Description
            </summary>
        </member>
        <member name="F:MyCommonTexts.HelpScreen_Tutorials">
            <summary>
             HelpScreen_Tutorials
            </summary>
        </member>
        <member name="F:MyCommonTexts.HelpScreen_SupportContactDescription">
            <summary>
             HelpScreen_SupportContactDescription
            </summary>
        </member>
        <member name="F:MyCommonTexts.HelpScreen_SupportDescription">
            <summary>
             HelpScreen_SupportDescription
            </summary>
        </member>
        <member name="F:MyCommonTexts.HelpScreen_SupportLinkFeedback">
            <summary>
             HelpScreen_SupportLinkFeedback
            </summary>
        </member>
        <member name="F:MyCommonTexts.HelpScreen_SupportLinkForum">
            <summary>
             HelpScreen_SupportLinkForum
            </summary>
        </member>
        <member name="F:MyCommonTexts.HelpScreen_SupportLinkSteam">
            <summary>
             HelpScreen_SupportLinkSteam
            </summary>
        </member>
        <member name="F:MyCommonTexts.HelpScreen_TutorialsLinkWiki">
            <summary>
             HelpScreen_TutorialsLinkWiki
            </summary>
        </member>
        <member name="F:MyCommonTexts.HelpScreen_HomeSteamOverlay">
            <summary>
             HelpScreen_HomeSteamOverlay
            </summary>
        </member>
        <member name="F:MyCommonTexts.HelpScreen_Welcome">
            <summary>
             HelpScreen_Welcome
            </summary>
        </member>
        <member name="F:MyCommonTexts.HelpScreen_IngameHelp">
            <summary>
             HelpScreen_IngameHelp
            </summary>
        </member>
        <member name="F:MyCommonTexts.HelpScreen_BasicControls">
            <summary>
             HelpScreen_BasicControls
            </summary>
        </member>
        <member name="F:MyCommonTexts.HelpScreen_BasicDescription">
            <summary>
             HelpScreen_BasicDescription
            </summary>
        </member>
        <member name="F:MyCommonTexts.HelpScreen_Support">
            <summary>
             HelpScreen_Support
            </summary>
        </member>
        <member name="F:MyCommonTexts.HelpScreen_ReportIssue">
            <summary>
             HelpScreen_ReportIssue
            </summary>
        </member>
        <member name="F:MyCommonTexts.HelpScreen_SendLog">
            <summary>
             HelpScreen_SendLog
            </summary>
        </member>
        <member name="F:MyCommonTexts.HelpScreen_ReportIssueText">
            <summary>
             HelpScreen_ReportIssueText
            </summary>
        </member>
        <member name="F:MyCommonTexts.HelpScreen_ReportIssue_Description">
            <summary>
             HelpScreen_ReportIssue_Description
            </summary>
        </member>
        <member name="F:MyCommonTexts.HelpScreen_ReportIssue_Email">
            <summary>
             HelpScreen_ReportIssue_Email
            </summary>
        </member>
        <member name="F:MyCommonTexts.HelpScreen_ReportIssue_SendReport">
            <summary>
             HelpScreen_ReportIssue_SendReport
            </summary>
        </member>
        <member name="F:MyCommonTexts.HelpScreen_ReportIssue_WaitForSending">
            <summary>
             HelpScreen_ReportIssue_WaitForSending
            </summary>
        </member>
        <member name="F:MyCommonTexts.HelpScreen_ReportIssue_ThanksForSendingCaption">
            <summary>
             HelpScreen_ReportIssue_ThanksForSendingCaption
            </summary>
        </member>
        <member name="F:MyCommonTexts.HelpScreen_ReportIssue_ThanksForSending">
            <summary>
             HelpScreen_ReportIssue_ThanksForSending
            </summary>
        </member>
        <member name="F:MyCommonTexts.HelpScreen_SupportContact">
            <summary>
             HelpScreen_SupportContact
            </summary>
        </member>
        <member name="F:MyCommonTexts.HelpScreen_TutorialsDescription">
            <summary>
             HelpScreen_TutorialsDescription
            </summary>
        </member>
        <member name="F:MyCommonTexts.HelpScreen_TutorialsLinkSteam">
            <summary>
             HelpScreen_TutorialsLinkSteam
            </summary>
        </member>
        <member name="F:MyCommonTexts.HelpScreen_TutorialsLinkYouTube">
            <summary>
             HelpScreen_TutorialsLinkYouTube
            </summary>
        </member>
        <member name="F:MyCommonTexts.ScreenCaptionWelcomeScreen">
            <summary>
             ScreenCaptionWelcomeScreen
            </summary>
        </member>
        <member name="F:MyCommonTexts.ScreenCaptionReportIssueScreen">
            <summary>
             ScreenCaptionReportIssueScreen
            </summary>
        </member>
        <member name="F:MyCommonTexts.ScreenGraphicsOptions_PostProcessing">
            <summary>
             ScreenGraphicsOptions_PostProcessing
            </summary>
        </member>
        <member name="F:MyCommonTexts.ScreenshotMultiplier">
            <summary>
             ScreenshotMultiplier
            </summary>
        </member>
        <member name="F:MyCommonTexts.ScreenGraphicsOptions_FoliageDetails_Extreme">
            <summary>
             ScreenGraphicsOptions_FoliageDetails_Extreme
            </summary>
        </member>
        <member name="F:MyCommonTexts.Blueprints_CreateTooltip">
            <summary>
             Blueprints_CreateTooltip
            </summary>
        </member>
        <member name="F:MyCommonTexts.Blueprints_DeleteTooltip">
            <summary>
             Blueprints_DeleteTooltip
            </summary>
        </member>
        <member name="F:MyCommonTexts.Blueprints_DetailsTooltip">
            <summary>
             Blueprints_DetailsTooltip
            </summary>
        </member>
        <member name="F:MyCommonTexts.Blueprints_EmptyClipboardMessage">
            <summary>
             Blueprints_EmptyClipboardMessage
            </summary>
        </member>
        <member name="F:MyCommonTexts.Blueprints_EmptyClipboardMessageHeader">
            <summary>
             Blueprints_EmptyClipboardMessageHeader
            </summary>
        </member>
        <member name="F:MyCommonTexts.Clipboard_TotalPCU">
            <summary>
             Clipboard_TotalPCU
            </summary>
        </member>
        <member name="F:MyCommonTexts.Clipboard_TotalBlocks">
            <summary>
             Clipboard_TotalBlocks
            </summary>
        </member>
        <member name="F:MyCommonTexts.Blueprints_ListOfBlueprints">
            <summary>
             Blueprints_ListOfBlueprints
            </summary>
        </member>
        <member name="F:MyCommonTexts.Blueprints_OkTooltip">
            <summary>
             Blueprints_OkTooltip
            </summary>
        </member>
        <member name="F:MyCommonTexts.Blueprints_PasteBlueprintMessage">
            <summary>
             Blueprints_PasteBlueprintMessage
            </summary>
        </member>
        <member name="F:MyCommonTexts.Blueprints_PasteBlueprintMessageHeader">
            <summary>
             Blueprints_PasteBlueprintMessageHeader
            </summary>
        </member>
        <member name="F:MyCommonTexts.Blueprints_RefreshTooltip">
            <summary>
             Blueprints_RefreshTooltip
            </summary>
        </member>
        <member name="F:MyCommonTexts.Blueprints_ReplaceBlueprintTooltip">
            <summary>
             Blueprints_ReplaceBlueprintTooltip
            </summary>
        </member>
        <member name="F:MyCommonTexts.Blueprints_SearchTooltip">
            <summary>
             Blueprints_SearchTooltip
            </summary>
        </member>
        <member name="F:MyCommonTexts.Blueprints_SortByTooltip">
            <summary>
             Blueprints_SortByTooltip
            </summary>
        </member>
        <member name="F:MyCommonTexts.Blueprints_TakeScreenshotTooltip">
            <summary>
             Blueprints_TakeScreenshotTooltip
            </summary>
        </member>
        <member name="F:MyCommonTexts.Blueprints_CreateTooltipDisabled">
            <summary>
             Blueprints_CreateTooltipDisabled
            </summary>
        </member>
        <member name="F:MyCommonTexts.Blueprints_DeleteTooltipDisabled">
            <summary>
             Blueprints_DeleteTooltipDisabled
            </summary>
        </member>
        <member name="F:MyCommonTexts.Blueprints_OkTooltipDisabled">
            <summary>
             Blueprints_OkTooltipDisabled
            </summary>
        </member>
        <member name="F:MyCommonTexts.Blueprints_PlayersTooltip">
            <summary>
             Blueprints_PlayersTooltip
            </summary>
        </member>
        <member name="F:MyCommonTexts.Blueprints_RenameTooltip">
            <summary>
             Blueprints_RenameTooltip
            </summary>
        </member>
        <member name="F:MyCommonTexts.Blueprints_TakeScreenshotTooltipDisabled">
            <summary>
             Blueprints_TakeScreenshotTooltipDisabled
            </summary>
        </member>
        <member name="F:MyCommonTexts.ScreenCaptionBlueprintDetails">
            <summary>
             ScreenCaptionBlueprintDetails
            </summary>
        </member>
        <member name="F:MyCommonTexts.ToolTipBlueprintPublish">
            <summary>
             ToolTipBlueprintPublish
            </summary>
        </member>
        <member name="F:MyCommonTexts.BlueprintsMessageBoxDesc_StillLoading">
            <summary>
             BlueprintsMessageBoxDesc_StillLoading
            </summary>
        </member>
        <member name="F:MyCommonTexts.BlueprintsMessageBoxTitle_StillLoading">
            <summary>
             BlueprintsMessageBoxTitle_StillLoading
            </summary>
        </member>
        <member name="F:MyCommonTexts.String1">
            <summary>
             String1
            </summary>
        </member>
        <member name="F:MyCommonTexts.MessageBoxTextAnselNotNvidiaGpu">
            <summary>
             MessageBoxTextAnselNotNvidiaGpu
            </summary>
        </member>
        <member name="F:MyCommonTexts.MessageBoxTextAnselWrongDriverOrCard">
            <summary>
             MessageBoxTextAnselWrongDriverOrCard
            </summary>
        </member>
        <member name="F:MyCommonTexts.MessageBoxTextAnselCannotPauseOnlineGame">
            <summary>
             MessageBoxTextAnselCannotPauseOnlineGame
            </summary>
        </member>
        <member name="F:MyCommonTexts.ColorPicker_Description">
            <summary>
             ColorPicker_Description
            </summary>
        </member>
        <member name="F:MyCommonTexts.EnableSteamCloud">
            <summary>
             EnableSteamCloud
            </summary>
        </member>
        <member name="F:MyCommonTexts.ToolTipGameOptionsEnableSteamCloud">
            <summary>
             ToolTipGameOptionsEnableSteamCloud
            </summary>
        </member>
        <member name="F:MyCommonTexts.EnablePrediction">
            <summary>
             EnablePrediction
            </summary>
        </member>
        <member name="F:MyCommonTexts.ToolTipGameOptionsEnablePrediction">
            <summary>
             ToolTipGameOptionsEnablePrediction
            </summary>
        </member>
        <member name="F:MyCommonTexts.Blueprints_NoCreativeRightsMessage">
            <summary>
             Blueprints_NoCreativeRightsMessage
            </summary>
        </member>
        <member name="F:MyCommonTexts.MessageBoxTextCopyPasteDisabled">
            <summary>
             MessageBoxTextCopyPasteDisabled
            </summary>
        </member>
        <member name="F:MyCommonTexts.WorldFileCouldNotBeLoaded">
            <summary>
             WorldFileCouldNotBeLoaded
            </summary>
        </member>
        <member name="F:MyCommonTexts.MessageBoxTextAnselSpectatorDisabled">
            <summary>
             MessageBoxTextAnselSpectatorDisabled
            </summary>
        </member>
        <member name="F:MyCommonTexts.MessageBoxTextAnselTimeout">
            <summary>
             MessageBoxTextAnselTimeout
            </summary>
        </member>
        <member name="F:MyCommonTexts.Warning_SpacemasterOrHigherRequired">
            <summary>
             Warning_SpacemasterOrHigherRequired
            </summary>
        </member>
        <member name="F:MyCommonTexts.MultiplayerEnterPassword">
            <summary>
             MultiplayerEnterPassword
            </summary>
        </member>
        <member name="F:MyCommonTexts.ProgrammableBlock_Editor_BrowseScripts">
            <summary>
             ProgrammableBlock_Editor_BrowseScripts
            </summary>
        </member>
        <member name="F:MyCommonTexts.Scripts_DeleteTooltip">
            <summary>
             Scripts_DeleteTooltip
            </summary>
        </member>
        <member name="F:MyCommonTexts.Scripts_DetailsTooltip">
            <summary>
             Scripts_DetailsTooltip
            </summary>
        </member>
        <member name="F:MyCommonTexts.Scripts_ListOfScripts">
            <summary>
             Scripts_ListOfScripts
            </summary>
        </member>
        <member name="F:MyCommonTexts.Scripts_LocalScriptsOnly">
            <summary>
             Scripts_LocalScriptsOnly
            </summary>
        </member>
        <member name="F:MyCommonTexts.Scripts_NewFromEditorTooltip">
            <summary>
             Scripts_NewFromEditorTooltip
            </summary>
        </member>
        <member name="F:MyCommonTexts.Scripts_NoSelectedScript">
            <summary>
             Scripts_NoSelectedScript
            </summary>
        </member>
        <member name="F:MyCommonTexts.Scripts_OkTooltip">
            <summary>
             Scripts_OkTooltip
            </summary>
        </member>
        <member name="F:MyCommonTexts.Scripts_OpenWorkshopTooltip">
            <summary>
             Scripts_OpenWorkshopTooltip
            </summary>
        </member>
        <member name="F:MyCommonTexts.Scripts_PublishTooltip">
            <summary>
             Scripts_PublishTooltip
            </summary>
        </member>
        <member name="F:MyCommonTexts.Scripts_RefreshTooltip">
            <summary>
             Scripts_RefreshTooltip
            </summary>
        </member>
        <member name="F:MyCommonTexts.Scripts_RenameTooltip">
            <summary>
             Scripts_RenameTooltip
            </summary>
        </member>
        <member name="F:MyCommonTexts.Scripts_ReplaceTooltip">
            <summary>
             Scripts_ReplaceTooltip
            </summary>
        </member>
        <member name="F:MyCommonTexts.Scripts_SearchTooltip">
            <summary>
             Scripts_SearchTooltip
            </summary>
        </member>
        <member name="F:MyCommonTexts.Scripts_TooManySprites">
            <summary>
             Scripts_TooManySprites
            </summary>
        </member>
        <member name="F:MyCommonTexts.MotD_Button">
            <summary>
             MotD_Button
            </summary>
        </member>
        <member name="F:MyCommonTexts.MotD_Caption">
            <summary>
             MotD_Caption
            </summary>
        </member>
        <member name="F:MyCommonTexts.Server_Restart_Warning">
            <summary>
             Server_Restart_Warning
            </summary>
        </member>
        <member name="F:MyCommonTexts.Server_Update_Warning">
            <summary>
             Server_Update_Warning
            </summary>
        </member>
        <member name="F:MyCommonTexts.ScreenPlayers_Ping">
            <summary>
             ScreenPlayers_Ping
            </summary>
        </member>
        <member name="F:MyCommonTexts.MultiplayerErrorWrongPassword">
            <summary>
             MultiplayerErrorWrongPassword
            </summary>
        </member>
        <member name="F:MyCommonTexts.MultiplayerErrorProfilingNotAllowed">
            <summary>
             MultiplayerErrorProfilingNotAllowed
            </summary>
        </member>
        <member name="F:MyCommonTexts.JoinGame_ColumnTitle_Rank">
            <summary>
             JoinGame_ColumnTitle_Rank
            </summary>
        </member>
        <member name="F:MyCommonTexts.ScreenGraphicsOptions_PerformanceHeavy">
            <summary>
             ScreenGraphicsOptions_PerformanceHeavy
            </summary>
        </member>
        <member name="F:MyCommonTexts.VoxelHandSettingScreen_Caption">
            <summary>
             VoxelHandSettingScreen_Caption
            </summary>
        </member>
        <member name="F:MyCommonTexts.VoxelHands_Description">
            <summary>
             VoxelHands_Description
            </summary>
        </member>
        <member name="F:MyCommonTexts.PerformanceWarningBlocks">
            <summary>
             PerformanceWarningBlocks
            </summary>
        </member>
        <member name="F:MyCommonTexts.PerformanceWarningBlocksBuilt">
            <summary>
             PerformanceWarningBlocksBuilt
            </summary>
        </member>
        <member name="F:MyCommonTexts.PerformanceWarningIssuesBlockBuildingLimits">
            <summary>
             PerformanceWarningIssuesBlockBuildingLimits
            </summary>
        </member>
        <member name="F:MyCommonTexts.PerformanceWarningShowAllBlockLimits">
            <summary>
             PerformanceWarningShowAllBlockLimits
            </summary>
        </member>
        <member name="F:MyCommonTexts.ToolTipPerformanceWarningShowAllBlockLimits">
            <summary>
             ToolTipPerformanceWarningShowAllBlockLimits
            </summary>
        </member>
        <member name="F:MyCommonTexts.NotificationSavingDisabled">
            <summary>
             NotificationSavingDisabled
            </summary>
        </member>
        <member name="F:MyCommonTexts.ScreenMods_ModDependencies">
            <summary>
             ScreenMods_ModDependencies
            </summary>
        </member>
        <member name="F:MyCommonTexts.JoinGame_ColumnTitle_Passworded">
            <summary>
             JoinGame_ColumnTitle_Passworded
            </summary>
        </member>
        <member name="F:MyCommonTexts.PerformanceWarningEnabledGlobally">
            <summary>
             PerformanceWarningEnabledGlobally
            </summary>
        </member>
        <member name="F:MyCommonTexts.PerformanceWarningEnabledPerFaction">
            <summary>
             PerformanceWarningEnabledPerFaction
            </summary>
        </member>
        <member name="F:MyCommonTexts.PerformanceWarningEnabledPerPlayer">
            <summary>
             PerformanceWarningEnabledPerPlayer
            </summary>
        </member>
        <member name="F:MyCommonTexts.PerformanceWarningPCUAvailable">
            <summary>
             PerformanceWarningPCUAvailable
            </summary>
        </member>
        <member name="F:MyCommonTexts.Unlimited">
            <summary>
             Unlimited
            </summary>
        </member>
        <member name="F:MyCommonTexts.ScreenDebugAdminMenu_PlayerCharacterRemoval">
            <summary>
             ScreenDebugAdminMenu_PlayerCharacterRemoval
            </summary>
        </member>
        <member name="F:MyCommonTexts.ScreenDebugAdminMenu_PlayerCharacterRemoval_Tooltip">
            <summary>
             ScreenDebugAdminMenu_PlayerCharacterRemoval_Tooltip
            </summary>
        </member>
        <member name="F:MyCommonTexts.ScreenLoadInventoryColoringFilterTooltip">
            <summary>
             ScreenLoadInventoryColoringFilterTooltip
            </summary>
        </member>
        <member name="F:MyCommonTexts.ExperimentalMode">
            <summary>
             ExperimentalMode
            </summary>
        </member>
        <member name="F:MyCommonTexts.ToolTipGameOptionsExperimentalMode">
            <summary>
             ToolTipGameOptionsExperimentalMode
            </summary>
        </member>
        <member name="F:MyCommonTexts.RemovePilotToo">
            <summary>
             RemovePilotToo
            </summary>
        </member>
        <member name="F:MyCommonTexts.MultiplayerErrorExperimental">
            <summary>
             MultiplayerErrorExperimental
            </summary>
        </member>
        <member name="F:MyCommonTexts.WorldSettings_ModsNeedExperimental">
            <summary>
             WorldSettings_ModsNeedExperimental
            </summary>
        </member>
        <member name="F:MyCommonTexts.SaveGameErrorExperimental">
            <summary>
             SaveGameErrorExperimental
            </summary>
        </member>
        <member name="F:MyCommonTexts.SaveGameErrorExperimentalFeatures">
            <summary>
             SaveGameErrorExperimentalFeatures
            </summary>
        </member>
        <member name="F:MyCommonTexts.SaveGameErrorOverBlockLimits">
            <summary>
             SaveGameErrorOverBlockLimits
            </summary>
        </member>
        <member name="F:MyCommonTexts.MultiplayerWarningPing">
            <summary>
             MultiplayerWarningPing
            </summary>
        </member>
        <member name="F:MyCommonTexts.MultiplayerErrorNotExperimental">
            <summary>
             MultiplayerErrorNotExperimental
            </summary>
        </member>
        <member name="F:MyCommonTexts.ExperimentalRequired">
            <summary>
             ExperimentalRequired
            </summary>
        </member>
        <member name="F:MyCommonTexts.ExperimentalRequiredToDisable">
            <summary>
             ExperimentalRequiredToDisable
            </summary>
        </member>
        <member name="F:MyCommonTexts.Blueprints_UnsafeClipboardMessage">
            <summary>
             Blueprints_UnsafeClipboardMessage
            </summary>
        </member>
        <member name="F:MyCommonTexts.Blueprints_UnsafeClipboardMessageHeader">
            <summary>
             Blueprints_UnsafeClipboardMessageHeader
            </summary>
        </member>
        <member name="F:MyCommonTexts.ServerIsExperimental">
            <summary>
             ServerIsExperimental
            </summary>
        </member>
        <member name="F:MyCommonTexts.MultiplayerReconnector_Caption">
            <summary>
             MultiplayerReconnector_Caption
            </summary>
        </member>
        <member name="F:MyCommonTexts.MultiplayerReconnector_Reconnection">
            <summary>
             MultiplayerReconnector_Reconnection
            </summary>
        </member>
        <member name="F:MyCommonTexts.MultiplayerReconnector_ReconnectionInProgress">
            <summary>
             MultiplayerReconnector_ReconnectionInProgress
            </summary>
        </member>
        <member name="F:MyCommonTexts.OfflineStatus">
            <summary>
             OfflineStatus
            </summary>
        </member>
        <member name="F:MyCommonTexts.SafeZone_BuildingDisabled">
            <summary>
             SafeZone_BuildingDisabled
            </summary>
        </member>
        <member name="F:MyCommonTexts.Multiplayer_PacketLoss">
            <summary>
             Multiplayer_PacketLoss
            </summary>
        </member>
        <member name="F:MyCommonTexts.Multiplayer_PacketLossDescription">
            <summary>
             Multiplayer_PacketLossDescription
            </summary>
        </member>
        <member name="F:MyCommonTexts.MultiplayerReconnector_Reconnecting">
            <summary>
             MultiplayerReconnector_Reconnecting
            </summary>
        </member>
        <member name="F:MyCommonTexts.MultiplayerReconnector_ServerNoResponse">
            <summary>
             MultiplayerReconnector_ServerNoResponse
            </summary>
        </member>
        <member name="F:MyCommonTexts.SafeZone_DrillingDisabled">
            <summary>
             SafeZone_DrillingDisabled
            </summary>
        </member>
        <member name="F:MyCommonTexts.SafeZone_GrindingDisabled">
            <summary>
             SafeZone_GrindingDisabled
            </summary>
        </member>
        <member name="F:MyCommonTexts.SafeZone_ShootingDisabled">
            <summary>
             SafeZone_ShootingDisabled
            </summary>
        </member>
        <member name="F:MyCommonTexts.SafeZone_WeldingDisabled">
            <summary>
             SafeZone_WeldingDisabled
            </summary>
        </member>
        <member name="F:MyCommonTexts.SafeZone_VoxelhandDisabled">
            <summary>
             SafeZone_VoxelhandDisabled
            </summary>
        </member>
        <member name="F:MyCommonTexts.VoxelHand_VoxelMapNeeded">
            <summary>
             VoxelHand_VoxelMapNeeded
            </summary>
        </member>
        <member name="F:MyCommonTexts.SafeZone_Entered">
            <summary>
             SafeZone_Entered
            </summary>
        </member>
        <member name="F:MyCommonTexts.SafeZone_Left">
            <summary>
             SafeZone_Left
            </summary>
        </member>
        <member name="F:MyCommonTexts.PerformanceWarningHeading_ExperimentalBetaBuild">
            <summary>
             PerformanceWarningHeading_ExperimentalBetaBuild
            </summary>
        </member>
        <member name="F:MyCommonTexts.HideMotD">
            <summary>
             HideMotD
            </summary>
        </member>
        <member name="F:MyCommonTexts.MotDCaption">
            <summary>
             MotDCaption
            </summary>
        </member>
        <member name="F:MyCommonTexts.ShowMotD">
            <summary>
             ShowMotD
            </summary>
        </member>
        <member name="F:MyCommonTexts.ScreenCaptionServerName">
            <summary>
             ScreenCaptionServerName
            </summary>
        </member>
        <member name="F:MyCommonTexts.NotificationCopyFailed">
            <summary>
             NotificationCopyFailed
            </summary>
        </member>
        <member name="F:MyCommonTexts.NotificationCopySucceeded">
            <summary>
             NotificationCopySucceeded
            </summary>
        </member>
        <member name="F:MyCommonTexts.NotificationCutPermissionFailed">
            <summary>
             NotificationCutPermissionFailed
            </summary>
        </member>
        <member name="F:MyCommonTexts.NotificationDeletePermissionFailed">
            <summary>
             NotificationDeletePermissionFailed
            </summary>
        </member>
        <member name="F:MyCommonTexts.ScreenDebugAdminMenu_CancleChangesButton">
            <summary>
             ScreenDebugAdminMenu_CancleChangesButton
            </summary>
        </member>
        <member name="F:MyCommonTexts.ScreenDebugAdminMenu_GridCountWarning">
            <summary>
             ScreenDebugAdminMenu_GridCountWarning
            </summary>
        </member>
        <member name="F:MyCommonTexts.ScreenDebugAdminMenu_SubmitChangesButton">
            <summary>
             ScreenDebugAdminMenu_SubmitChangesButton
            </summary>
        </member>
        <member name="F:MyCommonTexts.ScreenDebugAdminMenu_SubmitChangesButtonTooltip">
            <summary>
             ScreenDebugAdminMenu_SubmitChangesButtonTooltip
            </summary>
        </member>
        <member name="F:MyCommonTexts.ScreenDebugAdminMenu_UnsavedTrash">
            <summary>
             ScreenDebugAdminMenu_UnsavedTrash
            </summary>
        </member>
        <member name="F:MyCommonTexts.InvitedToLobby">
            <summary>
             InvitedToLobby
            </summary>
        </member>
        <member name="F:MyCommonTexts.InvitedToLobbyCaption">
            <summary>
             InvitedToLobbyCaption
            </summary>
        </member>
        <member name="F:MyCommonTexts.ModNotReceived">
            <summary>
             ModNotReceived
            </summary>
        </member>
        <member name="F:MyCommonTexts.ModNotReceived_ToolTip">
            <summary>
             ModNotReceived_ToolTip
            </summary>
        </member>
        <member name="F:MyCommonTexts.HelpScreen_SupportLinkUserResponse">
            <summary>
             HelpScreen_SupportLinkUserResponse
            </summary>
        </member>
        <member name="F:MyCommonTexts.ModRuleViolation_PBParallelInvocation">
            <summary>
             ModRuleViolation_PBParallelInvocation
            </summary>
        </member>
        <member name="F:MyCommonTexts.ModRuleViolation_PhysicsParallelAccess">
            <summary>
             ModRuleViolation_PhysicsParallelAccess
            </summary>
        </member>
        <member name="F:MyCommonTexts.ModRuleViolation_EngineParallelAccess">
            <summary>
             ModRuleViolation_EngineParallelAccess
            </summary>
        </member>
        <member name="F:MyCommonTexts.ModRuleViolation_RuntimeScripts">
            <summary>
             ModRuleViolation_RuntimeScripts
            </summary>
        </member>
        <member name="F:MyCommonTexts.ShowGoodBotHints">
            <summary>
             ShowGoodBotHints
            </summary>
        </member>
        <member name="F:MyCommonTexts.ToolTipGameOptionsShowGoodBotHints">
            <summary>
             ToolTipGameOptionsShowGoodBotHints
            </summary>
        </member>
        <member name="F:MyCommonTexts.ScreenCubeBuilderRequiresResearch">
            <summary>
             ScreenCubeBuilderRequiresResearch
            </summary>
        </member>
        <member name="F:MyCommonTexts.Chat_NameModifier_From">
            <summary>
             Chat_NameModifier_From
            </summary>
        </member>
        <member name="F:MyCommonTexts.Chat_NameModifier_Global">
            <summary>
             Chat_NameModifier_Global
            </summary>
        </member>
        <member name="F:MyCommonTexts.Chat_NameModifier_ReportThis">
            <summary>
             Chat_NameModifier_ReportThis
            </summary>
        </member>
        <member name="F:MyCommonTexts.Chat_NameModifier_To">
            <summary>
             Chat_NameModifier_To
            </summary>
        </member>
        <member name="F:MyCommonTexts.Chat_NameModifier_ToBracketed">
            <summary>
             Chat_NameModifier_ToBracketed
            </summary>
        </member>
        <member name="F:MyCommonTexts.WorkshopTag_Npc">
            <summary>
             WorkshopTag_Npc
            </summary>
        </member>
        <member name="F:MyCommonTexts.ScriptingTools_DeselectEntity">
            <summary>
             ScriptingTools_DeselectEntity
            </summary>
        </member>
        <member name="F:MyCommonTexts.ScriptingTools_Coords_Local">
            <summary>
             ScriptingTools_Coords_Local
            </summary>
        </member>
        <member name="F:MyCommonTexts.ScriptingTools_Coords_World">
            <summary>
             ScriptingTools_Coords_World
            </summary>
        </member>
        <member name="F:MyCommonTexts.ScriptingTools_Grow">
            <summary>
             ScriptingTools_Grow
            </summary>
        </member>
        <member name="F:MyCommonTexts.ScriptingTools_Hierarchy">
            <summary>
             ScriptingTools_Hierarchy
            </summary>
        </member>
        <member name="F:MyCommonTexts.ScriptingTools_Rotation">
            <summary>
             ScriptingTools_Rotation
            </summary>
        </member>
        <member name="F:MyCommonTexts.ScriptingTools_Shrink">
            <summary>
             ScriptingTools_Shrink
            </summary>
        </member>
        <member name="F:MyCommonTexts.ScriptingTools_Tooltip_AttachToEntity">
            <summary>
             ScriptingTools_Tooltip_AttachToEntity
            </summary>
        </member>
        <member name="F:MyCommonTexts.ScriptingTools_Tooltip_CutsceneTools">
            <summary>
             ScriptingTools_Tooltip_CutsceneTools
            </summary>
        </member>
        <member name="F:MyCommonTexts.ScriptingTools_Tooltip_DeleteEnt">
            <summary>
             ScriptingTools_Tooltip_DeleteEnt
            </summary>
        </member>
        <member name="F:MyCommonTexts.ScriptingTools_Tooltip_DeselectEnt">
            <summary>
             ScriptingTools_Tooltip_DeselectEnt
            </summary>
        </member>
        <member name="F:MyCommonTexts.ScriptingTools_Tooltip_DisableTransform">
            <summary>
             ScriptingTools_Tooltip_DisableTransform
            </summary>
        </member>
        <member name="F:MyCommonTexts.ScriptingTools_Tooltip_Hierarchy">
            <summary>
             ScriptingTools_Tooltip_Hierarchy
            </summary>
        </member>
        <member name="F:MyCommonTexts.ScriptingTools_Tooltip_LocalCoords">
            <summary>
             ScriptingTools_Tooltip_LocalCoords
            </summary>
        </member>
        <member name="F:MyCommonTexts.ScriptingTools_Tooltip_PositionSet">
            <summary>
             ScriptingTools_Tooltip_PositionSet
            </summary>
        </member>
        <member name="F:MyCommonTexts.ScriptingTools_Tooltip_Rename1">
            <summary>
             ScriptingTools_Tooltip_Rename1
            </summary>
        </member>
        <member name="F:MyCommonTexts.ScriptingTools_Tooltip_Rename2">
            <summary>
             ScriptingTools_Tooltip_Rename2
            </summary>
        </member>
        <member name="F:MyCommonTexts.ScriptingTools_Tooltip_Rotation">
            <summary>
             ScriptingTools_Tooltip_Rotation
            </summary>
        </member>
        <member name="F:MyCommonTexts.ScriptingTools_Tooltip_SizeGrow">
            <summary>
             ScriptingTools_Tooltip_SizeGrow
            </summary>
        </member>
        <member name="F:MyCommonTexts.ScriptingTools_Tooltip_SizeSet">
            <summary>
             ScriptingTools_Tooltip_SizeSet
            </summary>
        </member>
        <member name="F:MyCommonTexts.ScriptingTools_Tooltip_SizeShrink">
            <summary>
             ScriptingTools_Tooltip_SizeShrink
            </summary>
        </member>
        <member name="F:MyCommonTexts.ScriptingTools_Tooltip_SpawnEnt">
            <summary>
             ScriptingTools_Tooltip_SpawnEnt
            </summary>
        </member>
        <member name="F:MyCommonTexts.ScriptingTools_Tooltip_TransformTools">
            <summary>
             ScriptingTools_Tooltip_TransformTools
            </summary>
        </member>
        <member name="F:MyCommonTexts.ScriptingTools_Tooltip_Translation">
            <summary>
             ScriptingTools_Tooltip_Translation
            </summary>
        </member>
        <member name="F:MyCommonTexts.ScriptingTools_Tooltip_TriggerDelete">
            <summary>
             ScriptingTools_Tooltip_TriggerDelete
            </summary>
        </member>
        <member name="F:MyCommonTexts.ScriptingTools_Tooltip_TriggerSelect">
            <summary>
             ScriptingTools_Tooltip_TriggerSelect
            </summary>
        </member>
        <member name="F:MyCommonTexts.ScriptingTools_Tooltip_TriggerSnap">
            <summary>
             ScriptingTools_Tooltip_TriggerSnap
            </summary>
        </member>
        <member name="F:MyCommonTexts.ScriptingTools_Tooltip_WorldCoords">
            <summary>
             ScriptingTools_Tooltip_WorldCoords
            </summary>
        </member>
        <member name="F:MyCommonTexts.ScriptingTools_Translation">
            <summary>
             ScriptingTools_Translation
            </summary>
        </member>
        <member name="F:MyCommonTexts.ScriptingTools_SetPosition">
            <summary>
             ScriptingTools_SetPosition
            </summary>
        </member>
        <member name="F:MyCommonTexts.ScriptingTools_Tooltip_SetPosition">
            <summary>
             ScriptingTools_Tooltip_SetPosition
            </summary>
        </member>
        <member name="F:MyCommonTexts.JoinGame_GameTypeToolTip_PCU_Initial">
            <summary>
             JoinGame_GameTypeToolTip_PCU_Initial
            </summary>
        </member>
        <member name="F:MyCommonTexts.JoinGame_GameTypeToolTip_PCU_Max">
            <summary>
             JoinGame_GameTypeToolTip_PCU_Max
            </summary>
        </member>
        <member name="F:MyCommonTexts.JoinGame_GameTypeToolTip_PCU_Settings">
            <summary>
             JoinGame_GameTypeToolTip_PCU_Settings
            </summary>
        </member>
        <member name="F:MyCommonTexts.JoinGame_GameTypeToolTip_Airtightness">
            <summary>
             JoinGame_GameTypeToolTip_Airtightness
            </summary>
        </member>
        <member name="F:MyCommonTexts.JoinGame_GameTypeToolTip_OFF">
            <summary>
             JoinGame_GameTypeToolTip_OFF
            </summary>
        </member>
        <member name="F:MyCommonTexts.JoinGame_GameTypeToolTip_ON">
            <summary>
             JoinGame_GameTypeToolTip_ON
            </summary>
        </member>
        <member name="F:MyCommonTexts.ServerDetails_BlockLimitsEnabled">
            <summary>
             ServerDetails_BlockLimitsEnabled
            </summary>
        </member>
        <member name="F:MyCommonTexts.ServerDetails_MaxFactionsCount">
            <summary>
             ServerDetails_MaxFactionsCount
            </summary>
        </member>
        <member name="F:MyCommonTexts.ServerDetails_PCU_Initial">
            <summary>
             ServerDetails_PCU_Initial
            </summary>
        </member>
        <member name="F:MyCommonTexts.ServerDetails_TotalPCU">
            <summary>
             ServerDetails_TotalPCU
            </summary>
        </member>
        <member name="F:MyCommonTexts.Blueprints_ReplaceError_CloudOff">
            <summary>
             Blueprints_ReplaceError_CloudOff
            </summary>
        </member>
        <member name="F:MyCommonTexts.Blueprints_ReplaceError_CloudOff_Caption">
            <summary>
             Blueprints_ReplaceError_CloudOff_Caption
            </summary>
        </member>
        <member name="F:MyCommonTexts.Blueprints_ReplaceError_CloudOn">
            <summary>
             Blueprints_ReplaceError_CloudOn
            </summary>
        </member>
        <member name="F:MyCommonTexts.Blueprints_ReplaceError_CloudOn_Caption">
            <summary>
             Blueprints_ReplaceError_CloudOn_Caption
            </summary>
        </member>
        <member name="F:MyCommonTexts.BlocksScreen_BlocksTab">
            <summary>
             BlocksScreen_BlocksTab
            </summary>
        </member>
        <member name="F:MyCommonTexts.BlocksScreen_ResearchTab">
            <summary>
             BlocksScreen_ResearchTab
            </summary>
        </member>
        <member name="F:MyCommonTexts.ScreenDebugAdminMenu_GeneralTabButton">
            <summary>
             ScreenDebugAdminMenu_GeneralTabButton
            </summary>
        </member>
        <member name="F:MyCommonTexts.ScreenDebugAdminMenu_GeneralTabButtonTooltip">
            <summary>
             ScreenDebugAdminMenu_GeneralTabButtonTooltip
            </summary>
        </member>
        <member name="F:MyCommonTexts.ScreenDebugAdminMenu_VoxelTabButton">
            <summary>
             ScreenDebugAdminMenu_VoxelTabButton
            </summary>
        </member>
        <member name="F:MyCommonTexts.ScreenDebugAdminMenu_VoxelTabButtonTooltip">
            <summary>
             ScreenDebugAdminMenu_VoxelTabButtonTooltip
            </summary>
        </member>
        <member name="F:MyCommonTexts.ScreenDebugAdminMenu_PauseTrashVoxelButtonTooltip">
            <summary>
             ScreenDebugAdminMenu_PauseTrashVoxelButtonTooltip
            </summary>
        </member>
        <member name="F:MyCommonTexts.ScreenDebugAdminMenu_VoxelAge">
            <summary>
             ScreenDebugAdminMenu_VoxelAge
            </summary>
        </member>
        <member name="F:MyCommonTexts.ScreenDebugAdminMenu_VoxelAge_Tooltip">
            <summary>
             ScreenDebugAdminMenu_VoxelAge_Tooltip
            </summary>
        </member>
        <member name="F:MyCommonTexts.ScreenDebugAdminMenu_VoxelDistanceFromGrid">
            <summary>
             ScreenDebugAdminMenu_VoxelDistanceFromGrid
            </summary>
        </member>
        <member name="F:MyCommonTexts.ScreenDebugAdminMenu_VoxelDistanceFromGrid_Tooltip">
            <summary>
             ScreenDebugAdminMenu_VoxelDistanceFromGrid_Tooltip
            </summary>
        </member>
        <member name="F:MyCommonTexts.ScreenDebugAdminMenu_VoxelDistanceFromPlayer">
            <summary>
             ScreenDebugAdminMenu_VoxelDistanceFromPlayer
            </summary>
        </member>
        <member name="F:MyCommonTexts.ScreenDebugAdminMenu_VoxelDistanceFromPlayer_Tooltip">
            <summary>
             ScreenDebugAdminMenu_VoxelDistanceFromPlayer_Tooltip
            </summary>
        </member>
        <member name="F:MyCommonTexts.Campaign_Congratulation_Caption">
            <summary>
             Campaign_Congratulation_Caption
            </summary>
        </member>
        <member name="F:MyCommonTexts.Campaign_Congratulation_Text">
            <summary>
             Campaign_Congratulation_Text
            </summary>
        </member>
        <member name="F:MyCommonTexts.ScreenDebugAdminMenu_RevertAsteroids">
            <summary>
             ScreenDebugAdminMenu_RevertAsteroids
            </summary>
        </member>
        <member name="F:MyCommonTexts.ScreenDebugAdminMenu_RevertMaterials">
            <summary>
             ScreenDebugAdminMenu_RevertMaterials
            </summary>
        </member>
        <member name="F:MyCommonTexts.ScreenDebugAdminMenu_RevertWithFloatingsPresent">
            <summary>
             ScreenDebugAdminMenu_RevertWithFloatingsPresent
            </summary>
        </member>
        <member name="F:MyCommonTexts.NotificationFactionResearchFailed">
            <summary>
             NotificationFactionResearchFailed
            </summary>
        </member>
        <member name="F:MyCommonTexts.NotificationFactionResearchUnlocked">
            <summary>
             NotificationFactionResearchUnlocked
            </summary>
        </member>
        <member name="F:MyCommonTexts.NotificationSharedResearch">
            <summary>
             NotificationSharedResearch
            </summary>
        </member>
        <member name="F:MyCommonTexts.MessageBoxConfirmShareResearch">
            <summary>
             MessageBoxConfirmShareResearch
            </summary>
        </member>
        <member name="F:MyCommonTexts.ChatCommands_Menu">
            <summary>
             ChatCommands_Menu
            </summary>
        </member>
        <member name="F:MyCommonTexts.ChatCommand_AvailableCommands">
            <summary>
             ChatCommand_AvailableCommands
            </summary>
        </member>
        <member name="F:MyCommonTexts.ChatCommand_AvailableControls">
            <summary>
             ChatCommand_AvailableControls
            </summary>
        </member>
        <member name="F:MyCommonTexts.ChatCommand_Smite">
            <summary>
             ChatCommand_Smite
            </summary>
        </member>
        <member name="F:MyCommonTexts.ChatCommand_HelpSimple_Smite">
            <summary>
             ChatCommand_HelpSimple_Smite
            </summary>
        </member>
        <member name="F:MyCommonTexts.ChatCommand_Help_Smite">
            <summary>
             ChatCommand_Help_Smite
            </summary>
        </member>
        <member name="F:MyCommonTexts.ChatCommand_RWeather">
            <summary>
             ChatCommand_RWeather
            </summary>
        </member>
        <member name="F:MyCommonTexts.ChatCommand_HelpSimple_RWeather">
            <summary>
             ChatCommand_HelpSimple_RWeather
            </summary>
        </member>
        <member name="F:MyCommonTexts.ChatCommand_Help_RWeather">
            <summary>
             ChatCommand_Help_RWeather
            </summary>
        </member>
        <member name="F:MyCommonTexts.ChatCommand_Texts_RandomWeather">
            <summary>
             ChatCommand_Texts_RandomWeather
            </summary>
        </member>
        <member name="F:MyCommonTexts.ChatCommand_Texts_WeatherIncoming">
            <summary>
             ChatCommand_Texts_WeatherIncoming
            </summary>
        </member>
        <member name="F:MyCommonTexts.ChatCommand_Texts_NoPlayersAround">
            <summary>
             ChatCommand_Texts_NoPlayersAround
            </summary>
        </member>
        <member name="F:MyCommonTexts.ChatCommand_Weatherlist">
            <summary>
             ChatCommand_Weatherlist
            </summary>
        </member>
        <member name="F:MyCommonTexts.ChatCommand_HelpSimple_Weatherlist">
            <summary>
             ChatCommand_HelpSimple_Weatherlist
            </summary>
        </member>
        <member name="F:MyCommonTexts.ChatCommand_Help_Weatherlist">
            <summary>
             ChatCommand_Help_Weatherlist
            </summary>
        </member>
        <member name="F:MyCommonTexts.ChatCommand_Texts_AvailableWeathers">
            <summary>
             ChatCommand_Texts_AvailableWeathers
            </summary>
        </member>
        <member name="F:MyCommonTexts.ChatCommand_Weather">
            <summary>
             ChatCommand_Weather
            </summary>
        </member>
        <member name="F:MyCommonTexts.ChatCommand_Texts_CurrentWeather">
            <summary>
             ChatCommand_Texts_CurrentWeather
            </summary>
        </member>
        <member name="F:MyCommonTexts.ChatCommand_Texts_NoWeather">
            <summary>
             ChatCommand_Texts_NoWeather
            </summary>
        </member>
        <member name="F:MyCommonTexts.ChatCommand_Texts_NoPlanet">
            <summary>
             ChatCommand_Texts_NoPlanet
            </summary>
        </member>
        <member name="F:MyCommonTexts.ChatCommand_Texts_NoWeatherSystem">
            <summary>
             ChatCommand_Texts_NoWeatherSystem
            </summary>
        </member>
        <member name="F:MyCommonTexts.ChatCommand_Texts_PersistentWeather">
            <summary>
             ChatCommand_Texts_PersistentWeather
            </summary>
        </member>
        <member name="F:MyCommonTexts.ChatCommand_Texts_SetWeather">
            <summary>
             ChatCommand_Texts_SetWeather
            </summary>
        </member>
        <member name="F:MyCommonTexts.ChatCommand_Texts_NoWeatherFound">
            <summary>
             ChatCommand_Texts_NoWeatherFound
            </summary>
        </member>
        <member name="F:MyCommonTexts.ChatCommand_Texts_Replace_NoWeatherSelected">
            <summary>
             ChatCommand_Texts_Replace_NoWeatherSelected
            </summary>
        </member>
        <member name="F:MyCommonTexts.ChatCommand_Texts_Replace_NoWeatherFound">
            <summary>
             ChatCommand_Texts_Replace_NoWeatherFound
            </summary>
        </member>
        <member name="F:MyCommonTexts.ChatCommand_Texts_Replace_Success">
            <summary>
             ChatCommand_Texts_Replace_Success
            </summary>
        </member>
        <member name="F:MyCommonTexts.ChatCommand_Texts_RemovedWeather">
            <summary>
             ChatCommand_Texts_RemovedWeather
            </summary>
        </member>
        <member name="F:MyCommonTexts.ChatCommand_HelpSimple_Weather">
            <summary>
             ChatCommand_HelpSimple_Weather
            </summary>
        </member>
        <member name="F:MyCommonTexts.ChatCommand_Help_Weather">
            <summary>
             ChatCommand_Help_Weather
            </summary>
        </member>
        <member name="F:MyCommonTexts.ChatCommand_HelpSimple_F">
            <summary>
             ChatCommand_HelpSimple_F
            </summary>
        </member>
        <member name="F:MyCommonTexts.ChatCommand_HelpSimple_Facepalm">
            <summary>
             ChatCommand_HelpSimple_Facepalm
            </summary>
        </member>
        <member name="F:MyCommonTexts.ChatCommand_HelpSimple_G">
            <summary>
             ChatCommand_HelpSimple_G
            </summary>
        </member>
        <member name="F:MyCommonTexts.ChatCommand_HelpSimple_GPS">
            <summary>
             ChatCommand_HelpSimple_GPS
            </summary>
        </member>
        <member name="F:MyCommonTexts.ChatCommand_HelpSimple_Help">
            <summary>
             ChatCommand_HelpSimple_Help
            </summary>
        </member>
        <member name="F:MyCommonTexts.ChatCommand_HelpSimple_PageDown">
            <summary>
             ChatCommand_HelpSimple_PageDown
            </summary>
        </member>
        <member name="F:MyCommonTexts.ChatCommand_HelpSimple_PageUp">
            <summary>
             ChatCommand_HelpSimple_PageUp
            </summary>
        </member>
        <member name="F:MyCommonTexts.ChatCommand_HelpSimple_Question">
            <summary>
             ChatCommand_HelpSimple_Question
            </summary>
        </member>
        <member name="F:MyCommonTexts.ChatCommand_HelpSimple_Save">
            <summary>
             ChatCommand_HelpSimple_Save
            </summary>
        </member>
        <member name="F:MyCommonTexts.ChatCommand_HelpSimple_Stop">
            <summary>
             ChatCommand_HelpSimple_Stop
            </summary>
        </member>
        <member name="F:MyCommonTexts.ChatCommand_HelpSimple_Thumb">
            <summary>
             ChatCommand_HelpSimple_Thumb
            </summary>
        </member>
        <member name="F:MyCommonTexts.ChatCommand_HelpSimple_Timestamp">
            <summary>
             ChatCommand_HelpSimple_Timestamp
            </summary>
        </member>
        <member name="F:MyCommonTexts.ChatCommand_HelpSimple_Victory">
            <summary>
             ChatCommand_HelpSimple_Victory
            </summary>
        </member>
        <member name="F:MyCommonTexts.ChatCommand_HelpSimple_W">
            <summary>
             ChatCommand_HelpSimple_W
            </summary>
        </member>
        <member name="F:MyCommonTexts.ChatCommand_HelpSimple_U">
            <summary>
             ChatCommand_HelpSimple_U
            </summary>
        </member>
        <member name="F:MyCommonTexts.ChatCommand_HelpSimple_M">
            <summary>
             ChatCommand_HelpSimple_M
            </summary>
        </member>
        <member name="F:MyCommonTexts.ChatCommand_HelpSimple_FYou">
            <summary>
             ChatCommand_HelpSimple_FYou
            </summary>
        </member>
        <member name="F:MyCommonTexts.ChatCommand_HelpSimple_Drunk">
            <summary>
             ChatCommand_HelpSimple_Drunk
            </summary>
        </member>
        <member name="F:MyCommonTexts.ChatCommand_HelpSimple_RPS">
            <summary>
             ChatCommand_HelpSimple_RPS
            </summary>
        </member>
        <member name="F:MyCommonTexts.ChatCommand_HelpSimple_RPS_Rock">
            <summary>
             ChatCommand_HelpSimple_RPS_Rock
            </summary>
        </member>
        <member name="F:MyCommonTexts.ChatCommand_HelpSimple_RPS_Paper">
            <summary>
             ChatCommand_HelpSimple_RPS_Paper
            </summary>
        </member>
        <member name="F:MyCommonTexts.ChatCommand_HelpSimple_RPS_Scissors">
            <summary>
             ChatCommand_HelpSimple_RPS_Scissors
            </summary>
        </member>
        <member name="F:MyCommonTexts.ChatCommand_HelpSimple_Wave">
            <summary>
             ChatCommand_HelpSimple_Wave
            </summary>
        </member>
        <member name="F:MyCommonTexts.ChatCommand_Help_F">
            <summary>
             ChatCommand_Help_F
            </summary>
        </member>
        <member name="F:MyCommonTexts.ChatCommand_Help_Facepalm">
            <summary>
             ChatCommand_Help_Facepalm
            </summary>
        </member>
        <member name="F:MyCommonTexts.ChatCommand_Help_G">
            <summary>
             ChatCommand_Help_G
            </summary>
        </member>
        <member name="F:MyCommonTexts.ChatCommand_Help_GPS">
            <summary>
             ChatCommand_Help_GPS
            </summary>
        </member>
        <member name="F:MyCommonTexts.ChatCommand_Help_Help">
            <summary>
             ChatCommand_Help_Help
            </summary>
        </member>
        <member name="F:MyCommonTexts.ChatCommand_Help_Question">
            <summary>
             ChatCommand_Help_Question
            </summary>
        </member>
        <member name="F:MyCommonTexts.ChatCommand_Help_Save">
            <summary>
             ChatCommand_Help_Save
            </summary>
        </member>
        <member name="F:MyCommonTexts.ChatCommand_Help_Stop">
            <summary>
             ChatCommand_Help_Stop
            </summary>
        </member>
        <member name="F:MyCommonTexts.ChatCommand_Help_Thumb">
            <summary>
             ChatCommand_Help_Thumb
            </summary>
        </member>
        <member name="F:MyCommonTexts.ChatCommand_Help_Timestamp">
            <summary>
             ChatCommand_Help_Timestamp
            </summary>
        </member>
        <member name="F:MyCommonTexts.ChatCommand_Help_Victory">
            <summary>
             ChatCommand_Help_Victory
            </summary>
        </member>
        <member name="F:MyCommonTexts.ChatCommand_Help_W">
            <summary>
             ChatCommand_Help_W
            </summary>
        </member>
        <member name="F:MyCommonTexts.ChatCommand_Help_U">
            <summary>
             ChatCommand_Help_U
            </summary>
        </member>
        <member name="F:MyCommonTexts.ChatCommand_Help_M">
            <summary>
             ChatCommand_Help_M
            </summary>
        </member>
        <member name="F:MyCommonTexts.ChatCommand_Help_Wave">
            <summary>
             ChatCommand_Help_Wave
            </summary>
        </member>
        <member name="F:MyCommonTexts.ChatCommand_PageUpdown">
            <summary>
             ChatCommand_PageUpdown
            </summary>
        </member>
        <member name="F:MyCommonTexts.ControlTypeChat_Commands">
            <summary>
             ControlTypeChat_Commands
            </summary>
        </member>
        <member name="F:MyCommonTexts.ControlTypeChat_Emotes">
            <summary>
             ControlTypeChat_Emotes
            </summary>
        </member>
        <member name="F:MyCommonTexts.ControlTypeChat_Controls">
            <summary>
             ControlTypeChat_Controls
            </summary>
        </member>
        <member name="F:MyCommonTexts.HelpScreen_Chat">
            <summary>
             HelpScreen_Chat
            </summary>
        </member>
        <member name="F:MyCommonTexts.HelpScreen_ChatDescription">
            <summary>
             HelpScreen_ChatDescription
            </summary>
        </member>
        <member name="F:MyCommonTexts.ControlTypeChat_Colors_Header_Name">
            <summary>
             ControlTypeChat_Colors_Header_Name
            </summary>
        </member>
        <member name="F:MyCommonTexts.ControlTypeChat_Colors_Header_Text">
            <summary>
             ControlTypeChat_Colors_Header_Text
            </summary>
        </member>
        <member name="F:MyCommonTexts.ControlTypeChat_Colors_NameDesc_Admin">
            <summary>
             ControlTypeChat_Colors_NameDesc_Admin
            </summary>
        </member>
        <member name="F:MyCommonTexts.ControlTypeChat_Colors_NameDesc_Ally">
            <summary>
             ControlTypeChat_Colors_NameDesc_Ally
            </summary>
        </member>
        <member name="F:MyCommonTexts.ControlTypeChat_Colors_NameDesc_Enemy">
            <summary>
             ControlTypeChat_Colors_NameDesc_Enemy
            </summary>
        </member>
        <member name="F:MyCommonTexts.ControlTypeChat_Colors_NameDesc_Neutral">
            <summary>
             ControlTypeChat_Colors_NameDesc_Neutral
            </summary>
        </member>
        <member name="F:MyCommonTexts.ControlTypeChat_Colors_NameDesc_Self">
            <summary>
             ControlTypeChat_Colors_NameDesc_Self
            </summary>
        </member>
        <member name="F:MyCommonTexts.ControlTypeChat_Colors_Name_Admin">
            <summary>
             ControlTypeChat_Colors_Name_Admin
            </summary>
        </member>
        <member name="F:MyCommonTexts.ControlTypeChat_Colors_Name_Ally">
            <summary>
             ControlTypeChat_Colors_Name_Ally
            </summary>
        </member>
        <member name="F:MyCommonTexts.ControlTypeChat_Colors_Name_Enemy">
            <summary>
             ControlTypeChat_Colors_Name_Enemy
            </summary>
        </member>
        <member name="F:MyCommonTexts.ControlTypeChat_Colors_Name_Neutral">
            <summary>
             ControlTypeChat_Colors_Name_Neutral
            </summary>
        </member>
        <member name="F:MyCommonTexts.ControlTypeChat_Colors_Name_Self">
            <summary>
             ControlTypeChat_Colors_Name_Self
            </summary>
        </member>
        <member name="F:MyCommonTexts.ControlTypeChat_Colors_TextDesc_Faction">
            <summary>
             ControlTypeChat_Colors_TextDesc_Faction
            </summary>
        </member>
        <member name="F:MyCommonTexts.ControlTypeChat_Colors_TextDesc_Global">
            <summary>
             ControlTypeChat_Colors_TextDesc_Global
            </summary>
        </member>
        <member name="F:MyCommonTexts.ControlTypeChat_Colors_TextDesc_Private">
            <summary>
             ControlTypeChat_Colors_TextDesc_Private
            </summary>
        </member>
        <member name="F:MyCommonTexts.ControlTypeChat_Colors_Text_Faction">
            <summary>
             ControlTypeChat_Colors_Text_Faction
            </summary>
        </member>
        <member name="F:MyCommonTexts.ControlTypeChat_Colors_Text_Global">
            <summary>
             ControlTypeChat_Colors_Text_Global
            </summary>
        </member>
        <member name="F:MyCommonTexts.ControlTypeChat_Colors_Text_Private">
            <summary>
             ControlTypeChat_Colors_Text_Private
            </summary>
        </member>
        <member name="F:MyCommonTexts.ChatCommand_Texts_Author">
            <summary>
             ChatCommand_Texts_Author
            </summary>
        </member>
        <member name="F:MyCommonTexts.ChatCommand_Texts_ExecutingSave">
            <summary>
             ChatCommand_Texts_ExecutingSave
            </summary>
        </member>
        <member name="F:MyCommonTexts.ChatCommand_Texts_ExecutingSaveFinished">
            <summary>
             ChatCommand_Texts_ExecutingSaveFinished
            </summary>
        </member>
        <member name="F:MyCommonTexts.ChatCommand_Texts_FactionChatTarget">
            <summary>
             ChatCommand_Texts_FactionChatTarget
            </summary>
        </member>
        <member name="F:MyCommonTexts.ChatCommand_Texts_GPSRequireFaction">
            <summary>
             ChatCommand_Texts_GPSRequireFaction
            </summary>
        </member>
        <member name="F:MyCommonTexts.ChatCommand_Texts_GPSInvalidName">
            <summary>
             ChatCommand_Texts_GPSInvalidName
            </summary>
        </member>
        <member name="F:MyCommonTexts.ChatCommand_Texts_GPSRequireOnline">
            <summary>
             ChatCommand_Texts_GPSRequireOnline
            </summary>
        </member>
        <member name="F:MyCommonTexts.ChatCommand_Texts_Help">
            <summary>
             ChatCommand_Texts_Help
            </summary>
        </member>
        <member name="F:MyCommonTexts.ChatCommand_Texts_NoPermission">
            <summary>
             ChatCommand_Texts_NoPermission
            </summary>
        </member>
        <member name="F:MyCommonTexts.ChatCommand_Texts_NotFound">
            <summary>
             ChatCommand_Texts_NotFound
            </summary>
        </member>
        <member name="F:MyCommonTexts.ChatCommand_Texts_StopExecuting">
            <summary>
             ChatCommand_Texts_StopExecuting
            </summary>
        </member>
        <member name="F:MyCommonTexts.ChatCommand_Texts_StopRequiresDS">
            <summary>
             ChatCommand_Texts_StopRequiresDS
            </summary>
        </member>
        <member name="F:MyCommonTexts.ChatCommand_Texts_WhisperChatTarget">
            <summary>
             ChatCommand_Texts_WhisperChatTarget
            </summary>
        </member>
        <member name="F:MyCommonTexts.ChatCommand_Texts_WhisperTargetNotFound">
            <summary>
             ChatCommand_Texts_WhisperTargetNotFound
            </summary>
        </member>
        <member name="F:MyCommonTexts.RequiresDlc">
            <summary>
             RequiresDlc
            </summary>
        </member>
        <member name="F:MyCommonTexts.ScenarioRequiresDlc">
            <summary>
             ScenarioRequiresDlc
            </summary>
        </member>
        <member name="F:MyCommonTexts.ScenarioRequiresDlc_ps">
            <summary>
             ScenarioRequiresDlc_ps
            </summary>
        </member>
        <member name="F:MyCommonTexts.MessageBoxTextMissingDLCWhenPasting">
            <summary>
             MessageBoxTextMissingDLCWhenPasting
            </summary>
        </member>
        <member name="F:MyCommonTexts.BlocksScreen_DLCStore">
            <summary>
             BlocksScreen_DLCStore
            </summary>
        </member>
        <member name="F:MyCommonTexts.BlocksScreen_DLCStore_ps">
            <summary>
             BlocksScreen_DLCStore_ps
            </summary>
        </member>
        <member name="F:MyCommonTexts.RequiresAnyDlc">
            <summary>
             RequiresAnyDlc
            </summary>
        </member>
        <member name="F:MyCommonTexts.RequiresGameInventoryItem">
            <summary>
             RequiresGameInventoryItem
            </summary>
        </member>
        <member name="F:MyCommonTexts.RequiresAnyGameInventoryItem">
            <summary>
             RequiresAnyGameInventoryItem
            </summary>
        </member>
        <member name="F:MyCommonTexts.ShowInGameInventoryStore">
            <summary>
             ShowInGameInventoryStore
            </summary>
        </member>
        <member name="F:MyCommonTexts.PasteAnyway">
            <summary>
             PasteAnyway
            </summary>
        </member>
        <member name="F:MyCommonTexts.VisitStore">
            <summary>
             VisitStore
            </summary>
        </member>
        <member name="F:MyCommonTexts.PerformanceWarningHeading_PaidContent">
            <summary>
             PerformanceWarningHeading_PaidContent
            </summary>
        </member>
        <member name="F:MyCommonTexts.PerformanceWarningHeading_SteamOffline">
            <summary>
             PerformanceWarningHeading_SteamOffline
            </summary>
        </member>
        <member name="F:MyCommonTexts.PerformanceWarningIssuesPaidContent">
            <summary>
             PerformanceWarningIssuesPaidContent
            </summary>
        </member>
        <member name="F:MyCommonTexts.PerformanceWarningTitle_PaidContent">
            <summary>
             PerformanceWarningTitle_PaidContent
            </summary>
        </member>
        <member name="F:MyCommonTexts.ShowDlcStore">
            <summary>
             ShowDlcStore
            </summary>
        </member>
        <member name="F:MyCommonTexts.GoToStore">
            <summary>
             GoToStore
            </summary>
        </member>
        <member name="F:MyCommonTexts.ChatCommand_Angry">
            <summary>
             ChatCommand_Angry
            </summary>
        </member>
        <member name="F:MyCommonTexts.ChatCommand_HelpSimple_Angry">
            <summary>
             ChatCommand_HelpSimple_Angry
            </summary>
        </member>
        <member name="F:MyCommonTexts.ChatCommand_AssistCome">
            <summary>
             ChatCommand_AssistCome
            </summary>
        </member>
        <member name="F:MyCommonTexts.ChatCommand_HelpSimple_AssistCome">
            <summary>
             ChatCommand_HelpSimple_AssistCome
            </summary>
        </member>
        <member name="F:MyCommonTexts.ChatCommand_AssistStop">
            <summary>
             ChatCommand_AssistStop
            </summary>
        </member>
        <member name="F:MyCommonTexts.ChatCommand_HelpSimple_AssistStop">
            <summary>
             ChatCommand_HelpSimple_AssistStop
            </summary>
        </member>
        <member name="F:MyCommonTexts.ChatCommand_Dance">
            <summary>
             ChatCommand_Dance
            </summary>
        </member>
        <member name="F:MyCommonTexts.ChatCommand_HelpSimple_Dance">
            <summary>
             ChatCommand_HelpSimple_Dance
            </summary>
        </member>
        <member name="F:MyCommonTexts.ChatCommand_PointAggressive">
            <summary>
             ChatCommand_PointAggressive
            </summary>
        </member>
        <member name="F:MyCommonTexts.ChatCommand_HelpSimple_PointAggressive">
            <summary>
             ChatCommand_HelpSimple_PointAggressive
            </summary>
        </member>
        <member name="F:MyCommonTexts.ChatCommand_PointBack">
            <summary>
             ChatCommand_PointBack
            </summary>
        </member>
        <member name="F:MyCommonTexts.ChatCommand_HelpSimple_PointBack">
            <summary>
             ChatCommand_HelpSimple_PointBack
            </summary>
        </member>
        <member name="F:MyCommonTexts.ChatCommand_PointDown">
            <summary>
             ChatCommand_PointDown
            </summary>
        </member>
        <member name="F:MyCommonTexts.ChatCommand_HelpSimple_PointDown">
            <summary>
             ChatCommand_HelpSimple_PointDown
            </summary>
        </member>
        <member name="F:MyCommonTexts.ChatCommand_PointForward">
            <summary>
             ChatCommand_PointForward
            </summary>
        </member>
        <member name="F:MyCommonTexts.ChatCommand_HelpSimple_PointForward">
            <summary>
             ChatCommand_HelpSimple_PointForward
            </summary>
        </member>
        <member name="F:MyCommonTexts.ChatCommand_PointLeft">
            <summary>
             ChatCommand_PointLeft
            </summary>
        </member>
        <member name="F:MyCommonTexts.ChatCommand_HelpSimple_PointLeft">
            <summary>
             ChatCommand_HelpSimple_PointLeft
            </summary>
        </member>
        <member name="F:MyCommonTexts.ChatCommand_PointRight">
            <summary>
             ChatCommand_PointRight
            </summary>
        </member>
        <member name="F:MyCommonTexts.ChatCommand_HelpSimple_PointRight">
            <summary>
             ChatCommand_HelpSimple_PointRight
            </summary>
        </member>
        <member name="F:MyCommonTexts.ChatCommand_HelpSimple_Cold">
            <summary>
             ChatCommand_HelpSimple_Cold
            </summary>
        </member>
        <member name="F:MyCommonTexts.ChatCommand_HelpSimple_CheckWrist">
            <summary>
             ChatCommand_HelpSimple_CheckWrist
            </summary>
        </member>
        <member name="F:MyCommonTexts.ApplyColor">
            <summary>
             ApplyColor
            </summary>
        </member>
        <member name="F:MyCommonTexts.ApplyColorTooltip">
            <summary>
             ApplyColorTooltip
            </summary>
        </member>
        <member name="F:MyCommonTexts.ApplySkin">
            <summary>
             ApplySkin
            </summary>
        </member>
        <member name="F:MyCommonTexts.ApplySkinTooltip">
            <summary>
             ApplySkinTooltip
            </summary>
        </member>
        <member name="F:MyCommonTexts.ModIO_EnterCode">
            <summary>
             ModIO_EnterCode
            </summary>
        </member>
        <member name="F:MyCommonTexts.HelpScreen_LearningToSurvive">
            <summary>
             HelpScreen_LearningToSurvive
            </summary>
        </member>
        <member name="F:MyCommonTexts.HelpScreen_NeverSurrender">
            <summary>
             HelpScreen_NeverSurrender
            </summary>
        </member>
        <member name="F:MyCommonTexts.HelpScreen_TheFirstJump">
            <summary>
             HelpScreen_TheFirstJump
            </summary>
        </member>
        <member name="F:MyCommonTexts.SimpleNewGame_Creative">
            <summary>
             SimpleNewGame_Creative
            </summary>
        </member>
        <member name="F:MyCommonTexts.SimpleNewGame_Custom">
            <summary>
             SimpleNewGame_Custom
            </summary>
        </member>
        <member name="F:MyCommonTexts.SimpleNewGame_LearningToSurvive">
            <summary>
             SimpleNewGame_LearningToSurvive
            </summary>
        </member>
        <member name="F:MyCommonTexts.SimpleNewGame_NeverSurrender">
            <summary>
             SimpleNewGame_NeverSurrender
            </summary>
        </member>
        <member name="F:MyCommonTexts.SimpleNewGame_TheFirstJump">
            <summary>
             SimpleNewGame_TheFirstJump
            </summary>
        </member>
        <member name="F:MyCommonTexts.SimpleNewGame_SparksOfTheFuture">
            <summary>
             SimpleNewGame_SparksOfTheFuture
            </summary>
        </member>
        <member name="F:MyCommonTexts.SimpleNewGame_Workshop">
            <summary>
             SimpleNewGame_Workshop
            </summary>
        </member>
        <member name="F:MyCommonTexts.SimpleNewGame_Start">
            <summary>
             SimpleNewGame_Start
            </summary>
        </member>
        <member name="F:MyCommonTexts.SimpleNewGame_Creative_Description">
            <summary>
             SimpleNewGame_Creative_Description
            </summary>
        </member>
        <member name="F:MyCommonTexts.SimpleNewGame_LearningToSurvive_Description">
            <summary>
             SimpleNewGame_LearningToSurvive_Description
            </summary>
        </member>
        <member name="F:MyCommonTexts.SimpleNewGame_NeverSurrender_Description">
            <summary>
             SimpleNewGame_NeverSurrender_Description
            </summary>
        </member>
        <member name="F:MyCommonTexts.SimpleNewGame_TheFirstJump_Description">
            <summary>
             SimpleNewGame_TheFirstJump_Description
            </summary>
        </member>
        <member name="F:MyCommonTexts.SimpleNewGame_SparksOfTheFuture_Description">
            <summary>
             SimpleNewGame_SparksOfTheFuture_Description
            </summary>
        </member>
        <member name="F:MyCommonTexts.SettingSymmetryXGamepad">
            <summary>
             SettingSymmetryXGamepad
            </summary>
        </member>
        <member name="F:MyCommonTexts.SettingSymmetryXOffsetGamepad">
            <summary>
             SettingSymmetryXOffsetGamepad
            </summary>
        </member>
        <member name="F:MyCommonTexts.SettingSymmetryYGamepad">
            <summary>
             SettingSymmetryYGamepad
            </summary>
        </member>
        <member name="F:MyCommonTexts.SettingSymmetryYOffsetGamepad">
            <summary>
             SettingSymmetryYOffsetGamepad
            </summary>
        </member>
        <member name="F:MyCommonTexts.SettingSymmetryZGamepad">
            <summary>
             SettingSymmetryZGamepad
            </summary>
        </member>
        <member name="F:MyCommonTexts.SettingSymmetryZOffsetGamepad">
            <summary>
             SettingSymmetryZOffsetGamepad
            </summary>
        </member>
        <member name="F:MyCommonTexts.ChatRestricted">
            <summary>
             ChatRestricted
            </summary>
        </member>
        <member name="F:MyCommonTexts.MessageBoxTextRemoveControlBinding">
            <summary>
             MessageBoxTextRemoveControlBinding
            </summary>
        </member>
        <member name="F:MyCommonTexts.MessageBoxConfirmWarDeclaration">
            <summary>
             MessageBoxConfirmWarDeclaration
            </summary>
        </member>
        <member name="F:MyCommonTexts.Contract_Delivery_GpsDescription">
            <summary>
             Contract_Delivery_GpsDescription
            </summary>
        </member>
        <member name="F:MyCommonTexts.Contract_Delivery_GpsName">
            <summary>
             Contract_Delivery_GpsName
            </summary>
        </member>
        <member name="F:MyCommonTexts.Contract_Find_GpsDescription">
            <summary>
             Contract_Find_GpsDescription
            </summary>
        </member>
        <member name="F:MyCommonTexts.Contract_Find_GpsName">
            <summary>
             Contract_Find_GpsName
            </summary>
        </member>
        <member name="F:MyCommonTexts.Contract_Escort_GpsDescription">
            <summary>
             Contract_Escort_GpsDescription
            </summary>
        </member>
        <member name="F:MyCommonTexts.Contract_Escort_GpsName">
            <summary>
             Contract_Escort_GpsName
            </summary>
        </member>
        <member name="F:MyCommonTexts.Contract_Hunt_GpsDescription">
            <summary>
             Contract_Hunt_GpsDescription
            </summary>
        </member>
        <member name="F:MyCommonTexts.Contract_Hunt_GpsName">
            <summary>
             Contract_Hunt_GpsName
            </summary>
        </member>
        <member name="F:MyCommonTexts.Contract_ObtainAndDelivery_GpsDescription">
            <summary>
             Contract_ObtainAndDelivery_GpsDescription
            </summary>
        </member>
        <member name="F:MyCommonTexts.Contract_ObtainAndDelivery_GpsName">
            <summary>
             Contract_ObtainAndDelivery_GpsName
            </summary>
        </member>
        <member name="F:MyCommonTexts.ControlName_ActiveContractScreen">
            <summary>
             ControlName_ActiveContractScreen
            </summary>
        </member>
        <member name="F:MyCommonTexts.Datapad_InventoryItem_TTIP_Keyboard">
            <summary>
             Datapad_InventoryItem_TTIP_Keyboard
            </summary>
        </member>
        <member name="F:MyCommonTexts.Datapad_InventoryItem_TTIP_Gamepad">
            <summary>
             Datapad_InventoryItem_TTIP_Gamepad
            </summary>
        </member>
        <member name="F:MyCommonTexts.Consumable_InventoryItem_TTIP_Keyboard">
            <summary>
             Consumable_InventoryItem_TTIP_Keyboard
            </summary>
        </member>
        <member name="F:MyCommonTexts.Consumable_InventoryItem_TTIP_Gamepad">
            <summary>
             Consumable_InventoryItem_TTIP_Gamepad
            </summary>
        </member>
        <member name="F:MyCommonTexts.ScreenOptionsGame_ResetGoodbotHints">
            <summary>
             ScreenOptionsGame_ResetGoodbotHints
            </summary>
        </member>
        <member name="F:MyCommonTexts.ScreenOptionsGame_ResetGoodbotHints_TTIP">
            <summary>
             ScreenOptionsGame_ResetGoodbotHints_TTIP
            </summary>
        </member>
        <member name="F:MyCommonTexts.MessageBoxCaption_GoodBotHintsReset">
            <summary>
             MessageBoxCaption_GoodBotHintsReset
            </summary>
        </member>
        <member name="F:MyCommonTexts.MessageBoxText_GoodBotHintReset">
            <summary>
             MessageBoxText_GoodBotHintReset
            </summary>
        </member>
        <member name="F:MyCommonTexts.ScreenDebugAdminMenu_OtherTabButton">
            <summary>
             ScreenDebugAdminMenu_OtherTabButton
            </summary>
        </member>
        <member name="F:MyCommonTexts.ScreenAdmin_Trash_AFKTimeout">
            <summary>
             ScreenAdmin_Trash_AFKTimeout
            </summary>
        </member>
        <member name="F:MyCommonTexts.ScreenAdmin_Trash_AFKTimeout_TTIP">
            <summary>
             ScreenAdmin_Trash_AFKTimeout_TTIP
            </summary>
        </member>
        <member name="F:MyCommonTexts.ScreenAdmin_Trash_StopGridsPeriod">
            <summary>
             ScreenAdmin_Trash_StopGridsPeriod
            </summary>
        </member>
        <member name="F:MyCommonTexts.ScreenAdmin_Trash_StopGridsPeriod_TTIP">
            <summary>
             ScreenAdmin_Trash_StopGridsPeriod_TTIP
            </summary>
        </member>
        <member name="F:MyCommonTexts.ScreenAdmin_Trash_RemoveInactiveEnt">
            <summary>
             ScreenAdmin_Trash_RemoveInactiveEnt
            </summary>
        </member>
        <member name="F:MyCommonTexts.ScreenAdmin_Trash_RemoveInactiveEnt_TTIP">
            <summary>
             ScreenAdmin_Trash_RemoveInactiveEnt_TTIP
            </summary>
        </member>
        <member name="F:MyCommonTexts.ScreenAdmin_Trash_ResetForageableItems">
            <summary>
             ScreenAdmin_Trash_ResetForageableItems
            </summary>
        </member>
        <member name="F:MyCommonTexts.ScreenAdmin_Trash_ResetForageableItemsTime">
            <summary>
             ScreenAdmin_Trash_ResetForageableItemsTime
            </summary>
        </member>
        <member name="F:MyCommonTexts.ScreenAdmin_Trash_ResetForageableItemsDistance">
            <summary>
             ScreenAdmin_Trash_ResetForageableItemsDistance
            </summary>
        </member>
        <member name="F:MyCommonTexts.MessageBoxErrorFactionsMissingRights">
            <summary>
             MessageBoxErrorFactionsMissingRights
            </summary>
        </member>
        <member name="F:MyCommonTexts.EnableNewNewGameScreen">
            <summary>
             EnableNewNewGameScreen
            </summary>
        </member>
        <member name="F:MyCommonTexts.ToolTipGameOptionsEnableNewNewGameScreen">
            <summary>
             ToolTipGameOptionsEnableNewNewGameScreen
            </summary>
        </member>
        <member name="F:MyCommonTexts.ControlHintColoringTool">
            <summary>
             ControlHintColoringTool
            </summary>
        </member>
        <member name="F:MyCommonTexts.VoxelHands_Description_Gamepad">
            <summary>
             VoxelHands_Description_Gamepad
            </summary>
        </member>
        <member name="F:MyCommonTexts.Gamepad_GScreen_Caption">
            <summary>
             Gamepad_GScreen_Caption
            </summary>
        </member>
        <member name="F:MyCommonTexts.Gamepad_GScreen_Hint">
            <summary>
             Gamepad_GScreen_Hint
            </summary>
        </member>
        <member name="F:MyCommonTexts.OffensiveTextTooltip">
            <summary>
             OffensiveTextTooltip
            </summary>
        </member>
        <member name="F:MyCommonTexts.MessageBoxCaptionUser">
            <summary>
             MessageBoxCaptionUser
            </summary>
        </member>
        <member name="F:MyCommonTexts.MessageBoxTextNoUser">
            <summary>
             MessageBoxTextNoUser
            </summary>
        </member>
        <member name="F:MyCommonTexts.MessageBoxCaptionCriticalMemory">
            <summary>
             MessageBoxCaptionCriticalMemory
            </summary>
        </member>
        <member name="F:MyCommonTexts.MessageBoxTextCriticalMemory">
            <summary>
             MessageBoxTextCriticalMemory
            </summary>
        </member>
        <member name="F:MyCommonTexts.Gamepad_Help_Button">
            <summary>
             Gamepad_Help_Button
            </summary>
        </member>
        <member name="F:MyCommonTexts.Gamepad_Help_Checkbox">
            <summary>
             Gamepad_Help_Checkbox
            </summary>
        </member>
        <member name="F:MyCommonTexts.Gamepad_Help_Combobox">
            <summary>
             Gamepad_Help_Combobox
            </summary>
        </member>
        <member name="F:MyCommonTexts.Gamepad_Help_Slider">
            <summary>
             Gamepad_Help_Slider
            </summary>
        </member>
        <member name="F:MyCommonTexts.Gamepad_Help_SearchBox">
            <summary>
             Gamepad_Help_SearchBox
            </summary>
        </member>
        <member name="F:MyCommonTexts.Gamepad_Help_Table">
            <summary>
             Gamepad_Help_Table
            </summary>
        </member>
        <member name="F:MyCommonTexts.Gamepad_Help_Textbox">
            <summary>
             Gamepad_Help_Textbox
            </summary>
        </member>
        <member name="F:MyCommonTexts.Gamepad_Help_CommTextBox">
            <summary>
             Gamepad_Help_CommTextBox
            </summary>
        </member>
        <member name="F:MyCommonTexts.GamepadScheme">
            <summary>
             GamepadScheme
            </summary>
        </member>
        <member name="F:MyCommonTexts.GamepadScheme_1">
            <summary>
             GamepadScheme_1
            </summary>
        </member>
        <member name="F:MyCommonTexts.GamepadScheme_2">
            <summary>
             GamepadScheme_2
            </summary>
        </member>
        <member name="F:MyCommonTexts.GamepadScheme_Flight">
            <summary>
             GamepadScheme_Flight
            </summary>
        </member>
        <member name="F:MyCommonTexts.GamepadScheme_FlightAlternative">
            <summary>
             GamepadScheme_FlightAlternative
            </summary>
        </member>
        <member name="F:MyCommonTexts.GamepadScheme_Default">
            <summary>
             GamepadScheme_Default
            </summary>
        </member>
        <member name="F:MyCommonTexts.ToolTipOptionsControls_GamepadScheme">
            <summary>
             ToolTipOptionsControls_GamepadScheme
            </summary>
        </member>
        <member name="F:MyCommonTexts.Gamepad_Help_TableSort">
            <summary>
             Gamepad_Help_TableSort
            </summary>
        </member>
        <member name="F:MyCommonTexts.InvertGamepadYChar">
            <summary>
             InvertGamepadYChar
            </summary>
        </member>
        <member name="F:MyCommonTexts.InvertGamepadYVehicle">
            <summary>
             InvertGamepadYVehicle
            </summary>
        </member>
        <member name="F:MyCommonTexts.Gamepad_Help_ContentButton">
            <summary>
             Gamepad_Help_ContentButton
            </summary>
        </member>
        <member name="F:MyCommonTexts.Gamepad_help_ControlList">
            <summary>
             Gamepad_help_ControlList
            </summary>
        </member>
        <member name="F:MyCommonTexts.Gamepad_Help_Grid">
            <summary>
             Gamepad_Help_Grid
            </summary>
        </member>
        <member name="F:MyCommonTexts.Gamepad_Help_Listbox">
            <summary>
             Gamepad_Help_Listbox
            </summary>
        </member>
        <member name="F:MyCommonTexts.Gamepad_Help_MultiLineTextbox">
            <summary>
             Gamepad_Help_MultiLineTextbox
            </summary>
        </member>
        <member name="F:MyCommonTexts.MessageBox_Help_OK">
            <summary>
             MessageBox_Help_OK
            </summary>
        </member>
        <member name="F:MyCommonTexts.MessageBox_Help_YesNo">
            <summary>
             MessageBox_Help_YesNo
            </summary>
        </member>
        <member name="F:MyCommonTexts.MessageBox_Help_YesNoCancel">
            <summary>
             MessageBox_Help_YesNoCancel
            </summary>
        </member>
        <member name="F:MyCommonTexts.MessageBox_Help_DontShowAgain">
            <summary>
             MessageBox_Help_DontShowAgain
            </summary>
        </member>
        <member name="F:MyCommonTexts.MessageBox_Help_DontShowAgain_Checked">
            <summary>
             MessageBox_Help_DontShowAgain_Checked
            </summary>
        </member>
        <member name="F:MyCommonTexts.XBoxPermission_MultiplayerError">
            <summary>
             XBoxPermission_MultiplayerError
            </summary>
        </member>
        <member name="F:MyCommonTexts.Gamepad_Help_Back">
            <summary>
             Gamepad_Help_Back
            </summary>
        </member>
        <member name="F:MyCommonTexts.PerformanceWarningCombinationGamepad">
            <summary>
             PerformanceWarningCombinationGamepad
            </summary>
        </member>
        <member name="F:MyCommonTexts.MessageBox_LoadingUserData">
            <summary>
             MessageBox_LoadingUserData
            </summary>
        </member>
        <member name="F:MyCommonTexts.SimpleNewGame_Open">
            <summary>
             SimpleNewGame_Open
            </summary>
        </member>
        <member name="F:MyCommonTexts.DialogAmount_Help_Screen">
            <summary>
             DialogAmount_Help_Screen
            </summary>
        </member>
        <member name="F:MyCommonTexts.HelpScreen_Inventory">
            <summary>
             HelpScreen_Inventory
            </summary>
        </member>
        <member name="F:MyCommonTexts.HelpScreen_Production">
            <summary>
             HelpScreen_Production
            </summary>
        </member>
        <member name="F:MyCommonTexts.HelpScreen_GeneralUI">
            <summary>
             HelpScreen_GeneralUI
            </summary>
        </member>
        <member name="F:MyCommonTexts.HelpScreen_Inventory_MoveItem">
            <summary>
             HelpScreen_Inventory_MoveItem
            </summary>
        </member>
        <member name="F:MyCommonTexts.HelpScreen_Inventory_Split">
            <summary>
             HelpScreen_Inventory_Split
            </summary>
        </member>
        <member name="F:MyCommonTexts.HelpScreen_Inventory_Transfer">
            <summary>
             HelpScreen_Inventory_Transfer
            </summary>
        </member>
        <member name="F:MyCommonTexts.HelpScreen_Inventory_Transfer10">
            <summary>
             HelpScreen_Inventory_Transfer10
            </summary>
        </member>
        <member name="F:MyCommonTexts.HelpScreen_Inventory_Transfer100">
            <summary>
             HelpScreen_Inventory_Transfer100
            </summary>
        </member>
        <member name="F:MyCommonTexts.HelpScreen_Inventory_Transfer1000">
            <summary>
             HelpScreen_Inventory_Transfer1000
            </summary>
        </member>
        <member name="F:MyCommonTexts.HelpScreen_Inventory_UseItem">
            <summary>
             HelpScreen_Inventory_UseItem
            </summary>
        </member>
        <member name="F:MyCommonTexts.HelpScreen_Production_Dequeue">
            <summary>
             HelpScreen_Production_Dequeue
            </summary>
        </member>
        <member name="F:MyCommonTexts.HelpScreen_Production_MoveItem">
            <summary>
             HelpScreen_Production_MoveItem
            </summary>
        </member>
        <member name="F:MyCommonTexts.HelpScreen_Production_Queue1">
            <summary>
             HelpScreen_Production_Queue1
            </summary>
        </member>
        <member name="F:MyCommonTexts.HelpScreen_Production_Queue10">
            <summary>
             HelpScreen_Production_Queue10
            </summary>
        </member>
        <member name="F:MyCommonTexts.HelpScreen_Production_Queue100">
            <summary>
             HelpScreen_Production_Queue100
            </summary>
        </member>
        <member name="F:MyCommonTexts.HelpScreen_Production_Queue1000">
            <summary>
             HelpScreen_Production_Queue1000
            </summary>
        </member>
        <member name="F:MyCommonTexts.HelpScreen_Numeric">
            <summary>
             HelpScreen_Numeric
            </summary>
        </member>
        <member name="F:MyCommonTexts.HelpScreen_Numeric_Move1">
            <summary>
             HelpScreen_Numeric_Move1
            </summary>
        </member>
        <member name="F:MyCommonTexts.HelpScreen_Numeric_Move10">
            <summary>
             HelpScreen_Numeric_Move10
            </summary>
        </member>
        <member name="F:MyCommonTexts.HelpScreen_Numeric_Move100">
            <summary>
             HelpScreen_Numeric_Move100
            </summary>
        </member>
        <member name="F:MyCommonTexts.HelpScreen_Numeric_Move1000">
            <summary>
             HelpScreen_Numeric_Move1000
            </summary>
        </member>
        <member name="F:MyCommonTexts.HelpScreen_Slider">
            <summary>
             HelpScreen_Slider
            </summary>
        </member>
        <member name="F:MyCommonTexts.HelpScreen_Slider_Move1">
            <summary>
             HelpScreen_Slider_Move1
            </summary>
        </member>
        <member name="F:MyCommonTexts.HelpScreen_Slider_Move10">
            <summary>
             HelpScreen_Slider_Move10
            </summary>
        </member>
        <member name="F:MyCommonTexts.HelpScreen_Slider_Move100">
            <summary>
             HelpScreen_Slider_Move100
            </summary>
        </member>
        <member name="F:MyCommonTexts.HelpScreen_Slider_MoveHalf">
            <summary>
             HelpScreen_Slider_MoveHalf
            </summary>
        </member>
        <member name="F:MyCommonTexts.HelpScreen_Listbox">
            <summary>
             HelpScreen_Listbox
            </summary>
        </member>
        <member name="F:MyCommonTexts.HelpScreen_Listbox_AddMove">
            <summary>
             HelpScreen_Listbox_AddMove
            </summary>
        </member>
        <member name="F:MyCommonTexts.HelpScreen_Listbox_DeSelectAll">
            <summary>
             HelpScreen_Listbox_DeSelectAll
            </summary>
        </member>
        <member name="F:MyCommonTexts.HelpScreen_Listbox_Move">
            <summary>
             HelpScreen_Listbox_Move
            </summary>
        </member>
        <member name="F:MyCommonTexts.HelpScreen_Listbox_SelectCurrent">
            <summary>
             HelpScreen_Listbox_SelectCurrent
            </summary>
        </member>
        <member name="F:MyCommonTexts.HelpScreen_Listbox_SelectMove">
            <summary>
             HelpScreen_Listbox_SelectMove
            </summary>
        </member>
        <member name="F:MyCommonTexts.HelpScreen_Listbox_SelectRange">
            <summary>
             HelpScreen_Listbox_SelectRange
            </summary>
        </member>
        <member name="F:MyCommonTexts.HelpScreen_Listbox_ToggleCurrent">
            <summary>
             HelpScreen_Listbox_ToggleCurrent
            </summary>
        </member>
        <member name="F:MyCommonTexts.HelpScreen_Listbox_ToggleMove">
            <summary>
             HelpScreen_Listbox_ToggleMove
            </summary>
        </member>
        <member name="F:MyCommonTexts.Crosshair_AlwaysHidden">
            <summary>
             Crosshair_AlwaysHidden
            </summary>
        </member>
        <member name="F:MyCommonTexts.Crosshair_AlwaysVisible">
            <summary>
             Crosshair_AlwaysVisible
            </summary>
        </member>
        <member name="F:MyCommonTexts.Crosshair_VisibleWithHUD">
            <summary>
             Crosshair_VisibleWithHUD
            </summary>
        </member>
        <member name="F:MyCommonTexts.ControllerErrorCaption">
            <summary>
             ControllerErrorCaption
            </summary>
        </member>
        <member name="F:MyCommonTexts.ControllerErrorText">
            <summary>
             ControllerErrorText
            </summary>
        </member>
        <member name="F:MyCommonTexts.ResearchGraph_Help_Control">
            <summary>
             ResearchGraph_Help_Control
            </summary>
        </member>
        <member name="F:MyCommonTexts.Gamepad_Help_TabControl_Left">
            <summary>
             Gamepad_Help_TabControl_Left
            </summary>
        </member>
        <member name="F:MyCommonTexts.Gamepad_Help_TabControl_Right">
            <summary>
             Gamepad_Help_TabControl_Right
            </summary>
        </member>
        <member name="F:MyCommonTexts.ScreenTextPanel_GamepadHelp">
            <summary>
             ScreenTextPanel_GamepadHelp
            </summary>
        </member>
        <member name="F:MyCommonTexts.ScreenTextPanel_GamepadHelp_Xbox">
            <summary>
             ScreenTextPanel_GamepadHelp_Xbox
            </summary>
        </member>
        <member name="F:MyCommonTexts.ResearchGraph_BuildPlanner_Control">
            <summary>
             ResearchGraph_BuildPlanner_Control
            </summary>
        </member>
        <member name="F:MyCommonTexts.CloudQuota_CloudUsage">
            <summary>
             CloudQuota_CloudUsage
            </summary>
        </member>
        <member name="F:MyCommonTexts.Gamepad_Help_TableSort_Empty">
            <summary>
             Gamepad_Help_TableSort_Empty
            </summary>
        </member>
        <member name="F:MyCommonTexts.DialogTextIncompatibleWorldVersionWarning">
            <summary>
             DialogTextIncompatibleWorldVersionWarning
            </summary>
        </member>
        <member name="F:MyCommonTexts.PerformanceWarningAreaBlocksDescriptionSimple">
            <summary>
             PerformanceWarningAreaBlocksDescriptionSimple
            </summary>
        </member>
        <member name="F:MyCommonTexts.PerformanceWarningAreaConveyorDescriptionSimple">
            <summary>
             PerformanceWarningAreaConveyorDescriptionSimple
            </summary>
        </member>
        <member name="F:MyCommonTexts.PerformanceWarningAreaGridDescriptionSimple">
            <summary>
             PerformanceWarningAreaGridDescriptionSimple
            </summary>
        </member>
        <member name="F:MyCommonTexts.PerformanceWarningIssuesServer_Simspeed_Simple">
            <summary>
             PerformanceWarningIssuesServer_Simspeed_Simple
            </summary>
        </member>
        <member name="F:MyCommonTexts.ExperimentalOutOfMemoryCrashMessageBox">
            <summary>
             ExperimentalOutOfMemoryCrashMessageBox
            </summary>
        </member>
        <member name="F:MyCommonTexts.ScreenDebugAdminMenu_RevertBoulders">
            <summary>
             ScreenDebugAdminMenu_RevertBoulders
            </summary>
        </member>
        <member name="F:MyCommonTexts.HelpScreen_PossibilitiesWithinTheGameModes">
            <summary>
             HelpScreen_PossibilitiesWithinTheGameModes
            </summary>
        </member>
        <member name="F:MyCommonTexts.HelpScreen_DrillingRefiningAssemblingSurvival">
            <summary>
             HelpScreen_DrillingRefiningAssemblingSurvival
            </summary>
        </member>
        <member name="F:MyCommonTexts.HelpScreen_BuildingYour1stShipCreative">
            <summary>
             HelpScreen_BuildingYour1stShipCreative
            </summary>
        </member>
        <member name="F:MyCommonTexts.HelpScreen_BuildingYour1stGroundVehicle">
            <summary>
             HelpScreen_BuildingYour1stGroundVehicle
            </summary>
        </member>
        <member name="F:MyCommonTexts.HelpScreen_OtherAdviceClosingThoughts">
            <summary>
             HelpScreen_OtherAdviceClosingThoughts
            </summary>
        </member>
        <member name="F:MyCommonTexts.HelpScreen_Introduction">
            <summary>
             HelpScreen_Introduction
            </summary>
        </member>
        <member name="F:MyCommonTexts.HelpScreen_SteamWorkshopAndBlueprints">
            <summary>
             HelpScreen_SteamWorkshopAndBlueprints
            </summary>
        </member>
        <member name="F:MyCommonTexts.HelpScreen_HelloEngineer">
            <summary>
             HelpScreen_HelloEngineer
            </summary>
        </member>
        <member name="F:MyCommonTexts.HelpScreen_AccessHelpScreen">
            <summary>
             HelpScreen_AccessHelpScreen
            </summary>
        </member>
        <member name="F:MyCommonTexts.HelpScreen_DontShowAgain">
            <summary>
             HelpScreen_DontShowAgain
            </summary>
        </member>
        <member name="F:MyCommonTexts.GridsRemovedWhilePasting">
            <summary>
             GridsRemovedWhilePasting
            </summary>
        </member>
        <member name="F:MyCommonTexts.HelpScreen_GamepadAdvanced_NextToolbar">
            <summary>
             HelpScreen_GamepadAdvanced_NextToolbar
            </summary>
        </member>
        <member name="F:MyCommonTexts.HelpScreen_GamepadAdvanced_PreviousToolbar">
            <summary>
             HelpScreen_GamepadAdvanced_PreviousToolbar
            </summary>
        </member>
        <member name="F:MyCommonTexts.HelpScreen_GeneralGame">
            <summary>
             HelpScreen_GeneralGame
            </summary>
        </member>
        <member name="F:MyCommonTexts.HelpScreen_ActionSetup">
            <summary>
             HelpScreen_ActionSetup
            </summary>
        </member>
        <member name="F:MyCommonTexts.PerformanceWarningIssues_BetaTest_Header">
            <summary>
             PerformanceWarningIssues_BetaTest_Header
            </summary>
        </member>
        <member name="F:MyCommonTexts.PerformanceWarningIssues_BetaTest_Message">
            <summary>
             PerformanceWarningIssues_BetaTest_Message
            </summary>
        </member>
        <member name="F:MyCommonTexts.PerformanceWarningIssues_SimplifiedSimulation_Header">
            <summary>
             PerformanceWarningIssues_SimplifiedSimulation_Header
            </summary>
        </member>
        <member name="F:MyCommonTexts.PerformanceWarningIssues_SimplifiedSimulation_Message">
            <summary>
             PerformanceWarningIssues_SimplifiedSimulation_Message
            </summary>
        </member>
        <member name="F:MyCommonTexts.ChatCommand_HelpSimple_Charge">
            <summary>
             ChatCommand_HelpSimple_Charge
            </summary>
        </member>
        <member name="F:MyCommonTexts.ChatCommand_HelpSimple_ComeHereBaby">
            <summary>
             ChatCommand_HelpSimple_ComeHereBaby
            </summary>
        </member>
        <member name="F:MyCommonTexts.ChatCommand_HelpSimple_DanceDisco1">
            <summary>
             ChatCommand_HelpSimple_DanceDisco1
            </summary>
        </member>
        <member name="F:MyCommonTexts.ChatCommand_HelpSimple_DanceDisco2">
            <summary>
             ChatCommand_HelpSimple_DanceDisco2
            </summary>
        </member>
        <member name="F:MyCommonTexts.ChatCommand_HelpSimple_LookingAround">
            <summary>
             ChatCommand_HelpSimple_LookingAround
            </summary>
        </member>
        <member name="F:MyCommonTexts.ChatCommand_HelpSimple_Stretching">
            <summary>
             ChatCommand_HelpSimple_Stretching
            </summary>
        </member>
        <member name="F:MyCommonTexts.ChatCommand_HelpSimple_Whatever">
            <summary>
             ChatCommand_HelpSimple_Whatever
            </summary>
        </member>
        <member name="F:MyCommonTexts.ChatCommand_HelpSimple_yelling">
            <summary>
             ChatCommand_HelpSimple_yelling
            </summary>
        </member>
        <member name="F:MyCommonTexts.JoinGame_Networking_eos">
            <summary>
             JoinGame_Networking_eos
            </summary>
        </member>
        <member name="F:MyCommonTexts.JoinGame_Networking_steam">
            <summary>
             JoinGame_Networking_steam
            </summary>
        </member>
        <member name="F:MyCommonTexts.MessageBoxTextBetaFeedback">
            <summary>
             MessageBoxTextBetaFeedback
            </summary>
        </member>
        <member name="F:MyCommonTexts.MessageBoxCaptionBetaFeedback">
            <summary>
             MessageBoxCaptionBetaFeedback
            </summary>
        </member>
        <member name="F:MyCommonTexts.SimpleNewGame_ScrapRace">
            <summary>
             SimpleNewGame_ScrapRace
            </summary>
        </member>
        <member name="F:MyCommonTexts.SimpleNewGame_ScrapRace_Description">
            <summary>
             SimpleNewGame_ScrapRace_Description
            </summary>
        </member>
        <member name="F:MyCommonTexts.IronSight_Hold">
            <summary>
             IronSight_Hold
            </summary>
        </member>
        <member name="F:MyCommonTexts.IronSight_Toggle">
            <summary>
             IronSight_Toggle
            </summary>
        </member>
        <member name="F:MyCommonTexts.ToolTipGameOptionsIronsightSwitchType">
            <summary>
             ToolTipGameOptionsIronsightSwitchType
            </summary>
        </member>
        <member name="F:MyCommonTexts.IronSightSwitch">
            <summary>
             IronSightSwitch
            </summary>
        </member>
        <member name="F:MyCommonTexts.ConsumableCooldown">
            <summary>
             ConsumableCooldown
            </summary>
        </member>
        <member name="F:MyCommonTexts.ControlName_Reload">
            <summary>
             ControlName_Reload
            </summary>
        </member>
        <member name="F:MyCommonTexts.ControlName_Reload_Tooltip">
            <summary>
             ControlName_Reload_Tooltip
            </summary>
        </member>
        <member name="F:MyCommonTexts.Notification_Match_Advanced">
            <summary>
             Notification_Match_Advanced
            </summary>
        </member>
        <member name="F:MyCommonTexts.Notification_Match_Paused">
            <summary>
             Notification_Match_Paused
            </summary>
        </member>
        <member name="F:MyCommonTexts.Notification_Match_Started">
            <summary>
             Notification_Match_Started
            </summary>
        </member>
        <member name="F:MyCommonTexts.Notification_Match_Stopped">
            <summary>
             Notification_Match_Stopped
            </summary>
        </member>
        <member name="F:MyCommonTexts.Notification_Match_Unpaused">
            <summary>
             Notification_Match_Unpaused
            </summary>
        </member>
        <member name="F:MyCommonTexts.Notification_Match_AddTime">
            <summary>
             Notification_Match_AddTime
            </summary>
        </member>
        <member name="F:MyCommonTexts.Notification_Match_SetTime">
            <summary>
             Notification_Match_SetTime
            </summary>
        </member>
        <member name="F:MyCommonTexts.Notification_Match_StopFailed">
            <summary>
             Notification_Match_StopFailed
            </summary>
        </member>
        <member name="F:MyCommonTexts.Notification_WeatherDamage">
            <summary>
             Notification_WeatherDamage
            </summary>
        </member>
        <member name="F:MyCommonTexts.LockingInProgress">
            <summary>
             LockingInProgress
            </summary>
        </member>
        <member name="F:MyCommonTexts.NoTargetLocked">
            <summary>
             NoTargetLocked
            </summary>
        </member>
        <member name="F:MyCommonTexts.TargetOutOfRange">
            <summary>
             TargetOutOfRange
            </summary>
        </member>
        <member name="F:MyCommonTexts.ChatCommand_HelpSimple_FingerGuns">
            <summary>
             ChatCommand_HelpSimple_FingerGuns
            </summary>
        </member>
        <member name="F:MyCommonTexts.ChatCommand_HelpSimple_GotHit">
            <summary>
             ChatCommand_HelpSimple_GotHit
            </summary>
        </member>
        <member name="F:MyCommonTexts.ChatCommand_Help_Dance">
            <summary>
             ChatCommand_Help_Dance
            </summary>
        </member>
        <member name="F:MyCommonTexts.ChatCommand_Help_Drunk">
            <summary>
             ChatCommand_Help_Drunk
            </summary>
        </member>
        <member name="F:MyCommonTexts.ChatCommand_Help_RPS">
            <summary>
             ChatCommand_Help_RPS
            </summary>
        </member>
        <member name="F:MyCommonTexts.ChatCommand_HelpSimple_Salute">
            <summary>
             ChatCommand_HelpSimple_Salute
            </summary>
        </member>
        <member name="F:MyCommonTexts.ChatCommand_Help_Salute">
            <summary>
             ChatCommand_Help_Salute
            </summary>
        </member>
        <member name="F:MyCommonTexts.Front">
            <summary>
             Front
            </summary>
        </member>
        <member name="F:MyCommonTexts.DegreeSymbol">
            <summary>
             DegreeSymbol
            </summary>
        </member>
        <member name="F:MyCommonTexts.PercentSign">
            <summary>
             PercentSign
            </summary>
        </member>
        <member name="F:MyCommonTexts.LengthUnitSymbol">
            <summary>
             LengthUnitSymbol
            </summary>
        </member>
        <member name="F:MyCommonTexts.MultiplayerReconnector_Restarting_Match">
            <summary>
             MultiplayerReconnector_Restarting_Match
            </summary>
        </member>
        <member name="F:MyCommonTexts.GravityUnitSymbol">
            <summary>
             GravityUnitSymbol
            </summary>
        </member>
        <member name="F:MyCommonTexts.DialogTextDownloadModsFailed_NotEnoughSpace">
            <summary>
             DialogTextDownloadModsFailed_NotEnoughSpace
            </summary>
        </member>
        <member name="F:MyCommonTexts.MessageBoxText_NotEnoughSpace">
            <summary>
             MessageBoxText_NotEnoughSpace
            </summary>
        </member>
        <member name="F:MyCommonTexts.MultiplayerErrorExperimentalJoin">
            <summary>
             MultiplayerErrorExperimentalJoin
            </summary>
        </member>
        <member name="F:MyCommonTexts.XBoxPermission_Multiplayer">
            <summary>
             XBoxPermission_Multiplayer
            </summary>
        </member>
        <member name="F:MyCommonTexts.XBoxPermission_UGC">
            <summary>
             XBoxPermission_UGC
            </summary>
        </member>
        <member name="F:MyCommonTexts.ScreenDebugOfficial_SolarBlocks">
            <summary>
             ScreenDebugOfficial_SolarBlocks
            </summary>
        </member>
        <member name="F:MyCommonTexts.CauseOfDeath_Temperature">
            <summary>
             CauseOfDeath_Temperature
            </summary>
        </member>
        <member name="F:MyCommonTexts.CauseOfDeath_Asphyxia">
            <summary>
             CauseOfDeath_Asphyxia
            </summary>
        </member>
        <member name="F:MyCommonTexts.CauseOfDeath_Environment">
            <summary>
             CauseOfDeath_Environment
            </summary>
        </member>
        <member name="F:MyCommonTexts.CauseOfDeath_Bullet">
            <summary>
             CauseOfDeath_Bullet
            </summary>
        </member>
        <member name="F:MyCommonTexts.CauseOfDeath_Weapon">
            <summary>
             CauseOfDeath_Weapon
            </summary>
        </member>
        <member name="F:MyCommonTexts.CauseOfDeath_Explosion">
            <summary>
             CauseOfDeath_Explosion
            </summary>
        </member>
        <member name="F:MyCommonTexts.CauseOfDeath_Rocket">
            <summary>
             CauseOfDeath_Rocket
            </summary>
        </member>
        <member name="F:MyCommonTexts.CauseOfDeath_Radioactivity">
            <summary>
             CauseOfDeath_Radioactivity
            </summary>
        </member>
        <member name="F:MyCommonTexts.CauseOfDeath_Weather">
            <summary>
             CauseOfDeath_Weather
            </summary>
        </member>
        <member name="F:MyCommonTexts.CauseOfDeath_Spider">
            <summary>
             CauseOfDeath_Spider
            </summary>
        </member>
        <member name="F:MyCommonTexts.CauseOfDeath_Wolf">
            <summary>
             CauseOfDeath_Wolf
            </summary>
        </member>
        <member name="F:MyCommonTexts.CauseOfDeath_Thruster">
            <summary>
             CauseOfDeath_Thruster
            </summary>
        </member>
        <member name="F:MyCommonTexts.CauseOfDeath_Grind">
            <summary>
             CauseOfDeath_Grind
            </summary>
        </member>
        <member name="F:MyCommonTexts.CauseOfDeath_Drill">
            <summary>
             CauseOfDeath_Drill
            </summary>
        </member>
        <member name="F:MyCommonTexts.CauseOfDeath_Weld">
            <summary>
             CauseOfDeath_Weld
            </summary>
        </member>
        <member name="F:MyCommonTexts.CauseOfDeath_Default">
            <summary>
             CauseOfDeath_Default
            </summary>
        </member>
        <member name="F:MyCommonTexts.CauseOfDeath_OutOfBounds">
            <summary>
             CauseOfDeath_OutOfBounds
            </summary>
        </member>
        <member name="F:MyCommonTexts.CauseOfDeath_Respawning">
            <summary>
             CauseOfDeath_Respawning
            </summary>
        </member>
        <member name="F:MyCommonTexts.CauseOfDeath_LowPressure">
            <summary>
             CauseOfDeath_LowPressure
            </summary>
        </member>
        <member name="F:MyCommonTexts.MessageBoxCaption_Notice">
            <summary>
             MessageBoxCaption_Notice
            </summary>
        </member>
        <member name="F:MyCommonTexts.MessageBoxCaption_Respawn">
            <summary>
             MessageBoxCaption_Respawn
            </summary>
        </member>
        <member name="F:MyCommonTexts.MessageBoxCaption_DiedInCryo">
            <summary>
             MessageBoxCaption_DiedInCryo
            </summary>
        </member>
        <member name="F:MyCommonTexts.ScreenAdmin_Trash_CargoBagsCount">
            <summary>
             ScreenAdmin_Trash_CargoBagsCount
            </summary>
        </member>
        <member name="F:MyCommonTexts.ScreenAdmin_Trash_CargoBagsCount_TTIP">
            <summary>
             ScreenAdmin_Trash_CargoBagsCount_TTIP
            </summary>
        </member>
        <member name="F:MyCommonTexts.ScreenAdmin_Trash_CargoBagsLifetime">
            <summary>
             ScreenAdmin_Trash_CargoBagsLifetime
            </summary>
        </member>
        <member name="F:MyCommonTexts.ScreenAdmin_Trash_CargoBagsLifetime_TTIP">
            <summary>
             ScreenAdmin_Trash_CargoBagsLifetime_TTIP
            </summary>
        </member>
        <member name="F:MyCommonTexts.ChatCommand_Texts_MuteNotSpecified">
            <summary>
             ChatCommand_Texts_MuteNotSpecified
            </summary>
        </member>
        <member name="F:MyCommonTexts.ChatCommand_Texts_UnMuteNotSpecified">
            <summary>
             ChatCommand_Texts_UnMuteNotSpecified
            </summary>
        </member>
        <member name="F:MyCommonTexts.ChatCommand_Texts_MuteSucccess">
            <summary>
             ChatCommand_Texts_MuteSucccess
            </summary>
        </member>
        <member name="F:MyCommonTexts.ChatCommand_Texts_UnMuteSucccess">
            <summary>
             ChatCommand_Texts_UnMuteSucccess
            </summary>
        </member>
        <member name="F:MyCommonTexts.CategoryDefinition_Sandbox">
            <summary>
             CategoryDefinition_Sandbox
            </summary>
        </member>
        <member name="F:MyCommonTexts.CategoryDefinition_Scenario">
            <summary>
             CategoryDefinition_Scenario
            </summary>
        </member>
        <member name="F:MyCommonTexts.CategoryDefinition_PVPMultiplayer">
            <summary>
             CategoryDefinition_PVPMultiplayer
            </summary>
        </member>
        <member name="F:MyCommonTexts.CategoryDefinition_OriginContent">
            <summary>
             CategoryDefinition_OriginContent
            </summary>
        </member>
        <member name="F:MyCommonTexts.CategoryDefinition_CommunityContent">
            <summary>
             CategoryDefinition_CommunityContent
            </summary>
        </member>
        <member name="F:MyCommonTexts.CategoryDefinition_SandboxDescription">
            <summary>
             CategoryDefinition_SandboxDescription
            </summary>
        </member>
        <member name="F:MyCommonTexts.CategoryDefinition_ScenarioDescription">
            <summary>
             CategoryDefinition_ScenarioDescription
            </summary>
        </member>
        <member name="F:MyCommonTexts.CategoryDefinition_PVPMultiplayerDescription">
            <summary>
             CategoryDefinition_PVPMultiplayerDescription
            </summary>
        </member>
        <member name="F:MyCommonTexts.CategoryDefinition_OriginContentDescription">
            <summary>
             CategoryDefinition_OriginContentDescription
            </summary>
        </member>
        <member name="F:MyCommonTexts.CategoryDefinition_CommunityContentDescription">
            <summary>
             CategoryDefinition_CommunityContentDescription
            </summary>
        </member>
        <member name="F:MyCommonTexts.WorldInfo_Missing">
            <summary>
             WorldInfo_Missing
            </summary>
        </member>
        <member name="F:MyCommonTexts.WorldInfo_Name_LostColony">
            <summary>
             WorldInfo_Name_LostColony
            </summary>
        </member>
        <member name="F:MyCommonTexts.WorldInfo_Name_NeverSurrender">
            <summary>
             WorldInfo_Name_NeverSurrender
            </summary>
        </member>
        <member name="F:MyCommonTexts.WorldInfo_Name_UraniumHeist">
            <summary>
             WorldInfo_Name_UraniumHeist
            </summary>
        </member>
        <member name="F:MyCommonTexts.WorldInfo_Name_SpaceStandoff">
            <summary>
             WorldInfo_Name_SpaceStandoff
            </summary>
        </member>
        <member name="F:MyCommonTexts.Button_Customize">
            <summary>
             Button_Customize
            </summary>
        </member>
        <member name="F:MyCommonTexts.HelpText_Console_Back">
            <summary>
             HelpText_Console_Back
            </summary>
        </member>
        <member name="F:MyCommonTexts.MessageBox_DontShowThisAgain">
            <summary>
             MessageBox_DontShowThisAgain
            </summary>
        </member>
        <member name="F:MyCommonTexts.CustomizeScenario_BasicSettings">
            <summary>
             CustomizeScenario_BasicSettings
            </summary>
        </member>
        <member name="F:MyCommonTexts.CustomizeScenario_AdvancedSettings">
            <summary>
             CustomizeScenario_AdvancedSettings
            </summary>
        </member>
        <member name="F:MyCommonTexts.CustomizeScenario_ChooseMods">
            <summary>
             CustomizeScenario_ChooseMods
            </summary>
        </member>
        <member name="F:MyCommonTexts.CustomizeScenario_SearchMods">
            <summary>
             CustomizeScenario_SearchMods
            </summary>
        </member>
        <member name="F:MyCommonTexts.ScreenMenuButtonNewsLetter">
            <summary>
             ScreenMenuButtonNewsLetter
            </summary>
        </member>
        <member name="F:MyCommonTexts.ScreenMenuNewsLetterURL">
            <summary>
             ScreenMenuNewsLetterURL
            </summary>
        </member>
        <member name="F:MyCommonTexts.ScreenMenuNewsLetterURLFriendlyName">
            <summary>
             ScreenMenuNewsLetterURLFriendlyName
            </summary>
        </member>
        <member name="F:MyCommonTexts.SimpleNewGame_SpaceStandoff_Description">
            <summary>
             SimpleNewGame_SpaceStandoff_Description
            </summary>
        </member>
        <member name="F:MyCommonTexts.SimpleNewGame_UraniumHeist_Description">
            <summary>
             SimpleNewGame_UraniumHeist_Description
            </summary>
        </member>
        <member name="F:MyCommonTexts.CauseOfDeath_LightWeapons">
            <summary>
             CauseOfDeath_LightWeapons
            </summary>
        </member>
        <member name="F:MyCommonTexts.CauseOfDeath_HeavyWeapons">
            <summary>
             CauseOfDeath_HeavyWeapons
            </summary>
        </member>
        <member name="F:MyCommonTexts.Filter_Mods_Size">
            <summary>
             Filter_Mods_Size
            </summary>
        </member>
        <member name="F:MyCommonTexts.HelpScreen_ReportBug">
            <summary>
             HelpScreen_ReportBug
            </summary>
        </member>
        <member name="F:MyCommonTexts.HelpScreen_SendFeedback">
            <summary>
             HelpScreen_SendFeedback
            </summary>
        </member>
        <member name="F:MyCommonTexts.Available_PCU">
            <summary>
             Available_PCU
            </summary>
        </member>
        <member name="F:MyCommonTexts.GpsGlobalEncounterLessMin">
            <summary>
             GpsGlobalEncounterLessMin
            </summary>
        </member>
        <member name="F:MyCommonTexts.ControlName_Page1">
            <summary>
             ControlName_Page1
            </summary>
        </member>
        <member name="F:MyCommonTexts.ControlName_Page2">
            <summary>
             ControlName_Page2
            </summary>
        </member>
        <member name="F:MyCommonTexts.ControlName_Page3">
            <summary>
             ControlName_Page3
            </summary>
        </member>
        <member name="F:MyCommonTexts.ControlName_Page4">
            <summary>
             ControlName_Page4
            </summary>
        </member>
        <member name="F:MyCommonTexts.ControlName_Page5">
            <summary>
             ControlName_Page5
            </summary>
        </member>
        <member name="F:MyCommonTexts.ControlName_Page6">
            <summary>
             ControlName_Page6
            </summary>
        </member>
        <member name="F:MyCommonTexts.ControlName_Page7">
            <summary>
             ControlName_Page7
            </summary>
        </member>
        <member name="F:MyCommonTexts.ControlName_Page8">
            <summary>
             ControlName_Page8
            </summary>
        </member>
        <member name="F:MyCommonTexts.ControlName_Page9">
            <summary>
             ControlName_Page9
            </summary>
        </member>
        <member name="F:MyCommonTexts.ControlName_Page0">
            <summary>
             ControlName_Page0
            </summary>
        </member>
        <member name="F:MyCommonTexts.ControlTypeToolbarPages">
            <summary>
             ControlTypeToolbarPages
            </summary>
        </member>
        <member name="F:MyCommonTexts.ControlTypeUIScreens">
            <summary>
             ControlTypeUIScreens
            </summary>
        </member>
        <member name="F:MyCommonTexts.ControlName_CubeRotateSlowMode">
            <summary>
             ControlName_CubeRotateSlowMode
            </summary>
        </member>
        <member name="F:MyCommonTexts.ControlName_CubeRotateFastMode">
            <summary>
             ControlName_CubeRotateFastMode
            </summary>
        </member>
        <member name="F:MyCommonTexts.ControlTypeGridManagement">
            <summary>
             ControlTypeGridManagement
            </summary>
        </member>
        <member name="F:MyCommonTexts.KeySetupEscCancel">
            <summary>
             KeySetupEscCancel
            </summary>
        </member>
        <member name="F:MyCommonTexts.CustomizeScenario_Misc">
            <summary>
             CustomizeScenario_Misc
            </summary>
        </member>
        <member name="F:MyCommonTexts.CustomizeScenario_ExperimentalSettings">
            <summary>
             CustomizeScenario_ExperimentalSettings
            </summary>
        </member>
        <member name="F:MyCommonTexts.CustomizeScenario_CombatAndPvP">
            <summary>
             CustomizeScenario_CombatAndPvP
            </summary>
        </member>
        <member name="F:MyCommonTexts.CustomizeScenario_EncountersAndNPCs">
            <summary>
             CustomizeScenario_EncountersAndNPCs
            </summary>
        </member>
        <member name="F:MyCommonTexts.CustomizeScenario_Survival">
            <summary>
             CustomizeScenario_Survival
            </summary>
        </member>
        <member name="F:MyCommonTexts.CustomizeScenario_Environment">
            <summary>
             CustomizeScenario_Environment
            </summary>
        </member>
        <member name="F:MyCommonTexts.CustomizeScenario_GlobalMultipliers">
            <summary>
             CustomizeScenario_GlobalMultipliers
            </summary>
        </member>
        <member name="F:MyCommonTexts.GamepadScheme_GenericJoystick">
            <summary>
             GamepadScheme_GenericJoystick
            </summary>
        </member>
    </members>
</doc>
